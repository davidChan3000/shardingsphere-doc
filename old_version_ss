commit 64c4a1af8a856de2e1125b336a0cd36db52814ca
Author: Liang Zhang <zhangliang@apache.org>
Date:   Sat Mar 2 16:52:15 2024 +0800

    Add DataSourceMapperRule (#30372)
    
    * Add DataSourceMapperRule
    
    * Add DataSourceMapperRule
    
    * Add DataSourceMapperRule
    
    * Add DataSourceMapperRule
    
    * Add DataSourceMapperRule
    
    * Update code Conduct
    
    * Update code Conduct

diff --git a/docs/community/content/involved/conduct/code.cn.md b/docs/community/content/involved/conduct/code.cn.md
index b85b7e13cd9..9889e49347a 100644
--- a/docs/community/content/involved/conduct/code.cn.md
+++ b/docs/community/content/involved/conduct/code.cn.md
@@ -20,28 +20,34 @@ chapter = true
 
  - 确保遵守编码规范。
  - 确保构建流程中的各个步骤都成功完成，包括：Apache 协议文件头检查、Checkstyle 检查、编译、单元测试等。构建流程启动命令：`./mvnw clean install -B -T1C -Pcheck`。
+ - 通过 Spotless 统一代码风格，执行 `./mvnw spotless:apply -Pcheck` 格式化代码。
  - 确保覆盖率不低于 master 分支。
  - 应尽量将设计精细化拆分；做到小幅度修改，多次数提交，但应保证提交的完整性。
- - 通过 Spotless 统一代码风格，执行 `./mvnw spotless:apply -Pcheck` 格式化代码。
  - 如果您使用 IDEA，可导入推荐的 `src/resources/code-style-idea.xml`。
 
 ## 编码规范
 
  - 使用 linux 换行符。
  - 不应有无意义的空行。请提炼私有方法，代替方法体过长或代码段逻辑闭环而采用的空行间隔。
- - 类、方法和变量的命名要做到顾名思义，类、方法名避免使用缩写，部分变量名可以使用缩写。
-   - 变量名 `arguments` 缩写为 `args`；
-   - 变量名 `parameters` 缩写为 `params`；
-   - 变量名 `environment` 缩写为 `env`；
-   - 变量名 `properties` 缩写为 `props`；
-   - 变量名 `configuration` 缩写为 `config`。
- - 三位以内字符的专有名词缩写使用大写，超过三位字符的缩写采用驼峰形式。
-   - 三位以内字符的类和方法名称缩写的示例：SQL92Lexer、XMLTransfer、MySQLAdminExecutorCreator；
-   - 三位以上字符的类和方法名称缩写的示例：JdbcUrlAppender、YamlAgentConfigurationSwapper；
-   - 变量应使用小驼峰形式：mysqlAuthenticationMethod、sqlStatement、mysqlConfig。
- - 除了直接返回方法入参，返回变量使用 `result` 命名；循环中使用 `each` 命名循环变量；map 中使用 `entry` 代替 `each`。
- - 捕获的异常名称命名为 `ex` ；捕获异常且不做任何事情，异常名称命名为 `ignored`。
- - 配置文件使用 `Spinal Case` 命名（一种使用 `-` 分割单词的特殊 `Snake Case`）。
+ - 命名规范：
+   - 命名要做到顾名思义。
+   - 类、方法名避免使用缩写，部分变量名可以使用缩写。
+     - 变量名 `arguments` 缩写为 `args`；
+     - 变量名 `parameters` 缩写为 `params`；
+     - 变量名 `environment` 缩写为 `env`；
+     - 变量名 `properties` 缩写为 `props`；
+     - 变量名 `configuration` 缩写为 `config`。
+   - 三位以内字符的专有名词缩写使用大写，超过三位字符的缩写采用驼峰形式。
+     - 三位以内字符的类和方法名称缩写的示例：SQL92Lexer、XMLTransfer、MySQLAdminExecutorCreator；
+     - 三位以上字符的类和方法名称缩写的示例：JdbcUrlAppender、YamlAgentConfigurationSwapper；
+     - 变量应使用小驼峰形式：mysqlAuthenticationMethod、sqlStatement、mysqlConfig。
+   - 符合下列条件的局部变量，应参照下列规则命名：
+     - 除了直接返回方法入参，返回变量使用 `result` 命名；
+     - 循环中使用 `each` 命名循环变量；
+     - map 中使用 `entry` 代替 `each`；
+     - 捕获的异常名称命名为 `ex` ；捕获异常且不做任何事情，异常名称命名为 `ignored`。
+   - 工具类名称命名为 `xxUtils`。
+   - 配置文件使用 `Spinal Case` 命名（一种使用 `-` 分割单词的特殊 `Snake Case`）。
  - 需要注释解释的代码尽量提成小方法，用方法名称解释。
  - `equals` 和 `==` 条件表达式中，常量在左，变量在右；大于小于等条件表达式中，变量在左，常量在右。
  - 除了构造器入参与全局变量名称相同的赋值语句外，避免使用 `this` 修饰符。
@@ -55,23 +61,22 @@ chapter = true
  - 优先使用 lombok 代替构造器，getter, setter 方法和 log 变量。
  - 优先考虑使用 `LinkedList`，只有在需要通过下标获取集合中元素值时再使用 `ArrayList`。
  - `ArrayList`，`HashMap` 等可能产生扩容的集合类型必须指定集合初始大小，避免扩容。
- - 日志与注释一律使用英文。
- - 注释只能包含 javadoc，todo 和 fixme。
- - 公开的类和方法必须有 javadoc，对用户的 API 和 SPI 的 javadoc 需要写的清晰全面，其他类和方法以及覆盖自父类的方法无需 javadoc。
  - 优先使用三目运算符代替 if else 的返回和赋值语句。
  - 禁止嵌套使用三目运算符。
  - 条件表达式中，优先使用正向语义，以便于理解代码逻辑。例如：`if (null == param) {} else {}`。
  - 使用具体的 `@SuppressWarnings("xxx")` 代替 `@SuppressWarnings("all")`。
- - 热点方法内应避免使用 Java Stream，除非该场景下使用 Stream 的性能优于普通循环。
- - 工具类名称命名为 `xxUtils`。
  - 合理使用 `@HighFrequencyInvocation` 注解，用于聚焦关键方法性能的优化。
    - 使用 `@HighFrequencyInvocation` 注解的时机：
      - 请求频繁调用的链路，标注其中高频调用的类、方法或构造器，标注范围精确匹配；
      - `canBeCached` 属性为 `true` 时，表示该目标为可复用的缓存资源，例如：数据库连接。
    - 标注 `@HighFrequencyInvocation` 的代码段须严格保证代码性能，以下为标注代码段内的禁止项：
      - 禁止调用 Java Stream API；
-     - 禁止通过 `+` 连接字符串；
+     - 禁止通过 `+` 拼接字符串；
      - 禁止调用 LinkedList 的 `get(int index)` 方法。
+ - 注释 & 日志规范：
+   - 日志与注释一律使用英文。
+   - 注释只能包含 javadoc，todo 和 fixme。
+   - 公开的类和方法必须有 javadoc，对用户的 API 和 SPI 的 javadoc 需要写的清晰全面，其他类和方法以及覆盖自父类的方法无需 javadoc。
 
 ## 单元测试规范
 
diff --git a/docs/community/content/involved/conduct/code.en.md b/docs/community/content/involved/conduct/code.en.md
index 92e165e1b21..c61601ecd37 100644
--- a/docs/community/content/involved/conduct/code.en.md
+++ b/docs/community/content/involved/conduct/code.en.md
@@ -17,28 +17,34 @@ The following code of conduct is based on full compliance with [ASF CODE OF COND
 
  - Conform to `Contributor Covenant Code of Conduct` below.
  - Make sure Maven build process success. Run `./mvnw clean install -B -T1C -Pcheck` command in shell to start Maven build process.
+ - Through the uniform code style of spotless, execute the `./mvnw spotless:apply -Pcheck` formatted code.
  - Make sure the test coverage rate is not lower than the master branch.
  - Careful consideration for each `pull request`; Small and frequent `pull request` with complete unit function is welcomed.
- - Through the uniform code style of spotless, execute the `./mvnw spotless:apply -Pcheck` formatted code.
  - If using IDEA, you can import the recommended `src/resources/code-style-idea.xml`.
 
 ## Contributor Covenant Code of Conduct
 
  - Use linux line separators.
  - No meaningless blank lines. Please extract private methods to instead of blank lines if too long method body or different logic code fragments.
- - Use meaningful class, method and variable names, class and method name avoid to use abbreviation. Some variables could use abbreviation.
-   - Variable `arguments` could abbreviate to `args`;
-   - Variable `parameters` could abbreviate to `params`;
-   - Variable `environment` could abbreviate to `env`;
-   - Variable `properties` could abbreviate to `props`;
-   - Variable `configuration` could abbreviate to `config`.
- - Abbreviation composed less than 3 characters should be uppercase, more than 3 characters must use camel case naming rule.
-   - Example for abbreviation composed less than 3 characters: SQL92Lexer, XMLTransfer, MySQLAdminExecutorCreator;
-   - Example for abbreviation composed more than 3 characters: JdbcUrlAppender, YamlAgentConfigurationSwapper;
-   - A variable composed of abbreviation should use lower camel case: mysqlAuthenticationMethod, sqlStatement, mysqlConfig.
- - Except return an input parameter as result, returning variable should be named with `result`; Variables in the loop structure are named with `each`; Replace `each` with `entry` in map.
- - Exceptions when catch are named with `ex`; Exceptions when catch but do nothing are named with `ignored`.
- - Name property files with `Spinal Case`(a variant of `Snake Case` which uses hyphens `-` to separate words).
+ - Naming covenant:
+   - Use meaningful names.
+   - Avoid to use abbreviation. Some variables could use abbreviation.
+     - Variable `arguments` could abbreviate to `args`;
+     - Variable `parameters` could abbreviate to `params`;
+     - Variable `environment` could abbreviate to `env`;
+     - Variable `properties` could abbreviate to `props`;
+     - Variable `configuration` could abbreviate to `config`.
+   - Abbreviation composed less than 3 characters should be uppercase, more than 3 characters must use camel case naming rule.
+     - Example for abbreviation composed less than 3 characters: SQL92Lexer, XMLTransfer, MySQLAdminExecutorCreator;
+     - Example for abbreviation composed more than 3 characters: JdbcUrlAppender, YamlAgentConfigurationSwapper;
+     - A variable composed of abbreviation should use lower camel case: mysqlAuthenticationMethod, sqlStatement, mysqlConfig.
+   - Local variables that meet the following conditions shall be named according to the following rules:
+     - Except return an input parameter as result, returning variable should be named with `result`;
+     - Variables in the loop structure are named with `each`;
+     - Replace `each` with `entry` in map;
+     - Exceptions when catch are named with `ex`; Exceptions when catch but do nothing are named with `ignored`.
+   - Utility class should be named in the form of `xxUtils`.
+   - Name property files with `Spinal Case`(a variant of `Snake Case` which uses hyphens `-` to separate words).
  - Split codes that need to add notes with it into small methods, which are explained with method names.
  - Have constants on the left and variable on the right in `=` and `equals` conditional expressions; Have variable on the left and constants on the right in `greater than` and `less than` conditional expressions.
  - Beside using same names as input parameters and global fields in assign statement, avoid using `this` modifier.
@@ -52,15 +58,10 @@ The following code of conduct is based on full compliance with [ASF CODE OF COND
  - Replace constructors, getters, setter methods and log variable with lombok in priority.
  - Use `LinkedList`  in priority. Use `ArrayList` for use index to get element only.
  - Use capacity based `Collection` such as `ArrayList`, `HashMap` must indicate initial capacity to avoid recalculate capacity.
- - Use English in all the logs and javadoc.
- - Include Javadoc, todo and fixme only in the comments.
- - Only `public` classes and methods need javadoc, the Javadoc for the user API and SPI needs to be written clearly and comprehensively, other methods, classes and override methods do not need javadoc.
  - Replace if else return and assign statement with ternary operator in priority.
  - Nested using ternary operator is forbidden.
  - Use forward semantics in priority for better understanding code logic in conditional expressions. For example: `if (null == param) {} else {}`.
  - Use concentrate `@SuppressWarnings("xxx")` instead of `@SuppressWarnings("all")`.
- - Avoid using Java Stream in hot methods, unless the performance of using Stream is better than using loop in that situation.
- - Utility class should be named in the form of `xxUtils`.
  - Reasonably use the @HighFrequencyInvocation annotation to focus on optimizing the performance of critical methods.
    - Occasions for using the @HighFrequencyInvocation annotation:
      - In frequently invoked requests, add annotation to classes, methods, or constructors with high frequency calls; precise matching within the scope of annotation;
@@ -69,6 +70,10 @@ The following code of conduct is based on full compliance with [ASF CODE OF COND
      - It is prohibited to call Java Stream API;
      - It is prohibited to concat String using "+";
      - It is prohibited to call LinkedList's get(int index) method.
+ - Comments & Logs covenant:
+   - Use English in all the logs and javadoc.
+   - Include Javadoc, todo and fixme only in the comments.
+   - Only `public` classes and methods need javadoc, the Javadoc for the user API and SPI needs to be written clearly and comprehensively, other methods, classes and override methods do not need javadoc.
 
 ## Contributor Covenant Unit Test of Conduct
 
