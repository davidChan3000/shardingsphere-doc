commit 7610bb7e6612c6edabb03c1b3d3e09e456b09b79
Author: Zhengqiang Duan <duanzhengqiang@apache.org>
Date:   Fri Jul 14 14:13:39 2023 +0800

    Remove document in ShardingSphere plugin module (#27193)

diff --git a/docs/document/content/dev-manual/encrypt.cn.md b/docs/document/content/dev-manual/encrypt.cn.md
index 50ba702edb5..425c3cd2ddd 100644
--- a/docs/document/content/dev-manual/encrypt.cn.md
+++ b/docs/document/content/dev-manual/encrypt.cn.md
@@ -21,7 +21,5 @@ chapter = true
 |------------------|--------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 | AES              | 基于 AES 的数据加密算法     | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.AESEncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/standard/AESEncryptAlgorithm.java)                 |
 | RC4              | 基于 RC4 的数据加密算法     | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.RC4EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/standard/RC4EncryptAlgorithm.java)                 |
-| SM3              | 基于 SM3 的数据加密算法     | [`org.apache.shardingsphere.encrypt.sm.algorithm.SM3EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/plugin/sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM3EncryptAlgorithm.java)                      |
-| SM4              | 基于 SM4 的数据加密算法     | [`org.apache.shardingsphere.encrypt.sm.algorithm.SM4EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/plugin/sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM4EncryptAlgorithm.java)                      |
 | CHAR_DIGEST_LIKE | 用于模糊查询的数据加密算法      | [`org.apache.shardingsphere.encrypt.algorithm.like.CharDigestLikeEncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/like/CharDigestLikeEncryptAlgorithm.java) |
 | MD5              | 基于 MD5 的辅助查询加密算法 | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.MD5EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/assisted/MD5AssistedEncryptAlgorithm.java)                 |
diff --git a/docs/document/content/dev-manual/encrypt.en.md b/docs/document/content/dev-manual/encrypt.en.md
index 3b439bb2474..a86a10c37c9 100644
--- a/docs/document/content/dev-manual/encrypt.en.md
+++ b/docs/document/content/dev-manual/encrypt.en.md
@@ -21,7 +21,5 @@ Data encrypt algorithm definition
 |----------------------|---------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 | AES                  | AES data encrypt algorithm                  | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.AESEncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/standard/AESEncryptAlgorithm.java)                 |
 | RC4                  | RC4 data encrypt algorithm                  | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.RC4EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/standard/RC4EncryptAlgorithm.java)                 |
-| SM3                  | SM3 data encrypt algorithm                  | [`org.apache.shardingsphere.encrypt.sm.algorithm.SM3EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/plugin/sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM3EncryptAlgorithm.java)                      |
-| SM4                  | SM4 data encrypt algorithm                  | [`org.apache.shardingsphere.encrypt.sm.algorithm.SM4EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/plugin/sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM4EncryptAlgorithm.java)                      |
 | CHAR_DIGEST_LIKE     | Data encryption algorithms for like queries | [`org.apache.shardingsphere.encrypt.algorithm.like.CharDigestLikeEncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/like/CharDigestLikeEncryptAlgorithm.java) |
 | MD5                  | MD5 assisted query encrypt algorithm        | [`org.apache.shardingsphere.encrypt.algorithm.encrypt.MD5EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/encrypt/core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/assisted/MD5AssistedEncryptAlgorithm.java)                 |
diff --git a/docs/document/content/dev-manual/sharding.cn.md b/docs/document/content/dev-manual/sharding.cn.md
index 4bf689f666a..c87711cc103 100644
--- a/docs/document/content/dev-manual/sharding.cn.md
+++ b/docs/document/content/dev-manual/sharding.cn.md
@@ -29,9 +29,6 @@ chapter = true
 | INLINE                   | N        | 基于行表达式的分片算法               | [`org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java)                                                         |
 | COMPLEX_INLINE           | N        | 基于行表达式的复合分片算法             | [`org.apache.shardingsphere.sharding.algorithm.sharding.complex.ComplexInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/ComplexInlineShardingAlgorithm.java)                                          |
 | HINT_INLINE              | N        | 基于行表达式的 Hint 分片算法         | [`org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/hint/HintInlineShardingAlgorithm.java)                                                     |
-| COSID_MOD                | N        | 基于 CosId 的取模分片算法          | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.mod.CosIdModShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/mod/CosIdModShardingAlgorithm.java)                                       |
-| COSID_INTERVAL           | N        | 基于 CosId 的固定时间范围的分片算法     | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdIntervalShardingAlgorithm.java)                   |
-| COSID_INTERVAL_SNOWFLAKE | N        | 基于 CosId 的雪花ID固定时间范围的分片算法 | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdSnowflakeIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdSnowflakeIntervalShardingAlgorithm.java) |
 
 ## KeyGenerateAlgorithm
 
@@ -49,9 +46,6 @@ chapter = true
 |-----------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 | SNOWFLAKE       | 基于雪花算法的分布式主键生成算法        | [`org.apache.shardingsphere.sharding.algorithm.keygen.SnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/SnowflakeKeyGenerateAlgorithm.java)                               |
 | UUID            | 基于 UUID 的分布式主键生成算法      | [`org.apache.shardingsphere.sharding.algorithm.keygen.UUIDKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/UUIDKeyGenerateAlgorithm.java)                                         |
-| NANOID          | 基于 NanoId 的分布式主键生成算法    | [`org.apache.shardingsphere.sharding.nanoid.algorithm.keygen.NanoIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/nanoid/src/main/java/org/apache/shardingsphere/sharding/nanoid/algorithm/keygen/NanoIdKeyGenerateAlgorithm.java)              |
-| COSID           | 基于 CosId 的分布式主键生成算法     | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdKeyGenerateAlgorithm.java)                   |
-| COSID_SNOWFLAKE | 基于 CosId 的雪花算法分布式主键生成算法 | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdSnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdSnowflakeKeyGenerateAlgorithm.java) |
 
 ## ShardingAuditAlgorithm
 
diff --git a/docs/document/content/dev-manual/sharding.en.md b/docs/document/content/dev-manual/sharding.en.md
index a6b65381d13..87f629e2283 100644
--- a/docs/document/content/dev-manual/sharding.en.md
+++ b/docs/document/content/dev-manual/sharding.en.md
@@ -29,9 +29,6 @@ Sharding Algorithm definition
 | INLINE                   | N                    | Inline sharding algorithm                                               | [`org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java)                                                         |
 | COMPLEX_INLINE           | N                    | Complex inline sharding algorithm                                       | [`org.apache.shardingsphere.sharding.algorithm.sharding.complex.ComplexInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/ComplexInlineShardingAlgorithm.java)                                          |
 | HINT_INLINE              | N                    | Hint inline sharding algorithm                                          | [`org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/hint/HintInlineShardingAlgorithm.java)                                                     |
-| COSID_MOD                | N                    | Modulo sharding algorithm provided by CosId                             | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.mod.CosIdModShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/mod/CosIdModShardingAlgorithm.java)                                       |
-| COSID_INTERVAL           | N                    | Fixed interval sharding algorithm provided by CosId                     | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdIntervalShardingAlgorithm.java)                   |
-| COSID_INTERVAL_SNOWFLAKE | N                    | Snowflake key-based fixed interval sharding algorithm provided by CosId | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdSnowflakeIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdSnowflakeIntervalShardingAlgorithm.java) |
 
 ## KeyGenerateAlgorithm
 
@@ -49,9 +46,6 @@ Distributed Key Generating Algorithm definition
 |----------------------|----------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 | SNOWFLAKE            | Snowflake key generate algorithm                   | [`org.apache.shardingsphere.sharding.algorithm.keygen.SnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/SnowflakeKeyGenerateAlgorithm.java)                               |
 | UUID                 | UUID key generate algorithm                        | [`org.apache.shardingsphere.sharding.algorithm.keygen.UUIDKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/UUIDKeyGenerateAlgorithm.java)                                         |
-| NANOID               | NanoId key generate algorithm                      | [`org.apache.shardingsphere.sharding.nanoid.algorithm.keygen.NanoIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/nanoid/src/main/java/org/apache/shardingsphere/sharding/nanoid/algorithm/keygen/NanoIdKeyGenerateAlgorithm.java)              |
-| COSID                | CosId key generate algorithm                       | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdKeyGenerateAlgorithm.java)                   |
-| COSID_SNOWFLAKE      | Snowflake key generate algorithm provided by CosId | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdSnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/features/sharding/plugin/cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdSnowflakeKeyGenerateAlgorithm.java) |
 
 ## ShardingAuditAlgorithm
 
diff --git a/docs/document/content/reference/encrypt/_index.cn.md b/docs/document/content/reference/encrypt/_index.cn.md
index 7becc262dd3..8f3c5b751c2 100644
--- a/docs/document/content/reference/encrypt/_index.cn.md
+++ b/docs/document/content/reference/encrypt/_index.cn.md
@@ -26,7 +26,7 @@ Apache ShardingSphere 会将用户请求的明文进行加密后存储到底层
 
 **数据源配置**：指数据源配置。
 
-**加密算法配置**：指使用什么加密算法进行加解密。目前 ShardingSphere 内置了五种加解密算法：AES，MD5，RC4，SM3 和 SM4。用户还可以通过实现 ShardingSphere 提供的接口，自行实现一套加解密算法。
+**加密算法配置**：指使用什么加密算法进行加解密。目前 ShardingSphere 内置了三种加解密算法：AES，MD5 和 RC4。用户还可以通过实现 ShardingSphere 提供的接口，自行实现一套加解密算法。
 
 **加密表配置**：用于告诉 ShardingSphere 数据表里哪个列用于存储密文数据（cipherColumn）、使用什么算法加解密（encryptorName）、哪个列用于存储辅助查询数据（assistedQueryColumn）、使用什么算法加解密（assistedQueryEncryptorName）以及用户想使用哪个列进行 SQL 编写（logicColumn）。
 
@@ -110,4 +110,4 @@ Apache ShardingSphere 提供了加密算法用于数据加密，即 `EncryptAlgo
 在用户进行 `INSERT`，`DELETE`，`UPDATE` 时，ShardingSphere会按照用户配置，对SQL进行解析、改写、路由，并调用 `encrypt()` 将数据加密后存储到数据库， 
 而在 `SELECT` 时，则调用 `decrypt()` 方法将从数据库中取出的加密数据进行逆向解密，最终将原始数据返回给用户。
 
-当前，Apache ShardingSphere 针对这种类型的加密解决方案提供了五种具体实现类，分别是 MD5（不可逆），AES（可逆），RC4（可逆），SM3（不可逆），SM4（可逆），用户只需配置即可使用这五种内置的方案。
+当前，Apache ShardingSphere 针对这种类型的加密解决方案提供了三种具体实现类，分别是 MD5（不可逆），AES（可逆），RC4（可逆），用户只需配置即可使用这三种内置的方案。
diff --git a/docs/document/content/reference/encrypt/_index.en.md b/docs/document/content/reference/encrypt/_index.en.md
index 14fa3c850f3..cc89a39e082 100644
--- a/docs/document/content/reference/encrypt/_index.en.md
+++ b/docs/document/content/reference/encrypt/_index.en.md
@@ -24,7 +24,7 @@ Before explaining the whole process, we need to understand the encryption rules
 
 Data source configuration: the configuration of the data source.
 
-Encryptor configuration: refers to the encryption algorithm used for encryption and decryption. Currently, ShardingSphere has five built-in encryption and decryption algorithms: AES, MD5, RC4, SM3, and SM4. Users can also implement a set of encryption and decryption algorithms by implementing the interfaces provided by ShardingSphere.
+Encryptor configuration: refers to the encryption algorithm used for encryption and decryption. Currently, ShardingSphere has three built-in encryption and decryption algorithms: AES, MD5 and RC4. Users can also implement a set of encryption and decryption algorithms by implementing the interfaces provided by ShardingSphere.
 
 Encryption table configuration: it is used to tell ShardingSphere which column in the data table is used to store ciphertext data (`cipherColumn`), and which column the user would like to use for SQL writing (`logicColumn`).
 
@@ -107,4 +107,4 @@ When users perform `INSERT`, `DELETE` and `UPDATE` operations, ShardingSphere wi
 
 It will also use `encrypt()` to encrypt data and store them in the database. When using SELECT, they will decrypt sensitive data from the database with `decrypt()` and finally return the original data to users.
 
-Currently, Apache ShardingSphere provides five types of implementations for this kind of encryption solution, including MD5 (irreversible), AES (reversible), RC4 (reversible), SM3 (irreversible) and SM4 (reversible), which can be used after configuration.
+Currently, Apache ShardingSphere provides three types of implementations for this kind of encryption solution, including MD5 (irreversible), AES (reversible) and RC4 (reversible), which can be used after configuration.
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.cn.md b/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.cn.md
index a69fafd2aa4..62931407f69 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.cn.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.cn.md
@@ -32,29 +32,6 @@ weight = 5
 |---------------|--------|-------------|
 | rc4-key-value | String | RC4 使用的 KEY |
 
-#### SM3 加密算法
-
-类型：SM3
-
-可配置属性：
-
-| *名称*     | *数据类型* | *说明*                     |
-|----------|--------|--------------------------|
-| sm3-salt | String | SM3 使用的 SALT（空或 8 Bytes） |
-
-#### SM4 加密算法
-
-类型：SM4
-
-可配置属性：
-
-| *名称*        | *数据类型* | *说明*                                                         |
-|-------------|--------|--------------------------------------------------------------|
-| sm4-key     | String | SM4 使用的 KEY （16 Bytes）                                       |
-| sm4-mode    | String | SM4 使用的 MODE （CBC 或 ECB）                                     |
-| sm4-iv      | String | SM4 使用的 IV （MODE 为 CBC 时需指定，16 Bytes）                        |
-| sm4-padding | String | SM4 使用的 PADDING （PKCS5Padding 或 PKCS7Padding，暂不支持 NoPadding） |
-
 ### 模糊加密算法
 
 #### 单字符摘要模糊加密算法
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.en.md b/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.en.md
index 7a03d111c06..58cad71e6f7 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.en.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/encrypt.en.md
@@ -32,29 +32,6 @@ Attributes:
 |---------------|------------|---------------|
 | rc4-key-value | String     | RC4 KEY       |
 
-#### SM3 Encrypt Algorithm
-
-Type: SM3
-
-Attributes:
-
-| *Name*   | *DataType* | *Description*                              |
-|----------|------------|--------------------------------------------|
-| sm3-salt | String     | SM3 SALT (should be blank or 8 bytes long) |
-
-#### SM4 Encrypt Algorithm
-
-Type: SM4
-
-Attributes:
-
-| *Name*      | *DataType* | *Description*                                                            |
-|-------------|------------|--------------------------------------------------------------------------|
-| sm4-key     | String     | SM4 KEY (should be 16 bytes)                                             |
-| sm4-mode    | String     | SM4 MODE (should be CBC or ECB)                                          |
-| sm4-iv      | String     | SM4 IV (should be specified on CBC, 16 bytes long)                       |
-| sm4-padding | String     | SM4 PADDING (should be PKCS5Padding or PKCS7Padding, NoPadding excepted) |
-
 ### Like Encrypt Algorithm
 
 #### CharDigestLike Encrypt Algorithm
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.cn.md b/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.cn.md
index 6ea33786630..2e44efa2c80 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.cn.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.cn.md
@@ -27,40 +27,12 @@ weight = 3
 1. 在单机模式下支持用户自定义配置，如果用户不配置使用默认值为0。
 2. 在集群模式下会由系统自动生成，相同的命名空间下不会生成重复的值。
 
-### NanoID
-
-类型：NANOID
-
-可配置属性： 无
-
 ### UUID
 
 类型：UUID
 
 可配置属性：无
 
-### CosId
-
-类型: COSID
-
-可配置属性：
-
-| *属性名称*    | *数据类型* | *说明*                                                                                         | *默认值*       |
-|-----------|--------|----------------------------------------------------------------------------------------------|-------------|
-| id-name   | String | ID 生成器名称                                                                                     | `__share__` |
-| as-string | bool   | 是否生成字符串类型ID: 将 `long` 类型 ID 转换成 62 进制 `String` 类型（`Long.MAX_VALUE` 最大字符串长度11位），并保证字符串 ID 有序性 | `false`     |
-
-### CosId-Snowflake
-
-类型: COSID_SNOWFLAKE
-
-可配置属性：
-
-| *属性名称*    | *数据类型* | *说明*                                                                                         | *默认值*           |
-|-----------|--------|----------------------------------------------------------------------------------------------|-----------------|
-| epoch     | String | 雪花 ID 算法的 EPOCH                                                                              | `1477929600000` |
-| as-string | bool   | 是否生成字符串类型ID: 将 `long` 类型 ID 转换成 62 进制 `String` 类型（`Long.MAX_VALUE` 最大字符串长度11位），并保证字符串 ID 有序性 | `false`         |
-
 ## 操作步骤
 
 1. 配置数据分片规则时为列配置分布式主键生成策略
@@ -74,18 +46,10 @@ keyGenerators:
     type: SNOWFLAKE
 ```
 
-- NanoID
-
-```yaml
-keyGenerators:
-  nanoid:
-    type: NANOID
-```
-
 - UUID
 
 ```yaml
 keyGenerators:
-  nanoid:
+  uuid:
     type: UUID
 ```
\ No newline at end of file
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.en.md b/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.en.md
index fee070a25e1..4913ad026ed 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.en.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/keygen.en.md
@@ -33,40 +33,12 @@ Attributes:
 1. In standalone mode, support user-defined configuration, if the user does not configure the default value of 0.
 2. In cluster mode, it will be automatically generated by the system, and duplicate values will not be generated in the same namespace.
 
-### Nano ID
-
-Type:NANOID
-
-Configurable Property:none
-
 ### UUID
 
 Type: UUID
 
 Attributes: None
 
-### CosId
-
-Type: COSID
-
-Attributes：
-
-| *Name*    | *DataType* | *Description*                                                                                                                                                                      | *Default Value* |
-|-----------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
-| id-name   | String     | ID generator name                                                                                                                                                                  | `__share__`     |
-| as-string | bool       | Whether to generate a string type ID: Convert `long` type ID to Base-62 `String` type (`Long.MAX_VALUE` maximum string length is 11 digits), and ensure the ordering of string IDs | `false`         |
-
-### CosId-Snowflake
-
-Type: COSID_SNOWFLAKE
-
-Attributes：
-
-| *Name*    | *DataType* | *Description*                                                                                                                                                                      | *Default Value* |
-|-----------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
-| epoch     | String     | EPOCH of Snowflake ID Algorithm                                                                                                                                                    | `1477929600000` |
-| as-string | bool       | Whether to generate a string type ID: Convert `long` type ID to Base-62 `String` type (`Long.MAX_VALUE` maximum string length is 11 digits), and ensure the ordering of string IDs | `false`         |
-
 ## Procedure
 
 1. Policy of distributed primary key configurations is for columns when configuring data sharding rules.
@@ -81,19 +53,10 @@ keyGenerators:
     type: SNOWFLAKE
 ```
 
-- NanoID
-
-```PlainText
-keyGenerators:
-  nanoid:
-    type: NANOID
-```
-
 - UUID
 
 ```PlainText
 keyGenerators:
-  nanoid:
+  uuid:
     type: UUID
-
 ```
\ No newline at end of file
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
index 21ee4e5c5cd..ba4a751c8ad 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
@@ -105,60 +105,6 @@ Apache ShardingSphere 内置的标准分片算法实现类包括：
 | datetime-interval-amount (?) | int    | 分片键时间间隔，超过该时间间隔将进入下一分片                                                                                                                     | 1     |
 | datetime-interval-unit (?)   | String | 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS                                                                                              | DAYS  |
 
-#### 基于 CosId 的固定时间范围的分片算法
-
-基于 `me.ahoo.cosid:cosid-core` 的工具类实现的固定时间范围的分片算法。
-当分片键为 JSR-310 的所含类或与时间相关的类，将转换为`java.time.LocalDateTime`后再做下一步分片。
-参考 https://github.com/apache/shardingsphere/issues/14047 的讨论。
-
-类型：COSID_INTERVAL
-
-可配置属性：
-
-| *属性名称*                   | *数据类型* | *说明*                                                                                       | *默认值* |
-|--------------------------|--------|--------------------------------------------------------------------------------------------|-------|
-| zone-id                  | String | 时区，必须遵循 `java.time.ZoneId` 的所含值。 例如：Asia/Shanghai                                          |       |
-| logic-name-prefix        | String | 分片数据源或真实表的前缀格式                                                                             |       |
-| datetime-lower           | String | 时间分片下界值，格式与 `yyyy-MM-dd HH:mm:ss` 的时间戳格式一致                                                 |       |
-| datetime-upper           | String | 时间分片上界值，格式与 `yyyy-MM-dd HH:mm:ss` 的时间戳格式一致                                                 |       |
-| sharding-suffix-pattern  | String | 分片数据源或真实表的后缀格式，必须遵循 Java DateTimeFormatter 的格式，必须和 `datetime-interval-unit` 保持一致。例如：yyyyMM |       |
-| datetime-interval-unit   | String | 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS                                              |       |
-| datetime-interval-amount | int    | 分片键时间间隔，超过该时间间隔将进入下一分片                                                                     |       |
-
-#### 基于 CosId 的雪花ID固定时间范围的分片算法
-
-基于 `me.ahoo.cosid:cosid-core` 的工具类实现的雪花ID固定时间范围的分片算法。
-当分片键为 JSR-310 的所含类或与时间相关的类，将转换为`java.time.LocalDateTime`后再做下一步分片。
-参考 https://github.com/apache/shardingsphere/issues/14047 的讨论。
-
-类型：COSID_INTERVAL_SNOWFLAKE
-
-可配置属性：
-
-| *属性名称*                   | *数据类型* | *说明*                                                                                       | *默认值* |
-|--------------------------|--------|--------------------------------------------------------------------------------------------|-------|
-| zone-id                  | String | 时区，必须遵循 `java.time.ZoneId` 的所含值。 例如：Asia/Shanghai                                          |       |
-| logic-name-prefix        | String | 分片数据源或真实表的前缀格式                                                                             |       |
-| datetime-lower           | String | 时间分片下界值，格式与 `yyyy-MM-dd HH:mm:ss` 的时间戳格式一致                                                 |       |
-| datetime-upper           | String | 时间分片上界值，格式与 `yyyy-MM-dd HH:mm:ss` 的时间戳格式一致                                                 |       |
-| sharding-suffix-pattern  | String | 分片数据源或真实表的后缀格式，必须遵循 Java DateTimeFormatter 的格式，必须和 `datetime-interval-unit` 保持一致。例如：yyyyMM |       |
-| datetime-interval-unit   | String | 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS                                              |       |
-| datetime-interval-amount | int    | 分片键时间间隔，超过该时间间隔将进入下一分片                                                                     |       |
-
-#### 基于 CosId 的取模分片算法
-
-基于 `me.ahoo.cosid:cosid-core` 的工具类实现的取模分片算法。
-参考 https://github.com/apache/shardingsphere/issues/14047 的讨论。
-
-类型：COSID_MOD
-
-可配置属性：
-
-| *属性名称*            | *数据类型* | *说明*           |
-|-------------------|--------|----------------|
-| mod               | int    | 分片数量           |
-| logic-name-prefix | String | 分片数据源或真实表的前缀格式 |
-
 ### 复合分片算法
 
 #### 复合行表达式分片算法
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
index e1c8901fa81..7ba7d66d793 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
@@ -108,60 +108,6 @@ Attributes:
 | datetime-interval-amount (?) | int        | Interval of sharding value, after which the next shard will be entered                                                                                                                                                        | 1               |
 | datetime-interval-unit (?)   | String     | Unit of sharding value interval, must can be transformed to Java ChronoUnit's Enum value. For example: MONTHS                                                                                                                 | DAYS            |
 
-#### Fixed interval sharding algorithm provided by CosId
-
-A fixed time range sharding algorithm implemented by the tool class based on `me.ahoo.cosid:cosid-core`.
-When the sharding key is a JSR-310 containing class or a time-related class, it will be converted to `java.time.LocalDateTime` before the next sharding.
-See the discussion at https://github.com/apache/shardingsphere/issues/14047.
-
-Type：COSID_INTERVAL
-
-Attributes：
-
-| *Name*                   | *DataType* | *Description*                                                                                                                                                           | *Default Value* |
-|--------------------------|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
-| zone-id                  | String     | Time zone, which must follow the contained value of `java.time.ZoneId`. For example: Asia/Shanghai                                                                      |                 |
-| logic-name-prefix        | String     | Prefix pattern of sharding data sources or tables                                                                                                                       |                 |
-| datetime-lower           | String     | Datetime sharding lower boundary, pattern is consistent with the timestamp format of `yyyy-MM-dd HH:mm:ss`                                                              |                 |
-| datetime-upper           | String     | Datetime sharding upper boundary, pattern is consistent with the timestamp format of `yyyy-MM-dd HH:mm:ss`                                                              |                 |
-| sharding-suffix-pattern  | String     | Suffix pattern of sharding data sources or tables, must can be transformed to Java LocalDateTime, must be consistent with `datetime-interval-unit`. For example: yyyyMM |                 |
-| datetime-interval-unit   | String     | Unit of sharding value interval, must can be transformed to Java ChronoUnit's Enum value. For example: MONTHS                                                           |                 |
-| datetime-interval-amount | int        | Interval of sharding value, after which the next shard will be entered                                                                                                  |
-
-#### Snowflake key-based fixed interval sharding algorithm provided by CosId
-
-Snowflake ID sharding algorithm with fixed time range implemented by tool class based on `me.ahoo.cosid:cosid-core`.
-When the sharding key is a JSR-310 containing class or a time-related class, it will be converted to `java.time.LocalDateTime` before the next sharding.
-See the discussion at https://github.com/apache/shardingsphere/issues/14047.
-
-Type：COSID_INTERVAL_SNOWFLAKE
-
-Attributes：
-
-| *Name*                   | *DataType* | *Description*                                                                                                                                                           | *Default Value* |
-|--------------------------|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
-| zone-id                  | String     | Time zone, which must follow the contained value of `java.time.ZoneId`. For example: Asia/Shanghai                                                                      |                 |
-| logic-name-prefix        | String     | Prefix pattern of sharding data sources or tables                                                                                                                       |                 |
-| datetime-lower           | String     | Datetime sharding lower boundary, pattern is consistent with the timestamp format of `yyyy-MM-dd HH:mm:ss`                                                              |                 |
-| datetime-upper           | String     | Datetime sharding upper boundary, pattern is consistent with the timestamp format of `yyyy-MM-dd HH:mm:ss`                                                              |                 |
-| sharding-suffix-pattern  | String     | Suffix pattern of sharding data sources or tables, must can be transformed to Java LocalDateTime, must be consistent with `datetime-interval-unit`. For example: yyyyMM |                 |
-| datetime-interval-unit   | String     | Unit of sharding value interval, must can be transformed to Java ChronoUnit's Enum value. For example: MONTHS                                                           |                 |
-| datetime-interval-amount | int        | Interval of sharding value, after which the next shard will be entered                                                                                                  |
-
-#### Modulo sharding algorithm provided by CosId
-
-Modulo sharding algorithm implemented by the tool class based on `me.ahoo.cosid:cosid-core`.
-See the discussion at https://github.com/apache/shardingsphere/issues/14047 .
-
-Type: COSID_MOD
-
-Attributes:
-
-| *Name*            | *DataType* | *Description*                                     |
-|-------------------|------------|---------------------------------------------------|
-| mod               | int        | Sharding count                                    |
-| logic-name-prefix | String     | Prefix pattern of sharding data sources or tables |
-
 ### Complex Sharding Algorithm
 
 #### Complex Inline Sharding Algorithm
