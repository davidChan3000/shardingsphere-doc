commit b2a6a70b8870df681de2c7fd0809da7dee96afa7
Author: Liang Zhang <zhangliang@apache.org>
Date:   Sat Oct 14 22:36:50 2023 +0800

    Remove elasticjob cloud (#2288)
    
    * Refactor pom for dependency
    
    * Remove elasticjob cloud
    
    * Rename elastic-job-lite module to elastic-job-engine
    
    * Rename elasticjob.lite package to elasticjob.engine
    
    * Remove JobStatusTraceEvent.Source
    
    * Remove JobStatusTraceEvent.Source
    
    * Fix docs

diff --git a/docs/content/dev-manual/roadmap.cn.md b/docs/content/dev-manual/roadmap.cn.md
index 21b0fcad4..6b1c2d60f 100644
--- a/docs/content/dev-manual/roadmap.cn.md
+++ b/docs/content/dev-manual/roadmap.cn.md
@@ -5,8 +5,6 @@ weight = 5
 chapter = true
 +++
 
-## Kernel
-
 - [x] Unified Job Config API
     - [x] Core Config
     - [x] Type Config
@@ -22,9 +20,6 @@ chapter = true
     - [ ] Other Event Listener
 - [ ] Unified Schedule API
 - [ ] Unified Resource API
-
-## ElasticJob-Lite
-
 - [x] Distributed Features
     - [x] High Availability
     - [x] Elastic scale in/out
@@ -49,49 +44,3 @@ chapter = true
     - [x] Namespace
     - [x] Bean Injection
     - [x] Spring Boot Starter（3.0.0-alpha 提供）
-
-## ElasticJob-Cloud
-- [x] Transient Job
-    - [x] High Availability
-    - [x] Elastic scale in/out
-    - [x] Failover
-    - [x] Misfire
-    - [x] Idempotency
-- [x] Daemon Job
-    - [x] High Availability
-    - [x] Elastic scale in/out
-    - [ ] Failover
-    - [ ] Misfire
-    - [x] Idempotency
-- [x] Mesos Scheduler
-    - [x] High Availability
-    - [x] Reconcile
-    - [ ] Redis Based Queue Improvement
-    - [ ] Http Driver
-- [x] Mesos Executor
-    - [x] Executor Reuse Pool
-    - [ ] Progress Reporting
-    - [ ] Health Detection
-    - [ ] Log Redirect
-- [x] Lifecycle Management
-    - [x] Job Add/Remove
-    - [ ] Job Pause/Resume
-    - [x] Job Disable/Enable
-    - [ ] Job Shutdown
-    - [x] App Add/Remove
-    - [x] App Disable/Enable
-    - [x] Restful API
-    - [x] Web Console
-- [ ] Job Dependency
-    - [ ] Listener
-    - [ ] Workflow
-    - [ ] DAG
-- [x] Job Distribution
-    - [x] Mesos Based Distribution
-    - [ ] Docker Based Distribution
-- [x] Resources Management
-    - [x] Resources Allocate
-    - [ ] Cross Data Center
-    - [ ] A/B Test
-- [x] Spring Integrate
-    - [x] Bean Injection
diff --git a/docs/content/dev-manual/roadmap.en.md b/docs/content/dev-manual/roadmap.en.md
index 3cc304b44..ebc983293 100644
--- a/docs/content/dev-manual/roadmap.en.md
+++ b/docs/content/dev-manual/roadmap.en.md
@@ -5,8 +5,6 @@ weight = 5
 chapter = true
 +++
 
-## Kernel
-
 - [x] Unified Job Config API
     - [x] Core Config
     - [x] Type Config
@@ -22,9 +20,6 @@ chapter = true
     - [ ] Other Event Listener
 - [ ] Unified Schedule API
 - [ ] Unified Resource API
-
-## ElasticJob-Lite
-
 - [x] Distributed Features
     - [x] High Availability
     - [x] Elastic scale in/out
@@ -49,49 +44,3 @@ chapter = true
     - [x] Namespace
     - [x] Bean Injection
     - [x] Spring Boot Starter (Since 3.0.0-alpha)
-
-## ElasticJob-Cloud
-- [x] Transient Job
-    - [x] High Availability
-    - [x] Elastic scale in/out
-    - [x] Failover
-    - [x] Misfire
-    - [x] Idempotency
-- [x] Daemon Job
-    - [x] High Availability
-    - [x] Elastic scale in/out
-    - [ ] Failover
-    - [ ] Misfire
-    - [x] Idempotency
-- [x] Mesos Scheduler
-    - [x] High Availability
-    - [x] Reconcile
-    - [ ] Redis Based Queue Improvement
-    - [ ] Http Driver
-- [x] Mesos Executor
-    - [x] Executor Reuse Pool
-    - [ ] Progress Reporting
-    - [ ] Health Detection
-    - [ ] Log Redirect
-- [x] Lifecycle Management
-    - [x] Job Add/Remove
-    - [ ] Job Pause/Resume
-    - [x] Job Disable/Enable
-    - [ ] Job Shutdown
-    - [x] App Add/Remove
-    - [x] App Disable/Enable
-    - [x] Restful API
-    - [x] Web Console
-- [ ] Job Dependency
-    - [ ] Listener
-    - [ ] Workflow
-    - [ ] DAG
-- [x] Job Distribution
-    - [x] Mesos Based Distribution
-    - [ ] Docker Based Distribution
-- [x] Resources Management
-    - [x] Resources Allocate
-    - [ ] Cross Data Center
-    - [ ] A/B Test
-- [x] Spring Integrate
-    - [x] Bean Injection
diff --git a/docs/content/downloads/_index.cn.md b/docs/content/downloads/_index.cn.md
index 776de91a2..fb618730b 100644
--- a/docs/content/downloads/_index.cn.md
+++ b/docs/content/downloads/_index.cn.md
@@ -16,15 +16,12 @@ ElasticJob 的发布版包括源码包及其对应的二进制包。
 ##### ElasticJob - 版本: 3.0.3 ( 发布日期: Mar 31, 2023 )
 
 - 源码: [ [SRC](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip.sha512) ]
-- ElasticJob-Lite 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-Scheduler 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-Executor 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz.sha512) ]
+- ElasticJob 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.sha512) ]
 
 ##### ElasticJob-UI - 版本: 3.0.2 ( 发布日期: Oct 31, 2022 )
 
 - 源码: [ [SRC](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip.sha512) ]
-- ElasticJob-Lite-UI 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-UI 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz.sha512) ]
+- ElasticJob-UI 二进制包: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.sha512) ]
 
 即将发布
 
diff --git a/docs/content/downloads/_index.en.md b/docs/content/downloads/_index.en.md
index 34cf23c79..3f98eae06 100644
--- a/docs/content/downloads/_index.en.md
+++ b/docs/content/downloads/_index.en.md
@@ -16,15 +16,12 @@ The downloads are distributed via mirror sites and should be checked for tamperi
 ##### ElasticJob - Version: 3.0.3 ( Release Date: Mar 31, 2023 )
 
 - Source Codes: [ [SRC](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-src.zip.sha512) ]
-- ElasticJob-Lite Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-Scheduler Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-scheduler-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-Executor Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-cloud-executor-bin.tar.gz.sha512) ]
+- ElasticJob Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-3.0.3/apache-shardingsphere-elasticjob-3.0.3-lite-bin.tar.gz.sha512) ]
 
 ##### ElasticJob-UI - Version: 3.0.2 ( Release Date: Oct 31, 2022 )
 
 - Source Codes: [ [SRC](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-ui-src.zip.sha512) ]
-- ElasticJob-Lite-UI Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.sha512) ]
-- ElasticJob-Cloud-UI Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-cloud-ui-bin.tar.gz.sha512) ]
+- ElasticJob-UI Binary Distribution: [ [TAR](https://www.apache.org/dyn/closer.lua/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz) ] [ [ASC](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.asc) ] [ [SHA512](https://downloads.apache.org/shardingsphere/elasticjob-ui-3.0.2/apache-shardingsphere-elasticjob-3.0.2-lite-ui-bin.tar.gz.sha512) ]
 
 ## All Releases
 
diff --git a/docs/content/faq/_index.cn.md b/docs/content/faq/_index.cn.md
index 18cd5dbe0..66e832606 100644
--- a/docs/content/faq/_index.cn.md
+++ b/docs/content/faq/_index.cn.md
@@ -17,13 +17,9 @@ ElasticJob 使用 lombok 实现极简代码。关于更多使用和安装细节
 
 动态添加作业这个概念每个人理解不尽相同。
 
-ElasticJob-Lite 为 jar 包，由开发或运维人员负责启动。启动时自动向注册中心注册作业信息并进行分布式协调，因此并不需要手工在注册中心填写作业信息。
+ElasticJob 为 jar 包，由开发或运维人员负责启动。启动时自动向注册中心注册作业信息并进行分布式协调，因此并不需要手工在注册中心填写作业信息。
 但注册中心与作业部署机无从属关系，注册中心并不能控制将单点的作业分发至其他作业机，也无法将远程服务器未启动的作业启动。
-ElasticJob-Lite 并不会包含 ssh 免密管理等功能。
-
-ElasticJob-Cloud 为 mesos 框架，由 mesos 负责作业启动和分发。
-但需要将作业打包上传，并调用 ElasticJob-Cloud 提供的 RESTful API 写入注册中心。
-打包上传属于部署系统的范畴 ElasticJob-Cloud 并未涉及。
+ElasticJob 并不会包含 ssh 免密管理等功能。
 
 综上所述，ElasticJob 已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。
 
@@ -31,9 +27,9 @@ ElasticJob-Cloud 为 mesos 框架，由 mesos 负责作业启动和分发。
 
 回答：
 
-ElasticJob-Lite 采用无中心化设计，若每个客户端的配置不一致，不做控制的话，最后一个启动的客户端配置将会成为注册中心的最终配置。
+ElasticJob 采用无中心化设计，若每个客户端的配置不一致，不做控制的话，最后一个启动的客户端配置将会成为注册中心的最终配置。
 
-ElasticJob-Lite 提出了 overwrite 概念，可通过 JobConfiguration 或 Spring 命名空间配置。
+ElasticJob 提出了 overwrite 概念，可通过 JobConfiguration 或 Spring 命名空间配置。
 `overwrite=true` 即允许客户端配置覆盖注册中心，反之则不允许。
 如果注册中心无相关作业的配置，则无论 overwrite 是否配置，客户端配置都将写入注册中心。
 
@@ -45,7 +41,7 @@ ElasticJob-Lite 提出了 overwrite 概念，可通过 JobConfiguration 或 Spri
 这样做的目的是为了防止作业重分片时，将与注册中心失去联系的节点执行的分片分配给另外节点，导致同一分片在两个节点中同时执行。
 当作业节点恢复与注册中心联系时，将重新参与分片并恢复执行新的分配到的分片。
 
-## 5. ElasticJob-Lite 有何使用限制?
+## 5. ElasticJob 有何使用限制?
 
 回答：
 
@@ -55,46 +51,34 @@ ElasticJob-Lite 提出了 overwrite 概念，可通过 JobConfiguration 或 Spri
 
 * 开启 monitorExecution 才能实现分布式作业幂等性（即不会在多个作业服务器运行同一个分片）的功能，但 monitorExecution 对短时间内执行的作业（如秒级触发）性能影响较大，建议关闭并自行实现幂等性。
 
-## 6. 怀疑 ElasticJob-Lite 在分布式环境中有问题，但无法重现又不能在线上环境调试，应该怎么做?
+## 6. 怀疑 ElasticJob 在分布式环境中有问题，但无法重现又不能在线上环境调试，应该怎么做?
 
 回答：
 
-分布式问题非常难于调试和重现，为此 ElasticJob-Lite 提供了 dump 命令。
+分布式问题非常难于调试和重现，为此 ElasticJob 提供了 dump 命令。
 
-如果您怀疑某些场景出现问题，可参照[作业信息导出](/cn/user-manual/elasticjob-lite/operation/dump/)将作业运行时信息提交至社区。
+如果您怀疑某些场景出现问题，可参照[作业信息导出](/cn/user-manual/elasticjob/operation/dump/)将作业运行时信息提交至社区。
 ElasticJob 已将 IP 地址等敏感信息过滤，导出的信息可在公网安全传输。
 
-## 7. ElasticJob-Cloud 有何使用限制?
-
-回答：
-
-* 作业启动成功后修改作业名称视为新作业，原作业废弃。
-
-## 8. 在 ElasticJob-Cloud 中添加任务后，为什么任务一直在 ready 状态，而不开始执行?
-
-回答：
-
-任务在 mesos 有单独的 agent 可提供所需的资源时才会启动，否则会等待直到有足够的资源。
-
-## 9. 控制台界面无法正常显示?
+## 7. 控制台界面无法正常显示?
 
 回答：
 
 使用控制台时应确保与 ElasticJob 相关版本保持一致，否则会导致不可用。
 
-## 10. 为什么控制台界面中的作业状态是分片待调整?
+## 8. 为什么控制台界面中的作业状态是分片待调整?
 
 回答：
 
 分片待调整表示作业已启动但尚未获得分片时的状态。
 
-## 11. 为什么首次启动存在任务调度延迟的情况？
+## 9. 为什么首次启动存在任务调度延迟的情况？
 
 回答：
 ElasticJob 执行任务会获取本机IP，首次可能存在获取IP较慢的情况。尝试设置 `-Djava.net.preferIPv4Stack=true`.
 
 
-## 12. Windows环境下，运行ShardingSphere-ElasticJob-UI，找不到或无法加载主类 org.apache.shardingsphere.elasticjob.lite.ui.Bootstrap，如何解决？
+## 10. Windows环境下，运行ShardingSphere-ElasticJob-UI，找不到或无法加载主类 org.apache.shardingsphere.elasticjob.engine.ui.Bootstrap，如何解决？
 
 回答：
 
@@ -108,7 +92,7 @@ ElasticJob 执行任务会获取本机IP，首次可能存在获取IP较慢的
 tar zxvf apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin.tar.gz
 ```
 
-## 13. 运行 Cloud Scheduler 持续输出日志 "Elastic job: IP:PORT has leadership"，不能正常运行
+## 11. 运行 Cloud Scheduler 持续输出日志 "Elastic job: IP:PORT has leadership"，不能正常运行
 
 回答：
 
@@ -118,7 +102,7 @@ Cloud Scheduler 依赖 Mesos 库，启动时需要通过 `-Djava.library.path` 
 
 Mesos 相关请参考 [Apache Mesos](https://mesos.apache.org/)。
 
-## 14. 在多网卡的情况下无法获取到合适的 IP
+## 12. 在多网卡的情况下无法获取到合适的 IP
 
 回答：
 
@@ -130,7 +114,7 @@ Mesos 相关请参考 [Apache Mesos](https://mesos.apache.org/)。
 1. 指定IP地址 192.168.0.100：`-Delasticjob.preferred.network.ip=192.168.0.100`。
 1. 泛指IP地址(正则表达式) 192.168.*：`-Delasticjob.preferred.network.ip=192.168.*`。
 
-## 15. zk授权升级,在滚动部署过程中出现实例假死,回退到历史版本也依然存在假死。
+## 13. zk授权升级,在滚动部署过程中出现实例假死,回退到历史版本也依然存在假死。
 
 回答:
 
@@ -147,4 +131,4 @@ xxxx-07-27 22:33:55.224 [DEBUG] [localhost-startStop-1-EventThread] [] [] [] - o
 解决方案:
 
 1.如果您在升级的过程中出现回退历史版本也依然假死的问题,建议删除zk上所有作业目录,之后再重启历史版本。
-2.计算出合理的作业执行间隙,比如晚上21:00-21:30作业不会触发,在此期间先将实例全部停止,然后将带密码的版本全部部署上线。
\ No newline at end of file
+2.计算出合理的作业执行间隙,比如晚上21:00-21:30作业不会触发,在此期间先将实例全部停止,然后将带密码的版本全部部署上线。
diff --git a/docs/content/faq/_index.en.md b/docs/content/faq/_index.en.md
index 976d2b886..daebc029b 100644
--- a/docs/content/faq/_index.en.md
+++ b/docs/content/faq/_index.en.md
@@ -17,13 +17,9 @@ Answer:
 
 For the concept of dynamically adding job, everyone has a different understanding.
 
-`ElasticJob-Lite` is provided in jar package, which is started by developers or operation. When the job is started, it will automatically register job information to the registry center, and the registry center will perform distributed coordination, so there is no need to manually add job information in the registry center.
+`ElasticJob` is provided in jar package, which is started by developers or operation. When the job is started, it will automatically register job information to the registry center, and the registry center will perform distributed coordination, so there is no need to manually add job information in the registry center.
 However, registry center has no affiliation with the job server, can't control the distribution of single-point jobs to other job machines, and also can't start the job of remote server.
-`ElasticJob-Lite` doesn't support ssh secret management and other functions.
-
-`ElasticJob-Cloud` is a `mesos` framework, and `mesos` is responsible for job starting and distribution.
-But you need to package the job and upload it, and call the `REST API` provided by `ElasticJob-Cloud` to write job information into the registry center.
-Packaging and uploading job are the deployment system's functions, `ElasticJob-Cloud` does not support it.
+`ElasticJob` doesn't support ssh secret management and other functions.
 
 In summary, `ElasticJob` has supported basic dynamically adding jobs, but it can't be fully automated.
 
@@ -31,9 +27,9 @@ In summary, `ElasticJob` has supported basic dynamically adding jobs, but it can
 
 Answer:
 
-`ElasticJob-Lite` adopts a decentralized design. If the configuration of each client is inconsistent and is not controlled, the configuration of the client which is last started will be the final configuration of the registry center.
+`ElasticJob` adopts a decentralized design. If the configuration of each client is inconsistent and is not controlled, the configuration of the client which is last started will be the final configuration of the registry center.
 
-`ElasticJob-Lite` proposes the concept of `overwrite`, which can be configured through `JobConfiguration` or `Spring` namespace.
+`ElasticJob` proposes the concept of `overwrite`, which can be configured through `JobConfiguration` or `Spring` namespace.
 `overwrite=true` indicates that the client's configuration is allowed to override the registry center, and on the contrary is not allowed.
 If there is no configuration of related jobs in the registry center, regardless of whether the property of `overwrite` is configured, the client's configuration will be still written into the registry center.
 
@@ -45,7 +41,7 @@ In order to ensure the consistency of the job in the distributed system, once th
 The purpose of this is to prevent the assignment of the shards executed by the node that has lost contact with the registry center to another node when the job is re-sharded, causing the same shard to be executed on both nodes at the same time.
 When the node resumes contact with the registry center, it will re-participate in the sharding and resume execution of the newly shard.
 
-## 5. What are the usage restrictions of `ElasticJob-Lite`?
+## 5. What are the usage restrictions of `ElasticJob`?
 
 Answer:
 
@@ -55,47 +51,35 @@ Answer:
 
 * Enable `monitorExecution` to realize the function of distributed job idempotence (that is, the same shard will not be run on different job servers), but `monitorExecution` has a greater impact on the performance of jobs executed in a short period of time (such as second-level triggers). It is recommended to turn it off and realize idempotence by yourself.
 
-## 6. What should you do if you suspect that `ElasticJob-Lite` has a problem in a distributed environment, but it cannot be reproduced and cannot be debugged in the online environment?
+## 6. What should you do if you suspect that `ElasticJob` has a problem in a distributed environment, but it cannot be reproduced and cannot be debugged in the online environment?
 
 Answer:
 
-Distributed problems are very difficult to debug and reproduce. For this reason, `ElasticJob-Lite` provides the `dump` command.
+Distributed problems are very difficult to debug and reproduce. For this reason, `ElasticJob` provides the `dump` command.
 
-If you suspect a problem in some scenarios, you can refer to the [dump](/en/user-manual/elasticjob-lite/operation/dump/) document to submit the job runtime information to the community.
+If you suspect a problem in some scenarios, you can refer to the [dump](/en/user-manual/elasticjob/operation/dump/) document to submit the job runtime information to the community.
 `ElasticJob` has filtered sensitive information such as `IP`, and the dump file can be safely transmitted on the Internet.
 
-## 7. What are the usage restrictions of `ElasticJob-Cloud`?
-
-Answer:
-
-* After the job start successfully, modifying the job name is regarded as a new job, and the original job is discarded.
-
-## 8. When add a task in the `ElasticJob-Cloud`, why does it remain in the ready state, but doesn't start?
-
-Answer:
-
-The task will start when `mesos` has a separate `agent` that can provide the required resources, otherwise it will wait until there are enough resources.
-
-## 9. Why can't the Console page display normally?
+## 7. Why can't the Console page display normally?
 
 Answer:
 
 Make sure that the `Web Console`'s version is consistent with `ElasticJob`, otherwise it will become unavailable.
 
-## 10. Why is the job state shard to be adjusted in the Console?
+## 8. Why is the job state shard to be adjusted in the Console?
 
 Answer:
 
 Shard to be adjusted indicates the state when the job has started but has not yet obtained the shard.
 
-## 11. Why is there a task scheduling delay in the first startup?
+## 9. Why is there a task scheduling delay in the first startup?
 
 Answer:
 
 ElasticJob will obtain the local IP when performing task scheduling, and it may be slow to obtain the IP for the first time. Try to set `-Djava.net.preferIPv4Stack=true`.
 
 
-## 12. In Windows env, run ShardingSphere-ElasticJob-UI, could not find or load main class org.apache.shardingsphere.elasticjob.lite.ui.Bootstrap. Why?
+## 10. In Windows env, run ShardingSphere-ElasticJob-UI, could not find or load main class org.apache.shardingsphere.elasticjob.engine.ui.Bootstrap. Why?
 
 Answer:
 
@@ -107,7 +91,7 @@ Open cmd.exe and execute the following command:
 tar zxvf apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin.tar.gz
 ```
 
-## 13. Unable to startup Cloud Scheduler. Continuously output "Elastic job: IP:PORT has leadership"
+## 11. Unable to startup Cloud Scheduler. Continuously output "Elastic job: IP:PORT has leadership"
 
 Answer: 
 
@@ -117,7 +101,7 @@ For instance, Mesos native libraries are under `/usr/local/lib`, so the property
 
 About Apache Mesos, please refer to [Apache Mesos](https://mesos.apache.org/).
 
-## 14. Unable to obtain a suitable IP in the case of multiple network interfaces
+## 12. Unable to obtain a suitable IP in the case of multiple network interfaces
 
 Answer: 
 
@@ -129,7 +113,7 @@ For example
 1. specify network addresses, 192.168.0.100: `-Delasticjob.preferred.network.ip=192.168.0.100`.
 1. specify network addresses for regular expressions, 192.168.*: `-Delasticjob.preferred.network.ip=192.168.*`.
 
-## 15. During the zk authorization upgrade process, there was a false death of the instance during the rolling deployment process, and even if the historical version was rolled back, there was still false death.
+## 13. During the zk authorization upgrade process, there was a false death of the instance during the rolling deployment process, and even if the historical version was rolled back, there was still false death.
 
 Answer:
 
@@ -143,5 +127,5 @@ Through the logs, it can be found that an -102 exception will be thrown:
 xxxx-07-27 22:33:55.224 [DEBUG] [localhost-startStop-1-EventThread] [] [] [] - o.a.c.f.r.c.TreeCache : processResult: CuratorEventImpl{type=GET_DATA, resultCode=-102, path='/xxx/leader/election/latch/_c_bccccdcc-1134-4e0a-bb52-59a13836434a-latch-0000000047', name='null', children=null, context=null, stat=null, data=null, watchedEvent=null, aclList=null}
 ```
 
-1.If you encounter the issue of returning to the historical version and still pretending to be dead during the upgrade process, it is recommended to delete all job directories on zk and restart the historical version afterwards.
-2.Calculate a reasonable job execution gap, such as when the job will not trigger from 21:00 to 21:30 in the evening. During this period, first stop all instances, and then deploy all versions with passwords online.
\ No newline at end of file
+1. If you encounter the issue of returning to the historical version and still pretending to be dead during the upgrade process, it is recommended to delete all job directories on zk and restart the historical version afterwards.
+2. Calculate a reasonable job execution gap, such as when the job will not trigger from 21:00 to 21:30 in the evening. During this period, first stop all instances, and then deploy all versions with passwords online.
diff --git a/docs/content/features/elastic.cn.md b/docs/content/features/elastic.cn.md
index 6dc5af9d8..bb15c53b8 100644
--- a/docs/content/features/elastic.cn.md
+++ b/docs/content/features/elastic.cn.md
@@ -55,9 +55,9 @@ ElasticJob 提供最灵活的方式，最大限度的提高执行作业的吞吐
 将分片总数设置为 1，并使用多于 1 台的服务器执行作业，作业将会以 1 主 n 从的方式执行。
 一旦执行作业的服务器宕机，等待执行的服务器将会在下次作业启动时替补执行。开启失效转移功能效果更好，如果本次作业在执行过程中宕机，备机会立即替补执行。
 
-## ElasticJob-Lite 实现原理
+## 实现原理
 
-ElasticJob-Lite 并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。
+ElasticJob 并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。
 注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。
 
 ### 弹性分布式实现
@@ -92,13 +92,13 @@ ElasticJob-Lite 并无作业调度中心节点，而是基于部署作业框架
 分片项序号的子节点存储详细信息。每个分片项下的子节点用于控制和记录分片运行状态。
 节点详细信息说明：
 
-| 子节点名  | 临时节点 | 描述                                                                      |
-| -------- |:------- |:------------------------------------------------------------------------- |
-| instance | 否      | 执行该分片项的作业运行实例主键                                                |
-| running  | 是      | 分片项正在运行的状态<br />仅配置 monitorExecution 时有效                      |
-| failover | 是      | 如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器 IP |
-| misfire  | 否      | 是否开启错过任务重新执行                                                     |
-| disabled | 否      | 是否禁用此分片项                                                            |
+| 子节点名     | 临时节点 | 描述                                          |
+|----------|:-----|:--------------------------------------------|
+| instance | 否    | 执行该分片项的作业运行实例主键                             |
+| running  | 是    | 分片项正在运行的状态<br />仅配置 monitorExecution 时有效    |
+| failover | 是    | 如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器 IP |
+| misfire  | 否    | 是否开启错过任务重新执行                                |
+| disabled | 否    | 是否禁用此分片项                                    |
 
 ### servers 节点
 
@@ -114,14 +114,14 @@ ElasticJob-Lite 并无作业调度中心节点，而是基于部署作业框架
 
 leader节点是内部使用的节点，如果对作业框架原理不感兴趣，可不关注此节点。
 
-| 子节点名              | 临时节点 | 描述                                                                        |
-| -------------------- |:------- |:--------------------------------------------------------------------------- |
-| election\instance    | 是      | 主节点服务器IP地址<br />一旦该节点被删除将会触发重新选举<br />重新选举的过程中一切主节点相关的操作都将阻塞   |
-| election\latch       | 否      | 主节点选举的分布式锁<br />为 curator 的分布式锁使用 |
-| sharding\necessary   | 否      | 是否需要重新分片的标记<br />如果分片总数变化，或作业服务器节点上下线或启用/禁用，以及主节点选举，会触发设置重分片标记<br />作业在下次执行时使用主节点重新分片，且中间不会被打断<br />作业执行时不会触发分片 |
-| sharding\processing  | 是      | 主节点在分片时持有的节点<br />如果有此节点，所有的作业执行都将阻塞，直至分片结束<br />主节点分片结束或主节点崩溃会删除此临时节点 |
-| failover\items\分片项 | 否      | 一旦有作业崩溃，则会向此节点记录<br />当有空闲作业服务器时，会从此节点抓取需失效转移的作业项 |
-| failover\items\latch | 否      | 分配失效转移分片项时占用的分布式锁<br />为 curator 的分布式锁使用                    |
+| 子节点名                 | 临时节点 | 描述                                                                                                              |
+|----------------------|:-----|:----------------------------------------------------------------------------------------------------------------|
+| election\instance    | 是    | 主节点服务器IP地址<br />一旦该节点被删除将会触发重新选举<br />重新选举的过程中一切主节点相关的操作都将阻塞                                                    |
+| election\latch       | 否    | 主节点选举的分布式锁<br />为 curator 的分布式锁使用                                                                               |
+| sharding\necessary   | 否    | 是否需要重新分片的标记<br />如果分片总数变化，或作业服务器节点上下线或启用/禁用，以及主节点选举，会触发设置重分片标记<br />作业在下次执行时使用主节点重新分片，且中间不会被打断<br />作业执行时不会触发分片 |
+| sharding\processing  | 是    | 主节点在分片时持有的节点<br />如果有此节点，所有的作业执行都将阻塞，直至分片结束<br />主节点分片结束或主节点崩溃会删除此临时节点                                          |
+| failover\items\分片项   | 否    | 一旦有作业崩溃，则会向此节点记录<br />当有空闲作业服务器时，会从此节点抓取需失效转移的作业项                                                               |
+| failover\items\latch | 否    | 分配失效转移分片项时占用的分布式锁<br />为 curator 的分布式锁使用                                                                        |
 
 ### 流程图
 
diff --git a/docs/content/features/elastic.en.md b/docs/content/features/elastic.en.md
index 209146240..e6c3faf1e 100644
--- a/docs/content/features/elastic.en.md
+++ b/docs/content/features/elastic.en.md
@@ -53,9 +53,9 @@ The unfinished job from a crashed server will be transferred and executed contin
 Setting the total number of sharding items to 1 and more than 1 servers to execute the jobs makes the job run in the mode of `1` master and `n` slaves.
 Once the servers that are executing jobs are down, the idle servers will take over the jobs and execute them in the next scheduling, or better, if the failover option is enabled, the idle servers can take over the failed jobs immediately.
 
-## ElasticJob-Lite Implementation Principle
+## Implementation Principle
 
-ElasticJob-Lite does not have a job scheduling center node, but the programs based on the deployment job framework trigger the scheduling when the corresponding time point is reached.
+ElasticJob does not have a job scheduling center node, but the programs based on the deployment job framework trigger the scheduling when the corresponding time point is reached.
 The registration center is only used for job registration and monitoring information storage. The main job node is only used to handle functions such as sharding and cleaning.
 
 ### Elastic Distributed Implementation
@@ -91,13 +91,13 @@ Job sharding information. The child node is the sharding item sequence number, s
 The child node of the sharding item sequence number stores detailed information. The child node under each shard is used to control and record the running status of the shard.
 Node details description：
 
-| Child node name  | Ephemeral node   | Description                                                                                                                          |
-| ---------------- |:---------------- |:------------------------------------------------------------------------------------------------------------------------------------ |
-| instance         | NO               | The primary key of the job running instance that executes the shard                                                                  |
-| running          | YES             | The running state of the shard item.<br/>Only valid when monitorExecution is configured                                               |
-| failover         | YES             | If the shard item is assigned to another job server by failover, this node value records the job server IP that executes the shard    |
-| misfire          | NO              | Whether to restart the missed task                                                                                                    |
-| disabled         | NO              | Whether to disable this shard                                                                                                         |
+| Child node name | Ephemeral node | Description                                                                                                                        |
+|-----------------|:---------------|:-----------------------------------------------------------------------------------------------------------------------------------|
+| instance        | NO             | The primary key of the job running instance that executes the shard                                                                |
+| running         | YES            | The running state of the shard item.<br/>Only valid when monitorExecution is configured                                            |
+| failover        | YES            | If the shard item is assigned to another job server by failover, this node value records the job server IP that executes the shard |
+| misfire         | NO             | Whether to restart the missed task                                                                                                 |
+| disabled        | NO             | Whether to disable this shard                                                                                                      |
 
 ### servers node
 
@@ -113,11 +113,11 @@ They are used for master node election, sharding and failover processing respect
 
 The leader node is an internally used node. If you are not interested in the principle of the job framework, you don't need to pay attention to this node.
 
-| Child node name           | Ephemeral node | Description                                                                                                                                                                                                                                                                                                                                             |
-| ------------------------- |:-------------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| election\instance         | YES            | The IP address of the master node server.<br />Once the node is deleted, a re-election will be triggered.<br />All operations related to the master node will be blocked during the re-election process.                                                                                                                                                |
-| election\latch            | NO             | Distributed locks elected by the master node<br />Used for distributed locks of curator                                                                                                                                                                                                                                                                 |
-| sharding\necessary        | NO             | The flag for re-sharding. If the total number of shards changes, or the job server node goes online or offline or enabled/disabled, as well as the master node election, the re-sharded flag will be triggered. The master node is re-sharded without being interrupted in the middle<br />The sharding will not be triggered when the job is executed  |
-| sharding\processing       | YES            | The node held by the master node during sharding.<br />If there is this node, all job execution will be blocked until the sharding ends.<br />The ephemeral node will be deleted when the master node sharding is over or the master node crashes                                                                                                       |
-| failover\items\shard item | NO             | Once a job crashes, it will record to this node.<br />When there is an idle job server, it will grab the job items that need to failover from this node                                                                                                                                                                                                 |
-| failover\items\latch      | NO             | Distributed locks used when allocating failover shard items.<br /> Used by curator distributed locks                                                                                                                                                                                                                                                    |
+| Child node name           | Ephemeral node | Description                                                                                                                                                                                                                                                                                                                                            |
+|---------------------------|:---------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| election\instance         | YES            | The IP address of the master node server.<br />Once the node is deleted, a re-election will be triggered.<br />All operations related to the master node will be blocked during the re-election process.                                                                                                                                               |
+| election\latch            | NO             | Distributed locks elected by the master node<br />Used for distributed locks of curator                                                                                                                                                                                                                                                                |
+| sharding\necessary        | NO             | The flag for re-sharding. If the total number of shards changes, or the job server node goes online or offline or enabled/disabled, as well as the master node election, the re-sharded flag will be triggered. The master node is re-sharded without being interrupted in the middle<br />The sharding will not be triggered when the job is executed |
+| sharding\processing       | YES            | The node held by the master node during sharding.<br />If there is this node, all job execution will be blocked until the sharding ends.<br />The ephemeral node will be deleted when the master node sharding is over or the master node crashes                                                                                                      |
+| failover\items\shard item | NO             | Once a job crashes, it will record to this node.<br />When there is an idle job server, it will grab the job items that need to failover from this node                                                                                                                                                                                                |
+| failover\items\latch      | NO             | Distributed locks used when allocating failover shard items.<br /> Used by curator distributed locks                                                                                                                                                                                                                                                   |
diff --git a/docs/content/features/resource.cn.md b/docs/content/features/resource.cn.md
deleted file mode 100644
index b0e95aa7e..000000000
--- a/docs/content/features/resource.cn.md
+++ /dev/null
@@ -1,43 +0,0 @@
-+++
-pre = "<b>3.3. </b>"
-title = "资源分配"
-weight = 3
-chapter = true
-+++
-
-资源分配功能为 ElasticJob-Cloud 所特有的功能。
-
-## 作业运行模式
-
-ElasticJob-Cloud 分为瞬时作业和常驻作业 2 种运行模式。
-
-### 瞬时作业
-
-在每一次作业执行完毕后立刻释放资源，保证利用现有资源错峰执行。
-资源分配和容器启动均占用一定时长，且作业执行时资源不一定充足，因此作业执行会有延迟。
-瞬时作业适用于间隔时间长，资源消耗多且对执行时间无严格要求的作业。
-
-### 常驻作业
-
-无论在运行时还是等待运行时，均一直占用分配的资源，可节省过多容器启动和资源分配的开销，适用于间隔时间短，资源需求量稳定的作业。
-
-## 调度器
-
-ElasticJob-Cloud 基于 Mesos 的 Framework 开发，用于资源调度和应用分发，需要独立启动并提供服务。
-
-## 作业应用
-
-指作业打包部署后的应用，描述了作业启动需要用到的 CPU、内存、启动脚本及应用下载路径等基本信息。
-每个作业应用可以包含一个或多个作业。
-
-## 作业
-
-即实际运行的具体任务，和 ElasticJob-Lite 共用同样的作业生态。
-在注册作业之前必须先注册作业应用。
-
-## 资源
-
-指作业启动或运行需要用到的 CPU、内存。
-配置在作业应用维度表示整个应用启动需要用的资源；
-配置在作业维度表示每个作业运行需要的资源。
-作业启动需要的资源为指定作业应用需要的资源与作业需要资源的总和。
diff --git a/docs/content/features/resource.en.md b/docs/content/features/resource.en.md
deleted file mode 100644
index 3b9938765..000000000
--- a/docs/content/features/resource.en.md
+++ /dev/null
@@ -1,43 +0,0 @@
-+++
-pre = "<b>3.3. </b>"
-title = "Resource Assign"
-weight = 3
-chapter = true
-+++
-
-The resource allocation function is unique to ElasticJob-Cloud.
-
-## Execution mode
-
-ElasticJob-Cloud is divided into two execution modes: transient and daemon execution.
-
-### Transient execution
-
-The resources are released immediately after the execution of each job to ensure that the existing resources are used for staggered execution.
-Resource allocation and container startup both take up a certain amount of time, and resources may not be sufficient during job execution, so job execution may be delayed.
-Transient execution is suitable for jobs with long intervals, high resource consumption and no strict requirements on execution time.
-
-### Daemon execution
-
-Whether it is running or waiting to run, it always occupies the allocated resources, which can save too many container startup and resource allocation costs, and is suitable for jobs with short intervals and stable resource requirements.
-
-## Scheduler
-
-ElasticJob-Cloud is developed based on the Mesos Framework and is used for resource scheduling and application distribution. It needs to be started independently and provides services.
-
-## Job Application
-
-Refers to the application after the job is packaged and deployed, and describes the basic information such as the CPU, memory, startup script, and application download path that are needed to start the job.
-Each job application can contain one or more jobs.
-
-## Job
-
-That is, the specific tasks that are actually run share the same job ecology as ElasticJob-Lite.
-The job application must be registered before registering the job.
-
-## Resource
-
-Refers to the CPU and memory required to start or run a job.
-Configuration in the job application dimension indicates the resources needed for the entire application to start;
-Configuration in the job dimension indicates the resources required for each job to run.
-The resources required for job startup are the sum of the resources required by the specified job application and the resources required by the job.
diff --git a/docs/content/features/schedule-model.cn.md b/docs/content/features/schedule-model.cn.md
index 0b6db1372..4aee64acd 100644
--- a/docs/content/features/schedule-model.cn.md
+++ b/docs/content/features/schedule-model.cn.md
@@ -5,15 +5,5 @@ weight = 1
 chapter = true
 +++
 
-与大部分的作业平台不同，ElasticJob 的调度模型划分为支持线程级别调度的进程内调度 ElasticJob-Lite，和进程级别调度的 ElasticJob-Cloud。
-
-## 进程内调度
-
-ElasticJob-Lite 是面向进程内的线程级调度框架。通过它，作业能够透明化的与业务应用系统相结合。
+ElasticJob 是面向进程内的线程级调度框架。通过它，作业能够透明化的与业务应用系统相结合。
 它能够方便的与 Spring 、Dubbo 等 Java 框架配合使用，在作业中可自由使用 Spring 注入的 Bean，如数据源连接池、Dubbo 远程服务等，更加方便的贴合业务开发。
-
-## 进程级调度
-
-ElasticJob-Cloud 拥有进程内调度和进程级别调度两种方式。
-由于 ElasticJob-Cloud 能够对作业服务器的资源进行控制，因此其作业类型可划分为常驻任务和瞬时任务。
-常驻任务类似于 ElasticJob-Lite，是进程内调度；瞬时任务则完全不同，它充分的利用了资源分配的削峰填谷能力，是进程级的调度，每次任务会启动全新的进程处理。
diff --git a/docs/content/features/schedule-model.en.md b/docs/content/features/schedule-model.en.md
index 8bb872a91..230c8c9c6 100644
--- a/docs/content/features/schedule-model.en.md
+++ b/docs/content/features/schedule-model.en.md
@@ -5,15 +5,7 @@ weight = 1
 chapter = true
 +++
 
-Unlike most job platforms, ElasticJob's scheduling model is divided into in-process scheduling ElasticJob-Lite that supports thread-level scheduling, and ElasticJob-Cloud for process-level scheduling.
-
-## In-process scheduling
-
-ElasticJob-Lite is a thread-level scheduling framework for in-process. Through it, Job can be transparently combined with business application systems.
-It can be easily used in conjunction with Java frameworks such as Spring and Dubbo. Spring DI (Dependency Injection) Beans can be freely used in Job, such as data source connection pool and Dubbo remote service, etc., which is more convenient for business development.
-
-## Process-level scheduling
-
-ElasticJob-Cloud has two methods: in-process scheduling and process-level scheduling.
-Because ElasticJob-Cloud can control the resources of the job server, its job types can be divided into resident tasks and transient tasks.
-The resident task is similar to ElasticJob-Lite, which is an in-process scheduling; the transient task is completely different. It fully utilizes the peak-cutting and valley-filling capabilities of resource allocation, and is a process-level scheduling. Each task will start a new process.
\ No newline at end of file
+ElasticJob is a thread-level scheduling framework for in-process.
+Through it, Job can be transparently combined with business application systems.
+It can be easily used in conjunction with Java frameworks such as Spring and Dubbo.
+Spring DI (Dependency Injection) Beans can be freely used in Job, such as data source connection pool and Dubbo remote service, etc., which is more convenient for business development.
diff --git a/docs/content/overview/_index.cn.md b/docs/content/overview/_index.cn.md
index 2358b8775..9263d34e2 100644
--- a/docs/content/overview/_index.cn.md
+++ b/docs/content/overview/_index.cn.md
@@ -11,8 +11,7 @@ chapter = true
 [![GitHub watchers](https://img.shields.io/github/watchers/apache/shardingsphere-elasticjob.svg?style=social&label=Watch)](https://github.com/apache/shardingsphere-elasticjob/watchers)
 [![Stargazers over time](https://starchart.cc/apache/shardingsphere-elasticjob.svg)](https://starchart.cc/apache/shardingsphere-elasticjob)
 
-ElasticJob 是面向互联网生态和海量任务的分布式调度解决方案，由两个相互独立的子项目 ElasticJob-Lite 和 ElasticJob-Cloud 组成。
-它通过弹性调度、资源管控、以及作业治理的功能，打造一个适用于互联网场景的分布式调度解决方案，并通过开放的架构设计，提供多元化的作业生态。
+ElasticJob 通过弹性调度、资源管控、以及作业治理的功能，打造一个适用于互联网场景的分布式调度解决方案，并通过开放的架构设计，提供多元化的作业生态。
 它的各个产品使用统一的作业 API，开发者仅需一次开发，即可随意部署。
 
 ElasticJob 已于 2020 年 5 月 28 日成为 [Apache ShardingSphere](https://shardingsphere.apache.org/) 的子项目。
@@ -31,24 +30,9 @@ ElasticJob 已于 2020 年 5 月 28 日成为 [Apache ShardingSphere](https://sh
 使用 ElasticJob 能够让开发工程师不再担心任务的线性吞吐量提升等非功能需求，使他们能够更加专注于面向业务编码设计；
 同时，它也能够解放运维工程师，使他们不必再担心任务的可用性和相关管理需求，只通过轻松的增加服务节点即可达到自动化运维的目的。
 
-### ElasticJob-Lite
+ElasticJob 定位为轻量级无中心化解决方案，使用 jar 的形式提供分布式任务的协调服务。
 
-定位为轻量级无中心化解决方案，使用 jar 的形式提供分布式任务的协调服务。
-
-![ElasticJob-Lite Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
-
-### ElasticJob-Cloud
-
-采用自研 Mesos Framework 的解决方案，额外提供资源治理、应用分发以及进程隔离等功能。
-
-![ElasticJob-Cloud Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_cloud.png)
-
-|           | *ElasticJob-Lite* | *ElasticJob-Cloud* |
-| --------- | ----------------- | ------------------ |
-| 无中心化   | 是                | 否                  |
-| 资源分配   | 不支持             | 支持                |
-| 作业模式   | 常驻               | 常驻 + 瞬时         |
-| 部署依赖   | ZooKeeper         | ZooKeeper + Mesos   |
+![ElasticJob Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
 
 ## 功能列表
 
@@ -94,7 +78,3 @@ ElasticJob 已于 2020 年 5 月 28 日成为 [Apache ShardingSphere](https://sh
 ### ZooKeeper
 
 请使用 ZooKeeper 3.6.0 及其以上版本。[详情参见](https://zookeeper.apache.org/)
-
-### Mesos（仅 ElasticJob-Cloud 使用）
-
-请使用 Mesos 1.1.0 及其兼容版本。[详情参见](https://mesos.apache.org/)
diff --git a/docs/content/overview/_index.en.md b/docs/content/overview/_index.en.md
index 974e613c2..6b4c1b252 100644
--- a/docs/content/overview/_index.en.md
+++ b/docs/content/overview/_index.en.md
@@ -11,8 +11,6 @@ chapter = true
 [![GitHub watchers](https://img.shields.io/github/watchers/apache/shardingsphere-elasticjob.svg?style=social&label=Watch)](https://github.com/apache/shardingsphere-elasticjob/watchers)
 [![Stargazers over time](https://starchart.cc/apache/shardingsphere-elasticjob.svg)](https://starchart.cc/apache/shardingsphere-elasticjob)
 
-ElasticJob is a distributed scheduling solution consisting of two separate projects, ElasticJob-Lite and ElasticJob-Cloud.
-
 Through the functions of flexible scheduling, resource management and job management, 
 it creates a distributed scheduling solution suitable for Internet scenarios, 
 and provides a diversified job ecosystem through open architecture design.
@@ -36,24 +34,9 @@ Welcome communicate with community via [mail list](mailto:dev@shardingsphere.apa
 Using ElasticJob can make developers no longer worry about the non-functional requirements such as jobs scale out, so that they can focus more on business coding;
 At the same time, it can release operators too, so that they do not have to worry about jobs high availability and management, and can automatic operation by simply adding servers.
 
-### ElasticJob-Lite
-
-A lightweight, decentralized solution that provides distributed task sharding services.
-
-![ElasticJob-Lite Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
-
-### ElasticJob-Cloud
+ElasticJob is a lightweight, decentralized solution that provides distributed task sharding services.
 
-Uses Mesos to manage and isolate resources.
-
-![ElasticJob-Cloud Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_cloud.png)
-
-|                   | *ElasticJob-Lite* | *ElasticJob-Cloud* |
-| ----------------- | ----------------- | ------------------ |
-| Decentralization  | Yes               | No                 |
-| Resource Assign   | No                | Yes                |
-| Job Execution     | Daemon            | Daemon + Transient |
-| Deploy Dependency | ZooKeeper         | ZooKeeper + Mesos  |
+![ElasticJob Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
 
 ## Features
 
@@ -99,7 +82,3 @@ Maven 3.5.0 or above required.
 ### ZooKeeper
 
 ZooKeeper 3.6.0 or above required. [See details](https://zookeeper.apache.org/)
-
-### Mesos (ElasticJob-Cloud only)
-
-Mesos 1.1.0 or compatible version required. [See details](https://mesos.apache.org/)
\ No newline at end of file
diff --git a/docs/content/quick-start/_index.cn.md b/docs/content/quick-start/_index.cn.md
index bae7073e4..d9a6c2e18 100644
--- a/docs/content/quick-start/_index.cn.md
+++ b/docs/content/quick-start/_index.cn.md
@@ -5,4 +5,63 @@ weight = 2
 chapter = true
 +++
 
-本章节以尽量短的时间，为使用者提供最简单的 ElasticJob 的快速入门。
\ No newline at end of file
+## 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere.elasticjob</groupId>
+    <artifactId>elasticjob-engine-core</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+## 作业开发
+
+```java
+public class MyJob implements SimpleJob {
+    
+    @Override
+    public void execute(ShardingContext context) {
+        switch (context.getShardingItem()) {
+            case 0: 
+                // do something by sharding item 0
+                break;
+            case 1: 
+                // do something by sharding item 1
+                break;
+            case 2: 
+                // do something by sharding item 2
+                break;
+            // case n: ...
+        }
+    }
+}
+```
+
+## 作业配置
+
+```java
+    JobConfiguration jobConfig = JobConfiguration.newBuilder("MyJob", 3).cron("0/5 * * * * ?").build();
+```
+
+## 作业调度
+
+```java
+public class MyJobDemo {
+    
+    public static void main(String[] args) {
+        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).schedule();
+    }
+    
+    private static CoordinatorRegistryCenter createRegistryCenter() {
+        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration("zk_host:2181", "my-job"));
+        regCenter.init();
+        return regCenter;
+    }
+    
+    private static JobConfiguration createJobConfiguration() {
+        // 创建作业配置
+        // ...
+    }
+}
+```
diff --git a/docs/content/quick-start/_index.en.md b/docs/content/quick-start/_index.en.md
index b2f198ad5..19d9dbb23 100644
--- a/docs/content/quick-start/_index.en.md
+++ b/docs/content/quick-start/_index.en.md
@@ -5,4 +5,64 @@ weight = 2
 chapter = true
 +++
 
-In shortest time, this chapter provides users with a simplest quick start with ElasticJob.
+## Import Maven Dependency
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere.elasticjob</groupId>
+    <artifactId>elasticjob-engine-core</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+## Develop Job
+
+```java
+public class MyJob implements SimpleJob {
+    
+    @Override
+    public void execute(ShardingContext context) {
+        switch (context.getShardingItem()) {
+            case 0: 
+                // do something by sharding item 0
+                break;
+            case 1: 
+                // do something by sharding item 1
+                break;
+            case 2: 
+                // do something by sharding item 2
+                break;
+            // case n: ...
+        }
+    }
+}
+```
+
+## Configure Job
+
+```java
+    JobConfiguration jobConfig = JobConfiguration.newBuilder("MyJob", 3).cron("0/5 * * * * ?").build();
+```
+
+## Schedule Job
+
+```java
+public class MyJobDemo {
+    
+    public static void main(String[] args) {
+        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).schedule();
+    }
+    
+    private static CoordinatorRegistryCenter createRegistryCenter() {
+        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration("zk_host:2181", "my-job"));
+        regCenter.init();
+        return regCenter;
+    }
+    
+    private static JobConfiguration createJobConfiguration() {
+        // create job configuration
+        // ...
+    }
+}
+```
+
diff --git a/docs/content/quick-start/elasticjob-cloud.cn.md b/docs/content/quick-start/elasticjob-cloud.cn.md
deleted file mode 100644
index cb9818f0a..000000000
--- a/docs/content/quick-start/elasticjob-cloud.cn.md
+++ /dev/null
@@ -1,82 +0,0 @@
-+++
-pre = "<b>2.2. </b>"
-title = "ElasticJob-Cloud"
-weight = 2
-chapter = true
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-cloud-executor</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-## 作业开发
-
-```java
-public class MyJob implements SimpleJob {
-    
-    @Override
-    public void execute(ShardingContext context) {
-        switch (context.getShardingItem()) {
-            case 0: 
-                // do something by sharding item 0
-                break;
-            case 1: 
-                // do something by sharding item 1
-                break;
-            case 2: 
-                // do something by sharding item 2
-                break;
-            // case n: ...
-        }
-    }
-}
-```
-
-## 作业启动
-
-需定义 `main` 方法并调用 `JobBootstrap.execute()`，例子如下：
-
-```java
-public class MyJobDemo {
-    
-    public static void main(final String[] args) {
-        JobBootstrap.execute(new MyJob());
-    }
-}
-```
-
-## 作业打包
-
-```bash
-tar -cvf my-job.tar.gz my-job
-```
-
-## API 鉴权
-
-```bash
-curl -H "Content-Type: application/json" -X POST http://elasticjob_cloud_host:8899/api/login -d '{"username": "root", "password": "pwd"}'
-```
-
-响应体：
-
-```json
-{"accessToken":"some_token"}
-```
-
-## 作业发布
-
-```bash
-curl -l -H "Content-type: application/json" -H "accessToken: some_token" -X POST -d '{"appName":"my_app","appURL":"http://app_host:8080/my-job.tar.gz","cpuCount":0.1,"memoryMB":64.0,"bootstrapScript":"bin/start.sh","appCacheEnable":true,"eventTraceSamplingCount":0}' http://elasticjob_cloud_host:8899/api/app
-```
-
-## 作业调度
-
-```bash
-curl -l -H "Content-type: application/json" -H "accessToken: some_token" -X POST -d '{"jobName":"my_job","appName":"my_app","jobExecutionType":"TRANSIENT","cron":"0/5 * * * * ?","shardingTotalCount":3,"cpuCount":0.1,"memoryMB":64.0}' http://elasticjob_cloud_host:8899/api/job/register
-```
diff --git a/docs/content/quick-start/elasticjob-cloud.en.md b/docs/content/quick-start/elasticjob-cloud.en.md
deleted file mode 100644
index 65563f8ec..000000000
--- a/docs/content/quick-start/elasticjob-cloud.en.md
+++ /dev/null
@@ -1,82 +0,0 @@
-+++
-pre = "<b>2.2. </b>"
-title = "ElasticJob-Cloud"
-weight = 2
-chapter = true
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-cloud-executor</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-## Develop Job Details
-
-```java
-public class MyJob implements SimpleJob {
-    
-    @Override
-    public void execute(ShardingContext context) {
-        switch (context.getShardingItem()) {
-            case 0: 
-                // do something by sharding item 0
-                break;
-            case 1: 
-                // do something by sharding item 1
-                break;
-            case 2: 
-                // do something by sharding item 2
-                break;
-            // case n: ...
-        }
-    }
-}
-```
-
-## Develop Job Bootstrap
-
-Define `main` method and call `JobBootstrap.execute()`, example as follows:
-
-```java
-public class MyJobDemo {
-    
-    public static void main(final String[] args) {
-        JobBootstrap.execute(new MyJob());
-    }
-}
-```
-
-## Pack Job
-
-```bash
-tar -cvf my-job.tar.gz my-job
-```
-
-## API Authentication
-
-```bash
-curl -H "Content-Type: application/json" -X POST http://elasticjob_cloud_host:8899/api/login -d '{"username": "root", "password": "pwd"}'
-```
-
-Response body:
-```json
-{"accessToken":"some_token"}
-```
-
-
-## Publish Job
-
-```bash
-curl -l -H "Content-type: application/json" -H "accessToken: some_token" -X POST -d '{"appName":"my_app","appURL":"http://app_host:8080/my-job.tar.gz","cpuCount":0.1,"memoryMB":64.0,"bootstrapScript":"bin/start.sh","appCacheEnable":true,"eventTraceSamplingCount":0}' http://elasticjob_cloud_host:8899/api/app
-```
-
-## Schedule Job
-
-```bash
-curl -l -H "Content-type: application/json" -H "accessToken: some_token" -X POST -d '{"jobName":"my_job","appName":"my_app","jobExecutionType":"TRANSIENT","cron":"0/5 * * * * ?","shardingTotalCount":3,"cpuCount":0.1,"memoryMB":64.0}' http://elasticjob_cloud_host:8899/api/job/register
-```
diff --git a/docs/content/quick-start/elasticjob-lite.cn.md b/docs/content/quick-start/elasticjob-lite.cn.md
deleted file mode 100644
index 697c16b5f..000000000
--- a/docs/content/quick-start/elasticjob-lite.cn.md
+++ /dev/null
@@ -1,67 +0,0 @@
-+++
-pre = "<b>2.1. </b>"
-title = "ElasticJob-Lite"
-weight = 1
-chapter = true
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-core</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-## 作业开发
-
-```java
-public class MyJob implements SimpleJob {
-    
-    @Override
-    public void execute(ShardingContext context) {
-        switch (context.getShardingItem()) {
-            case 0: 
-                // do something by sharding item 0
-                break;
-            case 1: 
-                // do something by sharding item 1
-                break;
-            case 2: 
-                // do something by sharding item 2
-                break;
-            // case n: ...
-        }
-    }
-}
-```
-
-## 作业配置
-
-```java
-    JobConfiguration jobConfig = JobConfiguration.newBuilder("MyJob", 3).cron("0/5 * * * * ?").build();
-```
-
-## 作业调度
-
-```java
-public class MyJobDemo {
-    
-    public static void main(String[] args) {
-        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).schedule();
-    }
-    
-    private static CoordinatorRegistryCenter createRegistryCenter() {
-        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration("zk_host:2181", "my-job"));
-        regCenter.init();
-        return regCenter;
-    }
-    
-    private static JobConfiguration createJobConfiguration() {
-        // 创建作业配置
-        // ...
-    }
-}
-```
diff --git a/docs/content/quick-start/elasticjob-lite.en.md b/docs/content/quick-start/elasticjob-lite.en.md
deleted file mode 100644
index 1c4653d08..000000000
--- a/docs/content/quick-start/elasticjob-lite.en.md
+++ /dev/null
@@ -1,67 +0,0 @@
-+++
-pre = "<b>2.1. </b>"
-title = "ElasticJob-Lite"
-weight = 1
-chapter = true
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-core</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-## Develop Job
-
-```java
-public class MyJob implements SimpleJob {
-    
-    @Override
-    public void execute(ShardingContext context) {
-        switch (context.getShardingItem()) {
-            case 0: 
-                // do something by sharding item 0
-                break;
-            case 1: 
-                // do something by sharding item 1
-                break;
-            case 2: 
-                // do something by sharding item 2
-                break;
-            // case n: ...
-        }
-    }
-}
-```
-
-## Configure Job
-
-```java
-    JobConfiguration jobConfig = JobConfiguration.newBuilder("MyJob", 3).cron("0/5 * * * * ?").build();
-```
-
-## Schedule Job
-
-```java
-public class MyJobDemo {
-    
-    public static void main(String[] args) {
-        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).schedule();
-    }
-    
-    private static CoordinatorRegistryCenter createRegistryCenter() {
-        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration("zk_host:2181", "my-job"));
-        regCenter.init();
-        return regCenter;
-    }
-    
-    private static JobConfiguration createJobConfiguration() {
-        // create job configuration
-        // ...
-    }
-}
-```
diff --git a/docs/content/user-manual/_index.cn.md b/docs/content/user-manual/_index.cn.md
index 88c95bdff..a0736d3b2 100644
--- a/docs/content/user-manual/_index.cn.md
+++ b/docs/content/user-manual/_index.cn.md
@@ -5,5 +5,8 @@ weight = 4
 chapter = true
 +++
 
-本章节详细阐述 ElasticJob 的 2 个相关产品 ElasticJob-Lite 和 ElasticJob-Cloud 的使用。
+ElasticJob 定位为轻量级无中心化解决方案，使用 jar 的形式提供分布式任务的协调服务。
 
+![ElasticJob Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
+
+他的优势在于无中心化设计且外部依赖少，适用于资源分配稳定的业务系统。
diff --git a/docs/content/user-manual/_index.en.md b/docs/content/user-manual/_index.en.md
index 61f8b270f..3b2b5d51d 100644
--- a/docs/content/user-manual/_index.en.md
+++ b/docs/content/user-manual/_index.en.md
@@ -5,4 +5,9 @@ weight = 4
 chapter = true
 +++
 
-This chapter describes how to use projects of ElasticJob: ElasticJob-Lite and ElasticJob-Cloud. 
+ElasticJob is a lightweight, decentralized solution that provides distributed task sharding services.
+
+![ElasticJob Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
+
+The advantages of ElasticJob are no centralized design and less external dependence,
+which is suitable for business application with stable resource allocation. 
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/_index.cn.md b/docs/content/user-manual/configuration/_index.cn.md
similarity index 62%
rename from docs/content/user-manual/elasticjob-lite/configuration/_index.cn.md
rename to docs/content/user-manual/configuration/_index.cn.md
index 8e007e613..9acd9fba7 100644
--- a/docs/content/user-manual/elasticjob-lite/configuration/_index.cn.md
+++ b/docs/content/user-manual/configuration/_index.cn.md
@@ -5,26 +5,26 @@ weight = 2
 chapter = true
 +++
 
-通过配置可以快速清晰的理解 ElasticJob-Lite 所提供的功能。
+通过配置可以快速清晰的理解 ElasticJob 所提供的功能。
 
-本章节是 ElasticJob-Lite 的配置参考手册，需要时可当做字典查阅。
+本章节是 ElasticJob 的配置参考手册，需要时可当做字典查阅。
 
-ElasticJob-Lite 提供了 3 种配置方式，用于不同的使用场景。
+ElasticJob 提供了 3 种配置方式，用于不同的使用场景。
 
 ## 注册中心配置项
 
 ### 可配置属性
 
-| 属性名                         | 类型     | 缺省值   | 描述                        |
-| ----------------------------- |:-------- |:------- |:-------------------------- |
-| serverLists                   | String   |         | 连接 ZooKeeper 服务器的列表  |
-| namespace                     | String   |         | ZooKeeper 的命名空间        |
-| baseSleepTimeMilliseconds     | int      | 1000    | 等待重试的间隔时间的初始毫秒数 |
-| maxSleepTimeMilliseconds      | String   | 3000    | 等待重试的间隔时间的最大毫秒数 |
-| maxRetries                    | String   | 3       | 最大重试次数                 |
-| sessionTimeoutMilliseconds    | int      | 60000   | 会话超时毫秒数               |
-| connectionTimeoutMilliseconds | int      | 15000   | 连接超时毫秒数               |
-| digest                        | String   | 无需验证 | 连接 ZooKeeper 的权限令牌    |
+| 属性名                           | 类型     | 缺省值   | 描述                  |
+|-------------------------------|:-------|:------|:--------------------|
+| serverLists                   | String |       | 连接 ZooKeeper 服务器的列表 |
+| namespace                     | String |       | ZooKeeper 的命名空间     |
+| baseSleepTimeMilliseconds     | int    | 1000  | 等待重试的间隔时间的初始毫秒数     |
+| maxSleepTimeMilliseconds      | String | 3000  | 等待重试的间隔时间的最大毫秒数     |
+| maxRetries                    | String | 3     | 最大重试次数              |
+| sessionTimeoutMilliseconds    | int    | 60000 | 会话超时毫秒数             |
+| connectionTimeoutMilliseconds | int    | 15000 | 连接超时毫秒数             |
+| digest                        | String | 无需验证  | 连接 ZooKeeper 的权限令牌  |
 
 ### 核心配置项说明
 
@@ -37,26 +37,26 @@ ElasticJob-Lite 提供了 3 种配置方式，用于不同的使用场景。
 
 ### 可配置属性
 
-| 属性名                         | 类型       | 缺省值          | 描述                                 |
-| ----------------------------- |:---------- |:-------------- |:----------------------------------- |
-| jobName                       | String     |                | 作业名称                             |
-| shardingTotalCount            | int        |                | 作业分片总数                          |
-| cron                          | String     |                | CRON 表达式，用于控制作业触发时间       |
-| timeZone                      | String     |                | CRON 的时区设置                      |
-| shardingItemParameters        | String     |                | 个性化分片参数                        |
-| jobParameter                  | String     |                | 作业自定义参数                        |
-| monitorExecution              | boolean    | true           | 监控作业运行时状态                    |
-| failover                      | boolean    | false          | 是否开启任务执行失效转移               |
-| misfire                       | boolean    | true           | 是否开启错过任务重新执行               |
-| maxTimeDiffSeconds            | int        | -1（不检查）     | 最大允许的本机与注册中心的时间误差秒数    |
-| reconcileIntervalMinutes      | int        | 10             | 修复作业服务器不一致状态服务调度间隔分钟  |
-| jobShardingStrategyType       | String     | AVG_ALLOCATION | 作业分片策略类型                      |
-| jobExecutorServiceHandlerType | String     | CPU            | 作业线程池处理策略                    |
-| jobErrorHandlerType           | String     |                | 作业错误处理策略                      |
-| description                   | String     |                | 作业描述信息                         |
-| props                         | Properties |                | 作业属性配置信息                      |
-| disabled                      | boolean    | false          | 作业是否禁止启动                      |
-| overwrite                     | boolean    | false          | 本地配置是否可覆盖注册中心配置           |
+| 属性名                           | 类型         | 缺省值            | 描述                   |
+|-------------------------------|:-----------|:---------------|:---------------------|
+| jobName                       | String     |                | 作业名称                 |
+| shardingTotalCount            | int        |                | 作业分片总数               |
+| cron                          | String     |                | CRON 表达式，用于控制作业触发时间  |
+| timeZone                      | String     |                | CRON 的时区设置           |
+| shardingItemParameters        | String     |                | 个性化分片参数              |
+| jobParameter                  | String     |                | 作业自定义参数              |
+| monitorExecution              | boolean    | true           | 监控作业运行时状态            |
+| failover                      | boolean    | false          | 是否开启任务执行失效转移         |
+| misfire                       | boolean    | true           | 是否开启错过任务重新执行         |
+| maxTimeDiffSeconds            | int        | -1（不检查）        | 最大允许的本机与注册中心的时间误差秒数  |
+| reconcileIntervalMinutes      | int        | 10             | 修复作业服务器不一致状态服务调度间隔分钟 |
+| jobShardingStrategyType       | String     | AVG_ALLOCATION | 作业分片策略类型             |
+| jobExecutorServiceHandlerType | String     | CPU            | 作业线程池处理策略            |
+| jobErrorHandlerType           | String     |                | 作业错误处理策略             |
+| description                   | String     |                | 作业描述信息               |
+| props                         | Properties |                | 作业属性配置信息             |
+| disabled                      | boolean    | false          | 作业是否禁止启动             |
+| overwrite                     | boolean    | false          | 本地配置是否可覆盖注册中心配置      |
 
 ### 核心配置项说明
 
@@ -90,19 +90,19 @@ ElasticJob-Lite 提供了 3 种配置方式，用于不同的使用场景。
 
 **jobShardingStrategyType:**
 
-详情请参见[内置分片策略列表](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding)。
+详情请参见[内置分片策略列表](/cn/user-manual/elasticjob/configuration/built-in-strategy/sharding)。
 
 **jobExecutorServiceHandlerType:**
 
-详情请参见[内置线程池策略列表](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool)。
+详情请参见[内置线程池策略列表](/cn/user-manual/elasticjob/configuration/built-in-strategy/thread-pool)。
 
 **jobErrorHandlerType:**
 
-详情请参见[内置错误处理策略列表](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler)。
+详情请参见[内置错误处理策略列表](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler)。
 
 **props:**
 
-详情请参见[作业属性配置列表](/cn/user-manual/elasticjob-lite/configuration/props)。
+详情请参见[作业属性配置列表](/cn/user-manual/elasticjob/configuration/props)。
 
 **disabled:**
 
diff --git a/docs/content/user-manual/configuration/_index.en.md b/docs/content/user-manual/configuration/_index.en.md
new file mode 100644
index 000000000..c437e417a
--- /dev/null
+++ b/docs/content/user-manual/configuration/_index.en.md
@@ -0,0 +1,136 @@
++++
+pre = "<b>4.1.2 </b>"
+title = "Configuration"
+weight = 2
+chapter = true
++++
+
+Through which developers can quickly and clearly understand the functions provided by ElasticJob.
+
+This chapter is a configuration manual for ElasticJob, which can also be referred to as a dictionary if necessary.
+
+ElasticJob has provided 3 kinds of configuration methods for different situations.
+
+## Registry Center Configuration
+
+### Configuration
+
+| Name                          | Data Type | Default Value | Description                                              |
+|-------------------------------|:----------|:--------------|:---------------------------------------------------------|
+| serverLists                   | String    |               | ZooKeeper server IP list                                 |
+| namespace                     | String    |               | ZooKeeper namespace                                      |
+| baseSleepTimeMilliseconds     | int       | 1000          | The initial value of milliseconds for the retry interval |
+| maxSleepTimeMilliseconds      | String    | 3000          | The maximum value of milliseconds for the retry interval |
+| maxRetries                    | String    | 3             | Maximum number of retries                                |
+| sessionTimeoutMilliseconds    | int       | 60000         | Session timeout in milliseconds                          |
+| connectionTimeoutMilliseconds | int       | 15000         | Connection timeout in milliseconds                       |
+| digest                        | String    | no need       | Permission token to connect to ZooKeeper                 |
+
+### Core Configuration Description
+
+**serverLists:**
+
+Include IP and port, multiple addresses are separated by commas, such as: `host1:2181,host2:2181`
+
+## Job Configuration
+
+### Configuration
+
+| Name                          | Data Type  | Default Value  | Description                                                                         |
+|-------------------------------|:-----------|:---------------|:------------------------------------------------------------------------------------|
+| jobName                       | String     |                | Job name                                                                            |
+| shardingTotalCount            | int        |                | Sharding total count                                                                |
+| cron                          | String     |                | CRON expression, control the job trigger time                                       |
+| timeZone                      | String     |                | time zone of CRON                                                                   |
+| shardingItemParameters        | String     |                | Sharding item parameters                                                            |
+| jobParameter                  | String     |                | Job parameter                                                                       |
+| monitorExecution              | boolean    | true           | Monitor job execution status                                                        |
+| failover                      | boolean    | false          | Enable or disable job failover                                                      |
+| misfire                       | boolean    | true           | Enable or disable the missed task to re-execute                                     |
+| maxTimeDiffSeconds            | int        | -1(no check)   | The maximum value for time difference between server and registry center in seconds |
+| reconcileIntervalMinutes      | int        | 10             | Service scheduling interval in minutes for repairing job server inconsistent state  |
+| jobShardingStrategyType       | String     | AVG_ALLOCATION | Job sharding strategy type                                                          |
+| jobExecutorServiceHandlerType | String     | CPU            | Job thread pool handler type                                                        |
+| jobErrorHandlerType           | String     |                | Job error handler type                                                              |
+| description                   | String     |                | Job description                                                                     |
+| props                         | Properties |                | Job properties                                                                      |
+| disabled                      | boolean    | false          | Enable or disable start the job                                                     |
+| overwrite                     | boolean    | false          | Enable or disable local configuration override registry center configuration        |
+
+### Core Configuration Description
+
+**shardingItemParameters:**
+
+The sequence numbers and parameters of the Sharding items are separated by equal sign, and multiple key-value pairs are separated by commas.
+The Sharding sequence number starts from `0` and can't be greater than or equal to the total number of job fragments.
+For example: `0=a,1=b,2=c`
+
+**jobParameter:**
+
+With this parameter, user can pass parameters for the business method of job scheduling, which is used to implement the job with parameters.
+For example: `Amount of data acquired each time`, `Primary key of the job instance read from the database`, etc.
+
+**monitorExecution:**
+
+When the execution time and interval of each job are very short, it is recommended not to monitor the running status of the job to improve efficiency.
+There is no need to monitor because it is a transient state. User can add data accumulation monitoring by self. And there is no guarantee that the data will be selected repeatedly, idempotency should be achieved in the job.
+If the job execution time and interval time are longer, it is recommended to monitor the job status, and it can guarantee that the data will not be selected repeatedly.
+
+**maxTimeDiffSeconds:**
+
+If the time error exceeds the configured seconds, an exception will be thrown when the job starts.
+
+**reconcileIntervalMinutes:**
+
+In a distributed system, due to network, clock and other reasons, ZooKeeper may be inconsistent with the actual running job. This inconsistency cannot be completely avoided through positive verification.
+It is necessary to start another thread to periodically calibrate the consistency between the registry center and the job status, that is, to maintain the final consistency of ElasticJob.
+
+Less than `1` means no repair is performed.
+
+**jobShardingStrategyType:**
+
+For details, see[Job Sharding Strategy](/en/user-manual/elasticjob/configuration/built-in-strategy/sharding)。
+
+**jobExecutorServiceHandlerType:**
+
+For details, see[Thread Pool Strategy](/en/user-manual/elasticjob/configuration/built-in-strategy/thread-pool)。
+
+**jobErrorHandlerType:**
+
+For details, see[Error Handler Strategy](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler)。
+
+**props:**
+
+For details, see[Job Properties](/en/user-manual/elasticjob/configuration/props)。
+
+**disabled:**
+
+It can be used for deployment, forbid jobs to start, and then start them uniformly after the deployment is completed.
+
+**overwrite:**
+
+If the value is `true`, local configuration override registry center configuration every time the job is started.
+
+## Job Listener Configuration
+
+### Common Listener Configuration
+
+Configuration: no
+
+### Distributed Listener Configuration
+
+Configuration
+
+| Name                           | Data Type    | Default Value  | Description                                                 |
+| ------------------------------ |:------------ |:-------------- |:----------------------------------------------------------- |
+| started-timeout-milliseconds   | long         | Long.MAX_VALUE | The timeout in milliseconds before the last job is executed |
+| completed-timeout-milliseconds | long         | Long.MAX_VALUE | The timeout in milliseconds after the last job is executed  |
+
+## Event Tracing Configuration
+
+### Configuration
+
+| Name    | Data Type      | Default Value | Description                                 |
+| ------- |:-------------- |:------------- |:------------------------------------------- |
+| type    | String         |               | The type of event tracing storage adapter   |
+| storage | Generics Type  |               | The object of event tracing storage adapter |
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/_index.cn.md b/docs/content/user-manual/configuration/built-in-strategy/_index.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/_index.cn.md
rename to docs/content/user-manual/configuration/built-in-strategy/_index.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/_index.en.md b/docs/content/user-manual/configuration/built-in-strategy/_index.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/_index.en.md
rename to docs/content/user-manual/configuration/built-in-strategy/_index.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md b/docs/content/user-manual/configuration/built-in-strategy/error-handler.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md
rename to docs/content/user-manual/configuration/built-in-strategy/error-handler.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md b/docs/content/user-manual/configuration/built-in-strategy/error-handler.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md
rename to docs/content/user-manual/configuration/built-in-strategy/error-handler.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding.cn.md b/docs/content/user-manual/configuration/built-in-strategy/sharding.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding.cn.md
rename to docs/content/user-manual/configuration/built-in-strategy/sharding.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding.en.md b/docs/content/user-manual/configuration/built-in-strategy/sharding.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding.en.md
rename to docs/content/user-manual/configuration/built-in-strategy/sharding.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool.cn.md b/docs/content/user-manual/configuration/built-in-strategy/thread-pool.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool.cn.md
rename to docs/content/user-manual/configuration/built-in-strategy/thread-pool.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool.en.md b/docs/content/user-manual/configuration/built-in-strategy/thread-pool.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool.en.md
rename to docs/content/user-manual/configuration/built-in-strategy/thread-pool.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/java-api.cn.md b/docs/content/user-manual/configuration/java-api.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/java-api.cn.md
rename to docs/content/user-manual/configuration/java-api.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/java-api.en.md b/docs/content/user-manual/configuration/java-api.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/java-api.en.md
rename to docs/content/user-manual/configuration/java-api.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/props.cn.md b/docs/content/user-manual/configuration/props.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/props.cn.md
rename to docs/content/user-manual/configuration/props.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/props.en.md b/docs/content/user-manual/configuration/props.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/configuration/props.en.md
rename to docs/content/user-manual/configuration/props.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.cn.md b/docs/content/user-manual/configuration/spring-boot-starter.cn.md
similarity index 57%
rename from docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.cn.md
rename to docs/content/user-manual/configuration/spring-boot-starter.cn.md
index 824d5615d..f4f8f405b 100644
--- a/docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.cn.md
+++ b/docs/content/user-manual/configuration/spring-boot-starter.cn.md
@@ -4,12 +4,12 @@ weight = 2
 chapter = true
 +++
 
-使用 Spring-boot 需在 pom.xml 文件中添加 elasticjob-lite-spring-boot-starter 模块的依赖。
+使用 Spring-boot 需在 pom.xml 文件中添加 elasticjob-engine-spring-boot-starter 模块的依赖。
 
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-boot-starter</artifactId>
+    <artifactId>elasticjob-engine-spring-boot-starter</artifactId>
     <version>${latest.release.version}</version>
 </dependency>
 ```
@@ -20,16 +20,16 @@ chapter = true
 
 可配置属性：
 
-| 属性名                          | 是否必填 |
-| ------------------------------- |:-------- |
-| server-lists                    | 是       |
-| namespace                       | 是       |
-| base-sleep-time-milliseconds    | 否       |
-| max-sleep-time-milliseconds     | 否       |
-| max-retries                     | 否       |
-| session-timeout-milliseconds    | 否       |
-| connection-timeout-milliseconds | 否       |
-| digest                          | 否       |
+| 属性名                             | 是否必填 |
+|---------------------------------|:-----|
+| server-lists                    | 是    |
+| namespace                       | 是    |
+| base-sleep-time-milliseconds    | 否    |
+| max-sleep-time-milliseconds     | 否    |
+| max-retries                     | 否    |
+| session-timeout-milliseconds    | 否    |
+| connection-timeout-milliseconds | 否    |
+| digest                          | 否    |
 
 配置格式参考：
 
@@ -38,12 +38,12 @@ chapter = true
 elasticjob:
   regCenter:
     serverLists: localhost:6181
-    namespace: elasticjob-lite-springboot
+    namespace: elasticjob-engine-springboot
 ```
 
 **Properties**
 ```
-elasticjob.reg-center.namespace=elasticjob-lite-springboot
+elasticjob.reg-center.namespace=elasticjob-engine-springboot
 elasticjob.reg-center.server-lists=localhost:6181
 ```
 
@@ -53,28 +53,28 @@ elasticjob.reg-center.server-lists=localhost:6181
 
 可配置属性：
 
-| 属性名                            | 是否必填 |
-| --------------------------------- |:-------- |
-| elasticJobClass / elasticJobType  | 是       |
-| cron                              | 否       |
-| timeZone                          | 否       |
-| jobBootstrapBeanName              | 否       |
-| sharding-total-count              | 是       |
-| sharding-item-parameters          | 否       |
-| job-parameter                     | 否       |
-| monitor-execution                 | 否       |
-| failover                          | 否       |
-| misfire                           | 否       |
-| max-time-diff-seconds             | 否       |
-| reconcile-interval-minutes        | 否       |
-| job-sharding-strategy-type        | 否       |
-| job-executor-service-handler-type | 否       |
-| job-error-handler-type            | 否       |
-| job-listener-types                | 否       |
-| description                       | 否       |
-| props                             | 否       |
-| disabled                          | 否       |
-| overwrite                         | 否       |
+| 属性名                               | 是否必填 |
+|-----------------------------------|:-----|
+| elasticJobClass / elasticJobType  | 是    |
+| cron                              | 否    |
+| timeZone                          | 否    |
+| jobBootstrapBeanName              | 否    |
+| sharding-total-count              | 是    |
+| sharding-item-parameters          | 否    |
+| job-parameter                     | 否    |
+| monitor-execution                 | 否    |
+| failover                          | 否    |
+| misfire                           | 否    |
+| max-time-diff-seconds             | 否    |
+| reconcile-interval-minutes        | 否    |
+| job-sharding-strategy-type        | 否    |
+| job-executor-service-handler-type | 否    |
+| job-error-handler-type            | 否    |
+| job-listener-types                | 否    |
+| description                       | 否    |
+| props                             | 否    |
+| disabled                          | 否    |
+| overwrite                         | 否    |
 
 **elasticJobClass 与 elasticJobType 互斥，每项作业只能有一种类型**
 
@@ -89,7 +89,7 @@ elasticjob.reg-center.server-lists=localhost:6181
 elasticjob:
   jobs:
     simpleJob:
-      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob
+      elasticJobClass: org.apache.shardingsphere.elasticjob.engine.example.job.SpringBootSimpleJob
       cron: 0/5 * * * * ?
       timeZone: GMT+08:00
       shardingTotalCount: 3
@@ -110,7 +110,7 @@ elasticjob:
 
 **Properties**
 ```
-elasticjob.jobs.simpleJob.elastic-job-class=org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob
+elasticjob.jobs.simpleJob.elastic-job-class=org.apache.shardingsphere.elasticjob.engine.example.job.SpringBootSimpleJob
 elasticjob.jobs.simpleJob.cron=0/5 * * * * ?
 elasticjob.jobs.simpleJob.timeZone=GMT+08:00
 elasticjob.jobs.simpleJob.sharding-total-count=3
@@ -129,11 +129,11 @@ elasticjob.jobs.manualScriptJob.props.script.command.line=echo Manual SCRIPT Job
 
 配置前缀：`elasticjob.tracing`
 
-| 属性名            | 可选值    | 是否必填  |描述       |
-| -----------------|:-------- |:------- |:--------- |
-| type             | RDB      | 否       |          |
-| includeJobNames  |          | 否       | 作业白名单 |
-| excludeJobNames  |          | 否       | 作业黑名单 |
+| 属性名             | 可选值 | 是否必填 | 描述    |
+|-----------------|:----|:-----|:------|
+| type            | RDB | 否    |       |
+| includeJobNames |     | 否    | 作业白名单 |
+| excludeJobNames |     | 否    | 作业黑名单 |
 
 **includeJobNames 与 excludeJobNames 互斥，事件追踪配置只能有一种属性**
 
@@ -162,10 +162,10 @@ elasticjob.tracing.excludeJobNames=[ job-name ]
 
 配置前缀：`elasticjob.dump`
 
-| 属性名           | 缺省值        | 是否必填 |
-| -----------------|:------------- |:-------- |
-| enabled          | true          | 否       |
-| port             |               | 是       |
+| 属性名     | 缺省值  | 是否必填 |
+|---------|:-----|:-----|
+| enabled | true | 否    |
+| port    |      | 是    |
 
 Spring Boot 提供了作业信息导出端口快速配置，只需在配置中指定导出所用的端口号即可启用导出功能。
 如果没有指定端口号，导出功能不会生效。
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.en.md b/docs/content/user-manual/configuration/spring-boot-starter.en.md
similarity index 82%
rename from docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.en.md
rename to docs/content/user-manual/configuration/spring-boot-starter.en.md
index eb403a7eb..ae7afd8a7 100644
--- a/docs/content/user-manual/elasticjob-lite/configuration/spring-boot-starter.en.md
+++ b/docs/content/user-manual/configuration/spring-boot-starter.en.md
@@ -4,12 +4,12 @@ weight = 2
 chapter = true
 +++
 
-To use the Spring boot, user need to add the dependency of the `elasticjob-lite-spring-boot-starter` module in the `pom.xml` file.
+To use the Spring boot, user need to add the dependency of the `elasticjob-engine-spring-boot-starter` module in the `pom.xml` file.
 
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-boot-starter</artifactId>
+    <artifactId>elasticjob-engine-spring-boot-starter</artifactId>
     <version>${latest.release.version}</version>
 </dependency>
 ```
@@ -21,7 +21,7 @@ Prefix: `elasticjob.reg-center`
 Configuration: 
 
 | Property name                   | Required |
-| ------------------------------- |:-------- |
+|---------------------------------|:---------|
 | server-lists                    | Yes      |
 | namespace                       | Yes      |
 | base-sleep-time-milliseconds    | No       |
@@ -38,12 +38,12 @@ Reference:
 elasticjob:
   regCenter:
     serverLists: localhost:6181
-    namespace: elasticjob-lite-springboot
+    namespace: elasticjob-engine-springboot
 ```
 
 **Properties**
 ```
-elasticjob.reg-center.namespace=elasticjob-lite-springboot
+elasticjob.reg-center.namespace=elasticjob-engine-springboot
 elasticjob.reg-center.server-lists=localhost:6181
 ```
 
@@ -54,7 +54,7 @@ Prefix: `elasticjob.jobs`
 Configuration:
 
 | Property name                     | Required |
-| --------------------------------- |:-------- |
+|-----------------------------------|:---------|
 | elasticJobClass / elasticJobType  | Yes      |
 | cron                              | No       |
 | timeZone                          | No       |
@@ -90,7 +90,7 @@ Reference:
 elasticjob:
   jobs:
     simpleJob:
-      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob
+      elasticJobClass: org.apache.shardingsphere.elasticjob.engine.example.job.SpringBootSimpleJob
       cron: 0/5 * * * * ?
       timeZone: GMT+08:00
       shardingTotalCount: 3
@@ -111,7 +111,7 @@ elasticjob:
 
 **Properties**
 ```
-elasticjob.jobs.simpleJob.elastic-job-class=org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob
+elasticjob.jobs.simpleJob.elastic-job-class=org.apache.shardingsphere.elasticjob.engine.example.job.SpringBootSimpleJob
 elasticjob.jobs.simpleJob.cron=0/5 * * * * ?
 elasticjob.jobs.simpleJob.timeZone=GMT+08:00
 elasticjob.jobs.simpleJob.sharding-total-count=3
@@ -130,11 +130,11 @@ elasticjob.jobs.manualScriptJob.props.script.command.line=echo Manual SCRIPT Job
 
 Prefix: `elasticjob.tracing`
 
-| Property name    | Options  | Required | Description       |
-| -----------------|:---------|:-------- |:----------------- |
-| type             | RDB      | No       |                   |
-| includeJobNames  |          | No       | allow list of job |
-| excludeJobNames  |          | No       | block list of job |
+| Property name   | Options | Required | Description       |
+|-----------------|:--------|:---------|:------------------|
+| type            | RDB     | No       |                   |
+| includeJobNames |         | No       | allow list of job |
+| excludeJobNames |         | No       | block list of job |
 
 **"includeJobNames" and "excludeJobNames" are mutually exclusive.**
 
@@ -163,10 +163,10 @@ elasticjob.tracing.excludeJobNames=[ job-name ]
 
 Prefix: `elasticjob.dump`
 
-| Property name    | Default value | Required |
-| -----------------|:------------- |:-------- |
-| enabled          | true          | No       |
-| port             |               | Yes      |
+| Property name | Default value | Required |
+|---------------|:--------------|:---------|
+| enabled       | true          | No       |
+| port          |               | Yes      |
 
 Designate a port as dump port in configurations. The Spring Boot Starter will enable dumping automatically.
 If the port for job dump was missing, dump won't be enabled.
diff --git a/docs/content/user-manual/configuration/spring-namespace.cn.md b/docs/content/user-manual/configuration/spring-namespace.cn.md
new file mode 100644
index 000000000..af51309b2
--- /dev/null
+++ b/docs/content/user-manual/configuration/spring-namespace.cn.md
@@ -0,0 +1,90 @@
++++
+title = "Spring 命名空间"
+weight = 3
+chapter = true
++++
+
+使用 Spring 命名空间需在 pom.xml 文件中添加 elasticjob-engine-spring 模块的依赖。
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere.elasticjob</groupId>
+    <artifactId>elasticjob-engine-spring-namespace</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+命名空间：[http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd](http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd)
+
+## 注册中心配置
+
+\<elasticjob:zookeeper />
+
+可配置属性：
+
+| 属性名                             | 是否必填 |
+|---------------------------------|:-----|
+| id                              | 是    |
+| server-lists                    | 是    |
+| namespace                       | 是    |
+| base-sleep-time-milliseconds    | 否    |
+| max-sleep-time-milliseconds     | 否    |
+| max-retries                     | 否    |
+| session-timeout-milliseconds    | 否    |
+| connection-timeout-milliseconds | 否    |
+| digest                          | 否    |
+
+## 作业配置
+
+\<elasticjob:job />
+
+可配置属性：
+
+| 属性名                               | 是否必填 |
+|-----------------------------------|:-----|
+| id                                | 是    |
+| class                             | 否    |
+| job-ref                           | 否    |
+| registry-center-ref               | 是    |
+| tracing-ref                       | 否    |
+| cron                              | 是    |
+| timeZone                          | 否    |
+| sharding-total-count              | 是    |
+| sharding-item-parameters          | 否    |
+| job-parameter                     | 否    |
+| monitor-execution                 | 否    |
+| failover                          | 否    |
+| misfire                           | 否    |
+| max-time-diff-seconds             | 否    |
+| reconcile-interval-minutes        | 否    |
+| job-sharding-strategy-type        | 否    |
+| job-executor-service-handler-type | 否    |
+| job-error-handler-type            | 否    |
+| job-listener-types                | 否    |
+| description                       | 否    |
+| props                             | 否    |
+| disabled                          | 否    |
+| overwrite                         | 否    |
+
+## 事件追踪配置
+
+\<elasticjob:rdb-tracing />
+
+可配置属性：
+
+| 属性名             | 类型         | 是否必填 | 缺省值 | 描述              |
+|-----------------|:-----------|:-----|:----|:----------------|
+| id              | String     | 是    |     | 事件追踪 Bean 主键    |
+| data-source-ref | DataSource | 是    |     | 事件追踪数据源 Bean 名称 |
+
+## 快照导出配置
+
+\<elasticjob:snapshot />
+
+可配置属性：
+
+| 属性名                 | 类型     | 是否必填 | 缺省值 | 描述                                                             |
+|---------------------|:-------|:-----|:----|:---------------------------------------------------------------|
+| id                  | String | 是    |     | 监控服务在 Spring 容器中的主键                                            |
+| registry-center-ref | String | 是    |     | 注册中心 Bean 的引用，需引用 reg:zookeeper 的声明                            |
+| dump-port           | String | 是    |     | 导出作业信息数据端口<br />使用方法: echo "dump@jobName" \| nc 127.0.0.1 9888 |
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.en.md b/docs/content/user-manual/configuration/spring-namespace.en.md
similarity index 71%
rename from docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.en.md
rename to docs/content/user-manual/configuration/spring-namespace.en.md
index 34301a261..4ece71528 100644
--- a/docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.en.md
+++ b/docs/content/user-manual/configuration/spring-namespace.en.md
@@ -4,12 +4,12 @@ weight = 2
 chapter = true
 +++
 
-To use the Spring namespace, user need to add the dependency of the `elasticjob-lite-spring` module in the `pom.xml` file.
+To use the Spring namespace, user need to add the dependency of the `elasticjob-engine-spring` module in the `pom.xml` file.
 
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-namespace</artifactId>
+    <artifactId>elasticjob-engine-spring-namespace</artifactId>
     <version>${latest.release.version}</version>
 </dependency>
 ```
@@ -23,7 +23,7 @@ Spring namespace: [http://shardingsphere.apache.org/schema/elasticjob/elasticjob
 Configuration: 
 
 | Name                            | Required |
-| ------------------------------- |:-------- |
+|---------------------------------|:---------|
 | id                              | Yes      |
 | server-lists                    | Yes      |
 | namespace                       | Yes      |
@@ -41,7 +41,7 @@ Configuration:
 Configuration: 
 
 | Name                              | Required |
-| --------------------------------- |:-------- |
+|-----------------------------------|:---------|
 | id                                | Yes      |
 | class                             | No       |
 | job-ref                           | No       |
@@ -72,7 +72,7 @@ Configuration:
 Configuration:
 
 | Name            | Data Type  | Required | Default Value | Description                                     |
-| --------------- |:---------- |:-------- |:------------- |:-------------------------------------------     |
+|-----------------|:-----------|:---------|:--------------|:------------------------------------------------|
 | id              | String     | Yes      |               | The bean's identify of the event tracing        |
 | data-source-ref | DataSource | No       |               | The bean's name of the event tracing DataSource |
 
@@ -82,8 +82,8 @@ Configuration:
 
 Configuration: 
 
-| Name                | Data Type   | Required | Default Value | Description                                                                     |
-| ------------------- |:----------- |:-------- |:------------- |:------------------------------------------------------------------------------- |
-| id                  | String      | Yes      |               | The identify of the monitoring service in the Spring container                  |
-| registry-center-ref | String      | Yes      |               | Registry center bean's reference, need to the statement of the `reg:zookeeper`  |
-| dump-port           | String      | Yes      |               | Job dump port<br />usage: echo "dump@jobName" \| nc 127.0.0.1 9888             |
+| Name                | Data Type | Required | Default Value | Description                                                                    |
+|---------------------|:----------|:---------|:--------------|:-------------------------------------------------------------------------------|
+| id                  | String    | Yes      |               | The identify of the monitoring service in the Spring container                 |
+| registry-center-ref | String    | Yes      |               | Registry center bean's reference, need to the statement of the `reg:zookeeper` |
+| dump-port           | String    | Yes      |               | Job dump port<br />usage: echo "dump@jobName" \| nc 127.0.0.1 9888             |
diff --git a/docs/content/user-manual/elasticjob-cloud/_index.cn.md b/docs/content/user-manual/elasticjob-cloud/_index.cn.md
deleted file mode 100644
index 5f8f7c396..000000000
--- a/docs/content/user-manual/elasticjob-cloud/_index.cn.md
+++ /dev/null
@@ -1,23 +0,0 @@
-+++
-pre = "<b>4.2. </b>"
-title = "ElasticJob-Cloud"
-weight = 2
-chapter = true
-+++
-
-## 简介
-
-ElasticJob-Cloud 采用自研 Mesos Framework 的解决方案，额外提供资源治理、应用分发以及进程隔离等功能。
-
-![ElasticJob-Cloud Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_cloud.png)
-
-## 对比
-
-|           | *ElasticJob-Lite* | *ElasticJob-Cloud* |
-| --------- | ----------------- | ------------------ |
-| 无中心化   | 是                | `否`                |
-| 资源分配   | 不支持             | `支持`              |
-| 作业模式   | 常驻               | `常驻 + 瞬时`       |
-| 部署依赖   | ZooKeeper         | `ZooKeeper + Mesos` |
-
-ElasticJob-Cloud 的优势在于对资源细粒度治理，适用于需要削峰填谷的大数据系统。
diff --git a/docs/content/user-manual/elasticjob-cloud/_index.en.md b/docs/content/user-manual/elasticjob-cloud/_index.en.md
deleted file mode 100644
index c5975608e..000000000
--- a/docs/content/user-manual/elasticjob-cloud/_index.en.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-pre = "<b>4.2. </b>"
-title = "ElasticJob-Cloud"
-weight = 2
-chapter = true
-+++
-
-## Introduction
-
-ElasticJob-Cloud uses Mesos to manage and isolate resources.
-
-![ElasticJob-Cloud Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_cloud.png)
-
-## Comparison
-
-|                   | *ElasticJob-Lite* | *ElasticJob-Cloud*   |
-| ----------------- | ----------------- | -------------------- |
-| Decentralization  | Yes               | `No`                 |
-| Resource Assign   | No                | `Yes`                |
-| Job Execution     | Daemon            | `Daemon + Transient` |
-| Deploy Dependency | ZooKeeper         | `ZooKeeper + Mesos`  |
-
-The advantages of ElasticJob-Cloud are resource management and isolation, 
-which is suitable for big data application with starve resource environment.
diff --git a/docs/content/user-manual/elasticjob-cloud/configuration/_index.cn.md b/docs/content/user-manual/elasticjob-cloud/configuration/_index.cn.md
deleted file mode 100644
index ce110b964..000000000
--- a/docs/content/user-manual/elasticjob-cloud/configuration/_index.cn.md
+++ /dev/null
@@ -1,207 +0,0 @@
-+++
-pre = "<b>4.2.2. </b>"
-title = "配置手册"
-weight = 2
-chapter = true
-+++
-
-ElasticJob-Cloud 提供应用发布及作业注册等 RESTful API， 可通过 curl 操作。
-
-请求 url 前缀为 `/api`
-
-## 鉴权 API
-
-### 获取 AccessToken
-
-url: login
-
-方法：POST
-
-参数类型：application/json
-
-参数列表：
-
-| 属性名                   | 类型    | 是否必填 | 缺省值     | 描述                           |
-| ----------------------- |:------- |:------- |:--------- |:----------------------------- |
-| username                | String  | 是      |           | API 鉴权用户名                 |
-| password                | String  | 是      |           | API 鉴权密码                 |
-
-响应体：
-
-| 属性名                   | 类型      | 描述                           |
-| ----------------------- |:-------  |:----------------------------- |
-| accessToken             | String   | API 鉴权 token              |
-
-示例：
-
-```bash
-curl -H "Content-Type: application/json" -X POST http://elasticjob_cloud_host:8899/api/login -d '{"username": "root", "password": "pwd"}'
-```
-
-响应体：
-
-```json
-{"accessToken":"some_token"}
-```
-
-## 应用 API
-
-### 发布应用
-
-url：app
-
-方法：POST
-
-参数类型：application/json
-
-参数列表：
-
-| 属性名                   | 类型    | 是否必填 | 缺省值     | 描述                           |
-| ----------------------- |:------- |:------- |:--------- |:----------------------------- |
-| appName                 | String  | 是      |           | 作业应用名称                    |
-| appURL                  | String  | 是      |           | 作业应用所在路径                 |
-| cpuCount                | double  | 否      | 1         | 作业应用启动所需要的 CPU 数量     |
-| memoryMB                | double  | 否      | 128       | 作业应用启动所需要的内存 MB       |
-| bootstrapScript         | String  | 是      |           | 启动脚本                        |
-| appCacheEnable          | boolean | 否      | true      | 每次执行作业时是否从缓存中读取应用 |
-| eventTraceSamplingCount | int     | 否      | 0（不采样）| 常驻作业事件采样率统计条数         |
-
-参数详细说明：
-
-**appName:**
-
-为 ElasticJob-Cloud 的作业应用唯一标识。
-
-**appURL:**
-
-必须提供可以通过网络访问的路径。
-
-**bootstrapScript:**
-
-如：bin\start.sh
-
-**appCacheEnable:**
-
-禁用则每次执行任务均从应用仓库下载应用至本地。
-
-**eventTraceSamplingCount:**
-
-为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行 N 次，才会记录作业执行及追踪相关数据。
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d '{"appName":"my_app","appURL":"http://app_host:8080/my-job.tar.gz","cpuCount":0.1,"memoryMB":64.0,"bootstrapScript":"bin/start.sh","appCacheEnable":true,"eventTraceSamplingCount":0}' http://elastic_job_cloud_host:8899/api/app
-```
-
-### 修改应用配置
-
-url：app
-
-方法：PUT
-
-参数类型：application/json
-
-参数列表：
-
-| 属性名                   | 类型    | 是否必填 | 缺省值     | 描述                             |
-| ----------------------- |:------- |:------- |:--------- |:------------------------------- |
-| appName                 | String  | 是      |           | 作业应用名称                     |
-| appCacheEnable          | boolean | 是      | true      | 每次执行作业时是否从缓存中读取应用  |
-| eventTraceSamplingCount | int     | 否      | 0（不采样）| 常驻作业事件采样率统计条数         |
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X PUT -d '{"appName":"my_app","appCacheEnable":true}' http://elastic_job_cloud_host:8899/api/app
-```
-
-## 作业 API
-
-### 注册作业
-
-url：job/register
-
-方法：POST
-
-参数类型：application/json
-
-参数列表：
-
-| 属性名                         | 类型       | 是否必填 | 缺省值  | 描述                                               |
-| ----------------------------- |:---------- |:------- |:------ |:------------------------------------------------- |
-| appName                       | String     | 是      |        | 作业应用名称                                        |
-| cpuCount                      | double     | 是      |        | 单片作业所需要的 CPU 数量，最小值为 0.001             |
-| memoryMB                      | double     | 是      |        | 单片作业所需要的内存 MB，最小值为 1                   |
-| jobExecutionType              | Enum       | 是      |        | 作业执行类型。TRANSIENT 为瞬时作业，DAEMON 为常驻作业 |
-| jobName                       | String     | 是      |        | 作业名称                                          |
-| cron                          | String     | 否      |        | cron 表达式，用于配置作业触发时间                    |
-| shardingTotalCount            | int        | 是      |        | 作业分片总数                                       |
-| shardingItemParameters        | String     | 否      |        | 自定义分片参数                                     |
-| jobParameter                  | String     | 否      |        | 作业自定义参数                                     |
-| failover                      | boolean    | 否      | false  | 是否开启失效转移                                    |
-| misfire                       | boolean    | 否      | false  | 是否开启错过任务重新执行                             |
-| jobExecutorServiceHandlerType | boolean    | 否      | false  | 作业线程池处理策略                                  |
-| jobErrorHandlerType           | boolean    | 否      | false  | 作业错误处理策略                                    |
-| description                   | String     | 否      |        | 作业描述信息                                        |
-| props                         | Properties | 否      |        | 作业属性配置信息                                     |
-
-使用脚本类型的瞬时作业可直接将脚本上传至 appURL，而无需打成 tar 包。
-如果只有单个脚本文件可无需压缩。
-如是复杂脚本应用，仍可上传 tar 包，支持各种常见压缩格式。
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d '{"appName":"my_app","cpuCount":0.1,"memoryMB":64.0,"jobExecutionType":"TRANSIENT","jobName":"my_job","cron":"0/5 * * * * ?","shardingTotalCount":5,"failover":true,"misfire":true}' http://elastic_job_cloud_host:8899/api/job/register
-```
-
-### 修改作业配置
-
-url：job/update
-
-方法：PUT
-
-参数类型：application/json
-
-参数：同注册作业
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X PUT -d '{"appName":"my_app","jobName":"my_job","cpuCount":0.1,"memoryMB":64.0,"jobExecutionType":"TRANSIENT","cron":"0/5 * * * * ?","shardingTotalCount":5,"failover":true,"misfire":true}' http://elastic_job_cloud_host:8899/api/job/update
-```
-
-### 注销作业
-
-url：job/deregister
-
-方法：DELETE
-
-参数类型：application/json
-
-参数：作业名称
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X DELETE -d 'my_job' http://elastic_job_cloud_host:8899/api/job/deregister
-```
-
-### 触发一次作业
-
-url：job/trigger
-
-方法：POST
-
-参数类型：application/json
-
-参数：作业名称
-
-说明：即事件驱动，通过调用 API 而非定时的触发作业。目前仅对瞬时作业生效。
-
-示例：
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d 'my_job' http://elastic_job_cloud_host:8899/api/job/trigger
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/configuration/_index.en.md b/docs/content/user-manual/elasticjob-cloud/configuration/_index.en.md
deleted file mode 100644
index 79eb0b8e0..000000000
--- a/docs/content/user-manual/elasticjob-cloud/configuration/_index.en.md
+++ /dev/null
@@ -1,208 +0,0 @@
-+++
-pre = "<b>4.2.2. </b>"
-title = "Configuration"
-weight = 2
-chapter = true
-+++
-
-ElasticJob-Cloud provides RESTful APIs such as application publishing and job registration, which can be operated by curl.
-
-Request URL prefix is `/api`
-
-## Authentication API
-
-### Get AccessToken
-
-url: login
-
-Method: POST
-
-Content type: application/json
-
-Parameter list:
-
-| Property name           | Type    | Required or not | Default value  | Description                                                  |
-| ----------------------- |:------- |:--------------- |:-------------- |:------------------------------------------------------------ |
-| username                | String  | Yes             |                | API authentication username                                  |
-| password                | String  | Yes             |                | API authentication password                                  |
-
-Response parameter:
-
-| Property name           | Type     | Description                                                  |
-| ----------------------- |:-------  |:----------------------------- |
-| accessToken             | String   | API authentication token      |
-
-Example:
-
-```bash
-curl -H "Content-Type: application/json" -X POST http://elasticjob_cloud_host:8899/api/login -d '{"username": "root", "password": "pwd"}'
-```
-
-Response body:
-
-```json
-{"accessToken":"some_token"}
-```
-
-
-## Application API
-
-### Publish application
-
-url: app
-
-Method: POST
-
-Parameter type: application/json
-
-Parameter list: 
-
-| Property name           | Type    | Required or not | Default value  | Description                                                  |
-| ----------------------- |:------- |:--------------- |:-------------- |:------------------------------------------------------------ |
-| appName                 | String  | Yes             |                | Job application name                                         |
-| appURL                  | String  | Yes             |                | Path of job application                                      |
-| cpuCount                | double  | No              | 1              | The number of CPUs required for the job application to start |
-| memoryMB                | double  | No              | 128            | MB of memory required to start the job application           |
-| bootstrapScript         | String  | Yes             |                | Boot script                                                  |
-| appCacheEnable          | boolean | No              | true           | Whether to read the application from the cache every time the job is executed |
-| eventTraceSamplingCount | int     | No              | 0 (no sampling)| Number of resident job event sampling rate statistics        |
-
-Detailed parameter description: 
-
-**appName:**
-
-It is the unique identifier of ElasticJob-Cloud's job application.
-
-**appURL:**
-
-A path that can be accessed through the network must be provided.
-
-**bootstrapScript:**
-
-Example: bin\start.sh
-
-**appCacheEnable:**
-
-Disabled, every time the task is executed, the application will be downloaded from the application repository to the local.
-
-**eventTraceSamplingCount:**
-
-To avoid excessive data volume, you can configure the sampling rate for frequently scheduled resident jobs, that is, every N times the job is executed, the job execution and tracking related data will be recorded.
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d '{"appName":"my_app","appURL":"http://app_host:8080/my-job.tar.gz","cpuCount":0.1,"memoryMB":64.0,"bootstrapScript":"bin/start.sh","appCacheEnable":true,"eventTraceSamplingCount":0}' http://elastic_job_cloud_host:8899/api/app
-```
-
-### Modify application configuration
-
-url: app
-
-Method: PUT
-
-Parameter type: application/json
-
-Parameter list: 
-
-| Property name           | Type    | Required or not | Default value      | Description                                          |
-| ----------------------- |:------- |:--------------- |:------------------ |:---------------------------------------------------- |
-| appName                 | String  | Yes             |                    | Job application name                                 |
-| appCacheEnable          | boolean | Yes             | true               | Whether to read the application from the cache every time the job is executed |
-| eventTraceSamplingCount | int     | No              | 0 (no sampling)    | Number of resident job event sampling rate statistics|
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X PUT -d '{"appName":"my_app","appCacheEnable":true}' http://elastic_job_cloud_host:8899/api/app
-```
-
-## Job API
-
-### Register job
-
-url: job/register
-
-Method: POST
-
-Parameter type: application/json
-
-Parameter list: 
-
-| Property name                 | Type       | Required or not  | Default value  | Description                                                                            |
-| ----------------------------- |:---------- |:---------------- |:-------------- |:-------------------------------------------------------------------------------------- |
-| appName                       | String     | Yes              |                | Job application name                                                                   |
-| cpuCount                      | double     | Yes              |                | The number of CPUs required for a single chip operation, the minimum value is 0.001    |
-| memoryMB                      | double     | Yes              |                | The memory MB required for a single chip operation, the minimum is 1                   |
-| jobExecutionType              | Enum       | Yes              |                | Job execution type. TRANSIENT is a transient operation, DAEMON is a resident operation |
-| jobName                       | String     | Yes              |                | Job name                                                                               |
-| cron                          | String     | No               |                | cron expression, used to configure job trigger time                                    |
-| shardingTotalCount            | int        | Yes              |                | Total number of job shards                                                             |
-| shardingItemParameters        | String     | No               |                | Custom sharding parameters                                                             |
-| jobParameter                  | String     | No               |                | Job custom parameters                                                                  |
-| failover                      | boolean    | No               | false          | Whether to enable failover                                                             |
-| misfire                       | boolean    | No               | false          | Whether to enable missed tasks to re-execute                                           |
-| jobExecutorServiceHandlerType | boolean    | No               | false          | Job thread pool processing strategy                                                    |
-| jobErrorHandlerType           | boolean    | No               | false          | Job error handling strategy                                                            |
-| description                   | String     | No               |                | Job description information                                                            |
-| props                         | Properties | No               |                | Job property configuration information                                                 |
-
-Use the script type instantaneous job to upload the script directly to appURL without tar package.
-If there is only a single script file, no compression is required.
-If it is a complex script application, you can still upload a tar package and support various common compression formats.
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d '{"appName":"my_app","cpuCount":0.1,"memoryMB":64.0,"jobExecutionType":"TRANSIENT","jobName":"my_job","cron":"0/5 * * * * ?","shardingTotalCount":5,"failover":true,"misfire":true}' http://elastic_job_cloud_host:8899/api/job/register
-```
-
-### update job configuration
-
-url: job/update
-
-Method: PUT
-
-Parameter type: application/json
-
-Parameters: same as registration job
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X PUT -d '{"appName":"my_app","jobName":"my_job","cpuCount":0.1,"memoryMB":64.0,"jobExecutionType":"TRANSIENT","cron":"0/5 * * * * ?","shardingTotalCount":5,"failover":true,"misfire":true}' http://elastic_job_cloud_host:8899/api/job/update
-```
-
-### Deregister Job
-
-url: job/deregister
-
-Method: DELETE
-
-Parameter type: application/json
-
-Parameters: Job name
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X DELETE -d 'my_job' http://elastic_job_cloud_host:8899/api/job/deregister
-```
-
-### Trigger job
-
-url: job/trigger
-
-Method: POST
-
-Parameter type: application/json
-
-Parameters: Job name
-
-Description: Event-driven, triggering jobs by calling API instead of timing. Currently only valid for transient operations.
-
-Example: 
-
-```bash
-curl -l -H "Content-type: application/json" -X POST -d 'my_job' http://elastic_job_cloud_host:8899/api/job/trigger
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/_index.cn.md b/docs/content/user-manual/elasticjob-cloud/operation/_index.cn.md
deleted file mode 100644
index 30923b4d7..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>4.2.3. </b>"
-title = "运维手册"
-weight = 3
-chapter = true
-+++
-
-本章节是 ElasticJob-Cloud 的运维参考手册。
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/_index.en.md b/docs/content/user-manual/elasticjob-cloud/operation/_index.en.md
deleted file mode 100644
index 14495df08..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/_index.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>4.2.3. </b>"
-title = "Operation"
-weight = 3
-chapter = true
-+++
-
-This chapter is an operation manual for ElasticJob-Cloud.
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.cn.md b/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.cn.md
deleted file mode 100755
index f97b6cda6..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.cn.md
+++ /dev/null
@@ -1,45 +0,0 @@
-+++
-title = "部署指南"
-weight = 1
-chapter = true
-+++
-
-## 调度器部署步骤
-
-1. 启动 ElasticJob-Cloud-Scheduler 和 Mesos 指定作为注册中心的 ZooKeeper
-1. 启动 Mesos Master 和 Mesos Agent
-1. 解压 `elasticjob-cloud-scheduler-${version}.tar.gz`
-1. 执行 `bin\start.sh` 脚本启动 elasticjob-cloud-scheduler
-
-## 作业部署步骤
-
-1. 确保 ZooKeeper, Mesos Master/Agent 以及 ElasticJob-Cloud-Scheduler 已正确启动
-1. 将打包作业的 tar.gz 文件放至网络可访问的位置，如：ftp或http。打包的 tar.gz 文件中 `main` 方法需要调用 ElasticJob-Cloud 提供的 `JobBootstrap.execute` 方法
-1. 使用 curl 命令调用 RESTful API 发布应用及注册作业。详情请参见：[配置指南](/cn/user-manual/elasticjob-cloud/configuration)
-
-## 调度器配置步骤
-
-可修改 `conf\elasticjob-cloud-scheduler.properties` 文件变更系统配置。
-
-配置项说明：
-
-| 属性名称                  | 是否必填 | 默认值                     | 描述                                                                                       |
-| ------------------------ |:------- |:------------------------- |:------------------------------------------------------------------------------------------ |
-| hostname                 | 是      |                           | 服务器真实的 IP 或 hostname，不能是 127.0.0.1 或 localhost                                    |
-| user                     | 否      |                           | Mesos framework 使用的用户名称                                                               |
-| mesos_url                | 是      | zk://127.0.0.1:2181/mesos | Mesos 所使用的 ZooKeeper 地址                                                                |
-| zk_servers               | 是      | 127.0.0.1:2181            | ElasticJob-Cloud 所使用的 ZooKeeper 地址                                                     |
-| zk_namespace             | 否      | elasticjob-cloud          | ElasticJob-Cloud 所使用的 ZooKeeper 命名空间                                                  |
-| zk_digest                | 否      |                           | ElasticJob-Cloud 所使用的 ZooKeeper 登录凭证                                                  |
-| http_port                | 是      | 8899                      | RESTful API 所使用的端口号                                                                    |
-| job_state_queue_size     | 是      | 10000                     | 堆积作业最大值, 超过此阀值的堆积作业将直接丢弃。阀值过大可能会导致 ZooKeeper 无响应，应根据实测情况调整 |
-| event_trace_rdb_driver   | 否      |                           | 作业事件追踪数据库驱动                                                                         |
-| event_trace_rdb_url      | 否      |                           | 作业事件追踪数据库 URL                                                                         |
-| event_trace_rdb_username | 否      |                           | 作业事件追踪数据库用户名                                                                       |
-| event_trace_rdb_password | 否      |                           | 作业事件追踪数据库密码                                                                         |
-| auth_username            | 否      | root                      | API 鉴权用户名                                                                               |
-| auth_password            | 否      | pwd                       | API 鉴权密码                                                                                 |
-
-***
-
-* 停止：不提供停止脚本，可直接使用 kill 命令终止进程。
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.en.md b/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.en.md
deleted file mode 100755
index 3d8d316cd..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/deploy-guide.en.md
+++ /dev/null
@@ -1,45 +0,0 @@
-+++
-title = "Deploy Guide"
-weight = 1
-chapter = true
-+++
-
-## Scheduler deployment steps
-
-1. Start ElasticJob-Cloud-Scheduler and Mesos, and specify ZooKeeper as the registry.
-2. Start Mesos Master and Mesos Agent.
-3. Unzip `elasticjob-cloud-scheduler-${version}.tar.gz`.
-4. Run `bin\start.sh` to start ElasticJob-Cloud-Scheduler.
-
-## Job deployment steps
-
-1. Ensure that ZooKeeper, Mesos Master/Agent and ElasticJob-Cloud-Scheduler have been started correctly.
-2. Place the tar.gz file of the packaging job in a network accessible location, such as ftp or http. The `main` method in the packaged tar.gz file needs to call the `JobBootstrap.execute` method provided by ElasticJob-Cloud.
-3. Use curl command to call RESTful API to publish applications and register jobs. For details: [Configuration](/en/user-manual/elasticjob-cloud/configuration)
-
-## Scheduler configuration steps
-
-Modify the `conf\elasticjob-cloud-scheduler.properties` to change the system configuration.
-
-Configuration description:
-
-| Attribute Name           | Required | Default                  | Description                                                                                 |
-| ------------------------ |:-------  |:------------------------- |:------------------------------------------------------------------------------------------ |
-| hostname                 | yes      |                           | The real IP or hostname of the server, cannot be 127.0.0.1 or localhost                    |
-| user                     | no       |                           | User name used by Mesos framework                                                          |
-| mesos_url                | yes      | zk://127.0.0.1:2181/mesos | Zookeeper url used by Mesos                                                                |
-| zk_servers               | yes      | 127.0.0.1:2181            | Zookeeper address used by ElasticJob-Cloud                                                 |
-| zk_namespace             | no       | elasticjob-cloud          | Zookeeper namespace used by ElasticJob-Cloud                                               |
-| zk_digest                | no       |                           | Zookeeper digest used by ElasticJob-Cloud                                                  |
-| http_port                | yes      | 8899                      | Port used by RESTful API                                                                   |
-| job_state_queue_size     | yes      | 10000                     | The maximum value of the accumulation job, the accumulation job exceeding this threshold will be discarded. Too large value may cause ZooKeeper to become unresponsive, and should be adjusted according to the actual measurement |
-| event_trace_rdb_driver   | no       |                           | Driver of Job event tracking database                                                      |
-| event_trace_rdb_url      | no       |                           | Url of Job event tracking database                                                         |
-| event_trace_rdb_username | no       |                           | Username of Job event tracking database                                                    |
-| event_trace_rdb_password | no       |                           | Password of Job event tracking database                                                     |
-| auth_username            | no       | root                      | API authentication username                                                                |
-| auth_password            | no       | pwd                       | API authentication password                                                                |
-
-***
-
-* Stop: No stop script is provided, you can directly use the kill command to terminate the process.
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/high-availability.cn.md b/docs/content/user-manual/elasticjob-cloud/operation/high-availability.cn.md
deleted file mode 100755
index ab312b71d..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/high-availability.cn.md
+++ /dev/null
@@ -1,25 +0,0 @@
-+++
-title = "高可用"
-weight = 2
-chapter = true
-+++
-
-## 介绍
-
-调度器的高可用是通过运行几个指向同一个 ZooKeeper 集群的 ElasticJob-Cloud-Scheduler 实例来实现的。
-ZooKeeper 用于在当前主 ElasticJob-Cloud-Scheduler 实例失败的情况下执行领导者选举。
-通过至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于`待命`状态。
-当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
-
-## 配置
-
-每个 ElasticJob-Cloud-Scheduler 实例必须使用相同的 ZooKeeper 集群。
-例如，如果 ZooKeeper 的 Quorum 为 zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elasticjob-cloud，则 `elasticjob-cloud-scheduler.properties` 中 ZooKeeper 相关配置为：
-
-```properties
-# ElasticJob-Cloud's ZooKeeper address
-zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181
-
-# ElasticJob-Cloud's ZooKeeper namespace
-zk_namespace=elasticjob-cloud
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/high-availability.en.md b/docs/content/user-manual/elasticjob-cloud/operation/high-availability.en.md
deleted file mode 100755
index 319185bf4..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/high-availability.en.md
+++ /dev/null
@@ -1,26 +0,0 @@
-+++
-title = "High Available"
-weight = 2
-chapter = true
-+++
-
-## Introduction
-
-The high availability of the scheduler is achieved by running several ElasticJob-Cloud-Scheduler instances pointing to the same ZooKeeper cluster.
-ZooKeeper is used to perform leader election when the current primary ElasticJob-Cloud-Scheduler instance fails.
-At least two scheduler instances are used to form a cluster. Only one scheduler instance in the cluster provides services, and the other instances are in the `standby` state.
-When the instance fails, the cluster will elect one of the remaining instances to continue providing services.
-
-## Configuration
-
-Each ElasticJob-Cloud-Scheduler instance must use the same ZooKeeper cluster.
-For example，if the Quorum of ZooKeeper is zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elasticjob-cloud，the ZooKeeper related configuration in `elasticjob-cloud-scheduler.properties` is:
-
-```properties
-# ElasticJob-Cloud's ZooKeeper address
-zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181
-
-# ElasticJob-Cloud's ZooKeeper namespace
-zk_namespace=elasticjob-cloud
-```
-
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/web-console.cn.md b/docs/content/user-manual/elasticjob-cloud/operation/web-console.cn.md
deleted file mode 100755
index 10273e2ea..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/web-console.cn.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-title = "运维平台"
-weight = 3
-chapter = true
-+++
-
-运维平台内嵌于 elasticjob-cloud-scheduler 的 jar 包中，无需额外启动 WEB 服务器。
-可通过修改配置文件中 http_port 参数来调整启动端口,默认端口为 8899，访问地址为 `http://{your_scheduler_ip}:8899`。
-
-## 登录
-
-提供两种账户，管理员及访客，管理员拥有全部操作权限，访客仅拥有察看权限。
-默认管理员用户名和密码是 root/root，访客用户名和密码是 guest/guest，可通过 `conf\auth.properties` 修改管理员及访客用户名及密码。
-
-## 功能列表
-
-- 应用管理（发布、修改、查看）
-- 作业管理（注册、修改、查看以及删除）
-- 作业状态查看（待运行、运行中、待失效转移）
-- 作业历史查看（运行轨迹、执行状态、历史仪表盘）
-
-## 设计理念
-
-运维平台采用纯静态 HTML + JavaScript 方式与后台的 RESTful API 交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。
diff --git a/docs/content/user-manual/elasticjob-cloud/operation/web-console.en.md b/docs/content/user-manual/elasticjob-cloud/operation/web-console.en.md
deleted file mode 100755
index 709e9d0a5..000000000
--- a/docs/content/user-manual/elasticjob-cloud/operation/web-console.en.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-title = "Console"
-weight = 3
-chapter = true
-+++
-
-The operation and maintenance platform is embedded in the jar package of elasticjob-cloud-scheduler, and there is no need to start an additional WEB server.
-The startup port can be adjusted by modifying the http_port parameter in the configuration file. The default port is 8899 and the access address is `http://{your_scheduler_ip}:8899`.
-
-## Log in
-
-Two types of accounts are provided, administrator and guest. The administrator has all operation permissions, and the visitor only has viewing permissions.
-The default administrator user name and password are root/root, and the guest user name and password are guest/guest. You can modify the administrator and guest user names and passwords through `conf\auth.properties`.
-
-## Function list
-
-- Application management (publish, modify, view)
-- Job management (register, modify, view and delete)
-- View job status (waiting to run, running, pending failover)
-- Job history view (running track, execution status, historical dashboard)
-
-## Design concept
-
-The operation and maintenance platform uses pure static HTML + JavaScript to interact with the back-end RESTful API. It displays the job configuration and status by reading the job registry, the database displays the job running track and execution status, or updates the job registry data to modify the job configuration.
\ No newline at end of file
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/_index.cn.md b/docs/content/user-manual/elasticjob-cloud/usage/_index.cn.md
deleted file mode 100644
index d48c087c9..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/_index.cn.md
+++ /dev/null
@@ -1,9 +0,0 @@
-+++
-pre = "<b>4.2.1. </b>"
-title = "使用手册"
-weight = 1
-chapter = true
-+++
-
-本章节将介绍 ElasticJob-Cloud 相关使用。
-更多使用细节请参见[使用示例](https://github.com/apache/shardingsphere-elasticjob/tree/master/examples)。
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/_index.en.md b/docs/content/user-manual/elasticjob-cloud/usage/_index.en.md
deleted file mode 100644
index 6430c56bb..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/_index.en.md
+++ /dev/null
@@ -1,9 +0,0 @@
-+++
-pre = "<b>4.2.1. </b>"
-title = "Usage"
-weight = 1
-chapter = true
-+++
-
-This chapter will introduce the use of ElasticJob-Cloud. 
-Please refer to [Example](https://github.com/apache/shardingsphere-elasticjob/tree/master/examples) for more details.
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.cn.md b/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.cn.md
deleted file mode 100755
index 465100af7..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.cn.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-title = "开发指南"
-weight = 1
-chapter = true
-+++
-
-## 作业开发
-
-ElasticJob-Lite 和 ElasticJob-Cloud 提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同环境。
-
-作业开发详情请参见 [ElasticJob-Lite 使用手册](/cn/user-manual/elasticjob-lite/usage/)。
-
-## 作业启动
-
-需定义 `main` 方法并调用 `JobBootstrap.execute()`，例子如下：
-
-```java
-public class MyJobDemo {
-    
-    public static void main(final String[] args) {
-        JobBootstrap.execute(new MyJob());
-    }
-}
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.en.md b/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.en.md
deleted file mode 100755
index e47c0d6fd..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/dev-guide.en.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-title = "Dev Guide"
-weight = 1
-chapter = true
-+++
-
-## Job development
-
-ElasticJob-Lite and ElasticJob-Cloud provide a unified job interface, developers only need to develop business jobs once, and then they can deploy to different environments according to different configurations.
-
-For details of job development, please refer to [ElasticJob-Lite user manual](/en/user-manual/elasticjob-lite/usage/).
-
-## Job start
-
-You need to define the `main` method and call it `JobBootstrap.execute()`, for example:
-
-```java
-public class MyJobDemo {
-    
-    public static void main(final String[] args) {
-        JobBootstrap.execute(new MyJob());
-    }
-}
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/local-executor.cn.md b/docs/content/user-manual/elasticjob-cloud/usage/local-executor.cn.md
deleted file mode 100755
index c4148fce9..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/local-executor.cn.md
+++ /dev/null
@@ -1,21 +0,0 @@
-+++
-title = "本地运行模式"
-weight = 2
-chapter = true
-+++
-
-在开发 ElasticJob-Cloud 作业时，开发人员可以脱离 Mesos 环境，在本地运行和调试作业。
-可以利用本地运行模式充分的调试业务功能以及单元测试，完成之后再部署至 Mesos 集群。
-
-本地运行作业无需安装 Mesos 环境。
-
-```java
-// 创建作业配置
-JobConfiguration jobConfig = JobConfiguration.newBuilder("myJob", 3).cron("0/5 * * * * ?").build();
-
-// 配置当前运行的作业的分片项
-int shardingItem = 0;
-
-// 创建本地执行器
-new LocalTaskExecutor(new MyJob(), jobConfig, shardingItem).execute();
-```
diff --git a/docs/content/user-manual/elasticjob-cloud/usage/local-executor.en.md b/docs/content/user-manual/elasticjob-cloud/usage/local-executor.en.md
deleted file mode 100755
index cd3a97fd8..000000000
--- a/docs/content/user-manual/elasticjob-cloud/usage/local-executor.en.md
+++ /dev/null
@@ -1,21 +0,0 @@
-+++
-title = "Local Executor"
-weight = 2
-chapter = true
-+++
-
-When developing ElasticJob-Cloud jobs, developers can leave the Mesos environment to run and debug jobs locally.
-The local operating mode can be used to fully debug business functions and unit tests, and then deploy to the Mesos cluster after completion.
-
-There is no need to install the Mesos environment to run jobs locally.
-
-```java
-// Create job configuration
-JobConfiguration jobConfig = JobConfiguration.newBuilder("myJob", 3).cron("0/5 * * * * ?").build();
-
-// Configure the fragmentation item of the currently running job
-int shardingItem = 0;
-
-// Create a local executor
-new LocalTaskExecutor(new MyJob(), jobConfig, shardingItem).execute();
-```
diff --git a/docs/content/user-manual/elasticjob-lite/_index.cn.md b/docs/content/user-manual/elasticjob-lite/_index.cn.md
deleted file mode 100644
index 7e9b48320..000000000
--- a/docs/content/user-manual/elasticjob-lite/_index.cn.md
+++ /dev/null
@@ -1,23 +0,0 @@
-+++
-pre = "<b>4.1. </b>"
-title = "ElasticJob-Lite"
-weight = 1
-chapter = true
-+++
-
-## 简介
-
-ElasticJob-Lite 定位为轻量级无中心化解决方案，使用 jar 的形式提供分布式任务的协调服务。
-
-![ElasticJob-Lite Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
-
-## 对比
-
-|           | *ElasticJob-Lite* | *ElasticJob-Cloud* |
-| --------- | ----------------- | ------------------ |
-| 无中心化   | `是`              | 否                  |
-| 资源分配   | `不支持`           | 支持                |
-| 作业模式   | `常驻`             | 常驻 + 瞬时         |
-| 部署依赖   | `ZooKeeper`       | ZooKeeper + Mesos   |
-
-ElasticJob-Lite 的优势在于无中心化设计且外部依赖少，适用于资源分配稳定的业务系统。
diff --git a/docs/content/user-manual/elasticjob-lite/_index.en.md b/docs/content/user-manual/elasticjob-lite/_index.en.md
deleted file mode 100644
index 64614aa63..000000000
--- a/docs/content/user-manual/elasticjob-lite/_index.en.md
+++ /dev/null
@@ -1,24 +0,0 @@
-+++
-pre = "<b>4.1. </b>"
-title = "ElasticJob-Lite"
-weight = 1
-chapter = true
-+++
-
-## Introduction
-
-ElasticJob-Lite is a lightweight, decentralized solution that provides distributed task sharding services.
-
-![ElasticJob-Lite Architecture](https://shardingsphere.apache.org/elasticjob/current/img/architecture/elasticjob_lite.png)
-
-## Comparison
-
-|                   | *ElasticJob-Lite* | *ElasticJob-Cloud* |
-| ----------------- | ----------------- | ------------------ |
-| Decentralization  | `Yes`             | No                 |
-| Resource Assign   | `No`              | Yes                |
-| Job Execution     | `Daemon`          | Daemon + Transient |
-| Deploy Dependency | `ZooKeeper`       | ZooKeeper + Mesos  |
-
-The advantages of ElasticJob-Lite are no centralized design and less external dependence, 
-which is suitable for business application with stable resource allocation.
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/_index.en.md b/docs/content/user-manual/elasticjob-lite/configuration/_index.en.md
deleted file mode 100644
index 860631f4b..000000000
--- a/docs/content/user-manual/elasticjob-lite/configuration/_index.en.md
+++ /dev/null
@@ -1,136 +0,0 @@
-+++
-pre = "<b>4.1.2 </b>"
-title = "Configuration"
-weight = 2
-chapter = true
-+++
-
-Through which developers can quickly and clearly understand the functions provided by ElasticJob-Lite.
-
-This chapter is a configuration manual for ElasticJob-Lite, which can also be referred to as a dictionary if necessary.
-
-ElasticJob-Lite has provided 3 kinds of configuration methods for different situations.
-
-## Registry Center Configuration
-
-### Configuration
-
-| Name                          | Data Type     | Default Value | Description                                              |
-| ----------------------------- |:------------- |:------------- |:-------------------------------------------------------- |
-| serverLists                   | String        |               | ZooKeeper server IP list                                 |
-| namespace                     | String        |               | ZooKeeper namespace                                      |
-| baseSleepTimeMilliseconds     | int           | 1000          | The initial value of milliseconds for the retry interval |
-| maxSleepTimeMilliseconds      | String        | 3000          | The maximum value of milliseconds for the retry interval |
-| maxRetries                    | String        | 3             | Maximum number of retries                                |
-| sessionTimeoutMilliseconds    | int           | 60000         | Session timeout in milliseconds                          |
-| connectionTimeoutMilliseconds | int           | 15000         | Connection timeout in milliseconds                       |
-| digest                        | String        | no need       | Permission token to connect to ZooKeeper                 |
-
-### Core Configuration Description
-
-**serverLists:**
-
-Include IP and port, multiple addresses are separated by commas, such as: `host1:2181,host2:2181`
-
-## Job Configuration
-
-### Configuration
-
-| Name                          | Data Type       | Default Value        | Description                                                                           |
-| ----------------------------- |:--------------- |:-------------------- |:------------------------------------------------------------------------------------  |
-| jobName                       | String          |                      | Job name                                                                              |
-| shardingTotalCount            | int             |                      | Sharding total count                                                                  |
-| cron                          | String          |                      | CRON expression, control the job trigger time                                         |
-| timeZone                      | String          |                      | time zone of CRON                                                                     |
-| shardingItemParameters        | String          |                      | Sharding item parameters                                                              |
-| jobParameter                  | String          |                      | Job parameter                                                                         |
-| monitorExecution              | boolean         | true                 | Monitor job execution status                                                          |
-| failover                      | boolean         | false                | Enable or disable job failover                                                        |
-| misfire                       | boolean         | true                 | Enable or disable the missed task to re-execute                                       |
-| maxTimeDiffSeconds            | int             | -1(no check)         | The maximum value for time difference between server and registry center in seconds   |
-| reconcileIntervalMinutes      | int             | 10                   | Service scheduling interval in minutes for repairing job server inconsistent state    |
-| jobShardingStrategyType       | String          | AVG_ALLOCATION       | Job sharding strategy type                                                            |
-| jobExecutorServiceHandlerType | String          | CPU                  | Job thread pool handler type                                                          |
-| jobErrorHandlerType           | String          |                      | Job error handler type                                                                |
-| description                   | String          |                      | Job description                                                                       |
-| props                         | Properties      |                      | Job properties                                                                        |
-| disabled                      | boolean         | false                | Enable or disable start the job                                                       |
-| overwrite                     | boolean         | false                | Enable or disable local configuration override registry center configuration          |
-
-### Core Configuration Description
-
-**shardingItemParameters:**
-
-The sequence numbers and parameters of the Sharding items are separated by equal sign, and multiple key-value pairs are separated by commas.
-The Sharding sequence number starts from `0` and can't be greater than or equal to the total number of job fragments.
-For example: `0=a,1=b,2=c`
-
-**jobParameter:**
-
-With this parameter, user can pass parameters for the business method of job scheduling, which is used to implement the job with parameters.
-For example: `Amount of data acquired each time`, `Primary key of the job instance read from the database`, etc.
-
-**monitorExecution:**
-
-When the execution time and interval of each job are very short, it is recommended not to monitor the running status of the job to improve efficiency.
-There is no need to monitor because it is a transient state. User can add data accumulation monitoring by self. And there is no guarantee that the data will be selected repeatedly, idempotency should be achieved in the job.
-If the job execution time and interval time are longer, it is recommended to monitor the job status, and it can guarantee that the data will not be selected repeatedly.
-
-**maxTimeDiffSeconds:**
-
-If the time error exceeds the configured seconds, an exception will be thrown when the job starts.
-
-**reconcileIntervalMinutes:**
-
-In a distributed system, due to network, clock and other reasons, ZooKeeper may be inconsistent with the actual running job. This inconsistency cannot be completely avoided through positive verification.
-It is necessary to start another thread to periodically calibrate the consistency between the registry center and the job status, that is, to maintain the final consistency of ElasticJob.
-
-Less than `1` means no repair is performed.
-
-**jobShardingStrategyType:**
-
-For details, see[Job Sharding Strategy](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/sharding)。
-
-**jobExecutorServiceHandlerType:**
-
-For details, see[Thread Pool Strategy](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/thread-pool)。
-
-**jobErrorHandlerType:**
-
-For details, see[Error Handler Strategy](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler)。
-
-**props:**
-
-For details, see[Job Properties](/en/user-manual/elasticjob-lite/configuration/props)。
-
-**disabled:**
-
-It can be used for deployment, forbid jobs to start, and then start them uniformly after the deployment is completed.
-
-**overwrite:**
-
-If the value is `true`, local configuration override registry center configuration every time the job is started.
-
-## Job Listener Configuration
-
-### Common Listener Configuration
-
-Configuration: no
-
-### Distributed Listener Configuration
-
-Configuration
-
-| Name                           | Data Type    | Default Value  | Description                                                 |
-| ------------------------------ |:------------ |:-------------- |:----------------------------------------------------------- |
-| started-timeout-milliseconds   | long         | Long.MAX_VALUE | The timeout in milliseconds before the last job is executed |
-| completed-timeout-milliseconds | long         | Long.MAX_VALUE | The timeout in milliseconds after the last job is executed  |
-
-## Event Tracing Configuration
-
-### Configuration
-
-| Name    | Data Type      | Default Value | Description                                 |
-| ------- |:-------------- |:------------- |:------------------------------------------- |
-| type    | String         |               | The type of event tracing storage adapter   |
-| storage | Generics Type  |               | The object of event tracing storage adapter |
diff --git a/docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.cn.md b/docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.cn.md
deleted file mode 100644
index a1cf12cb9..000000000
--- a/docs/content/user-manual/elasticjob-lite/configuration/spring-namespace.cn.md
+++ /dev/null
@@ -1,90 +0,0 @@
-+++
-title = "Spring 命名空间"
-weight = 3
-chapter = true
-+++
-
-使用 Spring 命名空间需在 pom.xml 文件中添加 elasticjob-lite-spring 模块的依赖。
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-namespace</artifactId>
-    <version>${latest.release.version}</version>
-</dependency>
-```
-
-命名空间：[http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd](http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd)
-
-## 注册中心配置
-
-\<elasticjob:zookeeper />
-
-可配置属性：
-
-| 属性名                           | 是否必填 |
-| ------------------------------- |:------- |
-| id                              | 是      |
-| server-lists                    | 是      |
-| namespace                       | 是      |
-| base-sleep-time-milliseconds    | 否      |
-| max-sleep-time-milliseconds     | 否      |
-| max-retries                     | 否      |
-| session-timeout-milliseconds    | 否      |
-| connection-timeout-milliseconds | 否      |
-| digest                          | 否      |
-
-## 作业配置
-
-\<elasticjob:job />
-
-可配置属性：
-
-| 属性名                             | 是否必填  |
-| --------------------------------- |:-------- |
-| id                                | 是       |
-| class                             | 否       |
-| job-ref                           | 否       |
-| registry-center-ref               | 是       |
-| tracing-ref                       | 否       |
-| cron                              | 是       |
-| timeZone                          | 否       |
-| sharding-total-count              | 是       |
-| sharding-item-parameters          | 否       |
-| job-parameter                     | 否       |
-| monitor-execution                 | 否       |
-| failover                          | 否       |
-| misfire                           | 否       |
-| max-time-diff-seconds             | 否       |
-| reconcile-interval-minutes        | 否       |
-| job-sharding-strategy-type        | 否       |
-| job-executor-service-handler-type | 否       |
-| job-error-handler-type            | 否       |
-| job-listener-types                | 否       |
-| description                       | 否       |
-| props                             | 否       |
-| disabled                          | 否       |
-| overwrite                         | 否       |
-
-## 事件追踪配置
-
-\<elasticjob:rdb-tracing />
-
-可配置属性：
-
-| 属性名           | 类型       | 是否必填 | 缺省值 | 描述                  |
-| --------------- |:---------- |:------- |:----- |:--------------------- |
-| id              | String     | 是      |       | 事件追踪 Bean 主键      |
-| data-source-ref | DataSource | 是      |       | 事件追踪数据源 Bean 名称 |
-
-## 快照导出配置
-
-\<elasticjob:snapshot />
-
-可配置属性：
-
-| 属性名               | 类型   | 是否必填 | 缺省值 | 描述                                                                     |
-| ------------------- |:------ |:------ |:------ |:------------------------------------------------------------------------ |
-| id                  | String | 是     |        | 监控服务在 Spring 容器中的主键                                              |
-| registry-center-ref | String | 是     |        | 注册中心 Bean 的引用，需引用 reg:zookeeper 的声明                            |
-| dump-port           | String | 是     |        | 导出作业信息数据端口<br />使用方法: echo "dump@jobName" \| nc 127.0.0.1 9888 |
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/_index.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/_index.cn.md
deleted file mode 100644
index 405f2fd26..000000000
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "作业 API"
-weight = 1
-chapter = true
-+++
-
-ElasticJob-Lite 支持原生 Java、Spring Boot Starter 和 Spring 自定义命名空间 3 种使用方式。
-本章节将详细介绍他们的使用方式。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.cn.md b/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.cn.md
deleted file mode 100644
index 3eb44e294..000000000
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.cn.md
+++ /dev/null
@@ -1,48 +0,0 @@
-+++
-title = "表结构说明"
-weight = 4
-chapter = true
-+++
-
-事件追踪的 event_trace_rdb_url 属性对应库自动创建 JOB_EXECUTION_LOG 和 JOB_STATUS_TRACE_LOG 两张表以及若干索引。
-
-## JOB_EXECUTION_LOG 字段含义
-
-| 字段名称          | 字段类型       | 是否必填  | 描述                                                   |
-| ---------------- |:------------- |:-------- |:----------------------------------------------------- |
-| id               | VARCHAR(40)   | 是       | 主键                                                   |
-| job_name         | VARCHAR(100)  | 是       | 作业名称                                               |
-| task_id          | VARCHAR(1000) | 是       | 任务名称,每次作业运行生成新任务                           |
-| hostname         | VARCHAR(255)  | 是       | 主机名称                                               |
-| ip               | VARCHAR(50)   | 是       | 主机IP                                                |
-| sharding_item    | INT           | 是       | 分片项                                                |
-| execution_source | VARCHAR(20)   | 是       | 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER |
-| failure_cause    | VARCHAR(2000) | 否       | 执行失败原因                                           |
-| is_success       | BIT           | 是       | 是否执行成功                                           |
-| start_time       | TIMESTAMP     | 是       | 作业开始执行时间                                        |
-| complete_time    | TIMESTAMP     | 否       | 作业结束执行时间                                        |
-
-JOB_EXECUTION_LOG 记录每次作业的执行历史。
-分为两个步骤：
-
-1. 作业开始执行时向数据库插入数据，除 failure_cause 和 complete_time 外的其他字段均不为空。
-1. 作业完成执行时向数据库更新数据，更新 is_success, complete_time 和 failure_cause(如果作业执行失败)。
-
-## JOB_STATUS_TRACE_LOG 字段含义
-
-| 字段名称          | 字段类型       | 是否必填  | 描述                                                                                                          |
-| ---------------- |:--------------|:---------|:------------------------------------------------------------------------------------------------------------- |
-| id               | VARCHAR(40)   | 是       | 主键                                                                                                           |
-| job_name         | VARCHAR(100)  | 是       | 作业名称                                                                                                       |
-| original_task_id | VARCHAR(1000) | 是       | 原任务名称                                                                                                     |
-| task_id          | VARCHAR(1000) | 是       | 任务名称                                                                                                       |
-| slave_id         | VARCHAR(1000) | 是       | 执行作业服务器的名称，Lite版本为服务器的IP地址，Cloud版本为Mesos执行机主键                                           |
-| source           | VARCHAR(50)   | 是       | 任务执行源，可选值为CLOUD_SCHEDULER, CLOUD_EXECUTOR, LITE_EXECUTOR                                               |
-| execution_type   | VARCHAR(20)   | 是       | 任务执行类型，可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER                                                          |
-| sharding_item    | VARCHAR(255)  | 是       | 分片项集合，多个分片项以逗号分隔                                                                                  |
-| state            | VARCHAR(20)   | 是       | 任务执行状态，可选值为TASK_STAGING, TASK_RUNNING, TASK_FINISHED, TASK_KILLED, TASK_LOST, TASK_FAILED, TASK_ERROR |
-| message          | VARCHAR(2000) | 是       | 相关信息                                                                                                       |
-| creation_time    | TIMESTAMP     | 是       | 记录创建时间                                                                                                    |
-
-JOB_STATUS_TRACE_LOG 记录作业状态变更痕迹表。
-可通过每次作业运行的 task_id 查询作业状态变化的生命周期和运行轨迹。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.en.md b/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.en.md
deleted file mode 100644
index 9ebd3d2ce..000000000
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/table-structure.en.md
+++ /dev/null
@@ -1,48 +0,0 @@
-+++
-title = "Table Structure"
-weight = 4
-chapter = true
-+++
-
-The database which is the value of the event tracing property `event_trace_rdb_url` will automatically creates two tables `JOB_EXECUTION_LOG` and `JOB_STATUS_TRACE_LOG` and several indexes.
-
-## JOB_EXECUTION_LOG Columns
-
-| Column name      | Column type   | Required  | Describe                                                                                |
-| ---------------- |:------------- |:--------- |:--------------------------------------------------------------------------------------- |
-| id               | VARCHAR(40)   | Yes       | Primary key                                                                             |
-| job_name         | VARCHAR(100)  | Yes       | Job name                                                                                |
-| task_id          | VARCHAR(1000) | Yes       | Task name, create new tasks every time the job runs.                                    |
-| hostname         | VARCHAR(255)  | Yes       | Hostname                                                                                |
-| ip               | VARCHAR(50)   | Yes       | IP                                                                                      |
-| sharding_item    | INT           | Yes       | Sharding item                                                                           |
-| execution_source | VARCHAR(20)   | Yes       | Source of job execution. The value options are `NORMAL_TRIGGER`, `MISFIRE`, `FAILOVER`. |
-| failure_cause    | VARCHAR(2000) | No        | The reason for execution failure                                                        |
-| is_success       | BIT           | Yes       | Execute successfully or not                                                             |
-| start_time       | TIMESTAMP     | Yes       | Job start time                                                                          |
-| complete_time    | TIMESTAMP     | No        | Job end time                                                                            |
-
-`JOB_EXECUTION_LOG` records the execution history of each job.
-There are two steps:
-
-1. When the job is executed, program will create one record in the `JOB_EXECUTION_LOG`, and all fields except `failure_cause` and `complete_time` are not empty.
-1. When the job completes execution, program will update the record, update the columns of `is_success`, `complete_time` and `failure_cause`(if the job execution fails).
-
-## JOB_STATUS_TRACE_LOG Columns
-
-| Column name      | Column type   | Required  | Describe                                                                                                                                                |
-| ---------------- |:--------------|:----------|:------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| id               | VARCHAR(40)   | Yes       | Primary key                                                                                                                                             |
-| job_name         | VARCHAR(100)  | Yes       | Job name                                                                                                                                                |
-| original_task_id | VARCHAR(1000) | Yes       | Original task name                                                                                                                                      |
-| task_id          | VARCHAR(1000) | Yes       | Task name                                                                                                                                               |
-| slave_id         | VARCHAR(1000) | Yes       | Server's name of executing the job. The valve is server's IP for `ElasticJob-Lite`, is `Mesos`'s primary key for `ElasticJob-Cloud`.                    |
-| source           | VARCHAR(50)   | Yes       | Source of job execution, the value options are `CLOUD_SCHEDULER`, `CLOUD_EXECUTOR`, `LITE_EXECUTOR`.                                                    |
-| execution_type   | VARCHAR(20)   | Yes       | Type of job execution, the value options are `NORMAL_TRIGGER`, `MISFIRE`, `FAILOVER`.                                                                   |
-| sharding_item    | VARCHAR(255)  | Yes       | Collection of sharding item, multiple sharding items are separated by commas.                                                                           |
-| state            | VARCHAR(20)   | Yes       | State of job execution, the value options are `TASK_STAGING`, `TASK_RUNNING`, `TASK_FINISHED`, `TASK_KILLED`, `TASK_LOST`, `TASK_FAILED`, `TASK_ERROR`. |
-| message          | VARCHAR(2000) | Yes       | Message                                                                                                                                                 |
-| creation_time    | TIMESTAMP     | Yes       | Create time                                                                                                                                             |
-
-`JOB_STATUS_TRACE_LOG` record the job status changes.
-Through the `task_id` of each job, user can query the life cycle and running track of the job status change.
diff --git a/docs/content/user-manual/elasticjob-lite/operation/_index.cn.md b/docs/content/user-manual/operation/_index.cn.md
similarity index 59%
rename from docs/content/user-manual/elasticjob-lite/operation/_index.cn.md
rename to docs/content/user-manual/operation/_index.cn.md
index 6de6cf20f..79c41580e 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/_index.cn.md
+++ b/docs/content/user-manual/operation/_index.cn.md
@@ -5,4 +5,4 @@ weight = 3
 chapter = true
 +++
 
-本章节是 ElasticJob-Lite 的运维参考手册。
+本章节是 ElasticJob 的运维参考手册。
diff --git a/docs/content/user-manual/elasticjob-lite/operation/_index.en.md b/docs/content/user-manual/operation/_index.en.md
similarity index 57%
rename from docs/content/user-manual/elasticjob-lite/operation/_index.en.md
rename to docs/content/user-manual/operation/_index.en.md
index d09c7a9c9..b0ec88814 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/_index.en.md
+++ b/docs/content/user-manual/operation/_index.en.md
@@ -5,4 +5,4 @@ weight = 3
 chapter = true
 +++
 
-This chapter is an operation manual for ElasticJob-Lite.
+This chapter is an operation manual for ElasticJob.
diff --git a/docs/content/user-manual/elasticjob-lite/operation/deploy-guide.cn.md b/docs/content/user-manual/operation/deploy-guide.cn.md
similarity index 63%
rename from docs/content/user-manual/elasticjob-lite/operation/deploy-guide.cn.md
rename to docs/content/user-manual/operation/deploy-guide.cn.md
index 71d02619e..1cf38420d 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/deploy-guide.cn.md
+++ b/docs/content/user-manual/operation/deploy-guide.cn.md
@@ -6,14 +6,14 @@ chapter = true
 
 ## 应用部署
 
-1. 启动 ElasticJob-Lite 指定注册中心的 ZooKeeper。
-1. 运行包含 ElasticJob-Lite 和业务代码的 jar 文件。不限于 jar 或 war 的启动方式。
+1. 启动 ElasticJob 指定注册中心的 ZooKeeper。
+1. 运行包含 ElasticJob 和业务代码的 jar 文件。不限于 jar 或 war 的启动方式。
 1. 当作业服务器配置多网卡时，可通过设置系统变量 `elasticjob.preferred.network.interface` 指定网卡地址或
  `elasticjob.preferred.network.ip` 指定IP。 ElasticJob 默认获取网卡列表中第一个非回环可用 IPV4 地址。
 
 ## 运维平台和 RESTFul API 部署(可选)
 
-1. 解压缩 `elasticjob-lite-console-${version}.tar.gz` 并执行 `bin\start.sh`。
+1. 解压缩 `elasticjob-console-${version}.tar.gz` 并执行 `bin\start.sh`。
 1. 打开浏览器访问 `http://localhost:8899/` 即可访问控制台。8899 为默认端口号，可通过启动脚本输入 `-p` 自定义端口号。
 1. 访问 RESTFul API 方法同控制台。
-1. `elasticjob-lite-console-${version}.tar.gz` 可通过 `mvn install` 编译获取。
+1. `elasticjob-console-${version}.tar.gz` 可通过 `mvn install` 编译获取。
diff --git a/docs/content/user-manual/elasticjob-lite/operation/deploy-guide.en.md b/docs/content/user-manual/operation/deploy-guide.en.md
similarity index 69%
rename from docs/content/user-manual/elasticjob-lite/operation/deploy-guide.en.md
rename to docs/content/user-manual/operation/deploy-guide.en.md
index 06ae59c56..1f5bd717f 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/deploy-guide.en.md
+++ b/docs/content/user-manual/operation/deploy-guide.en.md
@@ -6,15 +6,15 @@ chapter = true
 
 ## Application deployment
 
-1. Start the ZooKeeper of the ElasticJob-Lite designated registry.
-1. Run the jar file containing ElasticJob-Lite and business code. It is not limited to the startup mode of jar or war.
+1. Start the ZooKeeper of the ElasticJob designated registry.
+1. Run the jar file containing ElasticJob and business code. It is not limited to the startup mode of jar or war.
 1. When the job server is configured with multiple network cards, the network card address can be specified by setting the system variable `elasticjob.preferred.network.interface`
 or specify network addresses by setting the system variable `elasticjob.preferred.network.ip`. ElasticJob obtains the first non-loopback available IPV4 address in the network card list by default.
 
 ## Operation and maintenance platform and RESTFul API deployment (optional)
 
-1. Unzip `elasticjob-lite-console-${version}.tar.gz` and execute `bin\start.sh`.
+1. Unzip `elasticjob-console-${version}.tar.gz` and execute `bin\start.sh`.
 1. Open the browser and visit `http://localhost:8899/` to access the console. 8899 is the default port number. You can customize the port number by entering `-p` through the startup script.
 1. The method of accessing RESTFul API is the same as the console.
-1. `elasticjob-lite-console-${version}.tar.gz` can be obtained by compiling `mvn install`.
+1. `elasticjob-console-${version}.tar.gz` can be obtained by compiling `mvn install`.
 
diff --git a/docs/content/user-manual/elasticjob-lite/operation/dump.cn.md b/docs/content/user-manual/operation/dump.cn.md
similarity index 79%
rename from docs/content/user-manual/elasticjob-lite/operation/dump.cn.md
rename to docs/content/user-manual/operation/dump.cn.md
index 90fc454ed..75c2c1515 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/dump.cn.md
+++ b/docs/content/user-manual/operation/dump.cn.md
@@ -4,15 +4,15 @@ weight = 2
 chapter = true
 +++
 
-使用 ElasticJob-Lite 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
+使用 ElasticJob 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
 
 由于无法在生产环境调试，通过 dump 命令可以把作业内部相关信息导出，方便开发者调试分析；
 另外为了不泄露隐私，已将相关信息中的 IP 地址以 ip1, ip2... 的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善 ElasticJob。
 
 ## 开启监听端口
 
-使用 Java 开启导出端口配置请参见[Java API 使用指南](/cn/user-manual/elasticjob-lite/usage/job-api/java-api)。
-使用 Spring 开启导出端口配置请参见[Spring 使用指南](/cn/user-manual/elasticjob-lite/usage/job-api/spring-namespace)。
+使用 Java 开启导出端口配置请参见[Java API 使用指南](/cn/user-manual/elasticjob/usage/job-api/java-api)。
+使用 Spring 开启导出端口配置请参见[Spring 使用指南](/cn/user-manual/elasticjob/usage/job-api/spring-namespace)。
 
 ## 执行导出命令
 
diff --git a/docs/content/user-manual/elasticjob-lite/operation/dump.en.md b/docs/content/user-manual/operation/dump.en.md
similarity index 87%
rename from docs/content/user-manual/elasticjob-lite/operation/dump.en.md
rename to docs/content/user-manual/operation/dump.en.md
index f1c921ed8..23458b90f 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/dump.en.md
+++ b/docs/content/user-manual/operation/dump.en.md
@@ -12,8 +12,8 @@ For security reason, the information dumped had already mask sensitive informati
 
 ## Open Listener Port
 
-Using Java API please refer to [Java API usage](/en/user-manual/elasticjob-lite/usage/job-api/java-api) for more details.
-Using Spring please refer to [Spring usage](/en/user-manual/elasticjob-lite/usage/job-api/spring-namespace) for more details.
+Using Java API please refer to [Java API usage](/en/user-manual/elasticjob/usage/job-api/java-api) for more details.
+Using Spring please refer to [Spring usage](/en/user-manual/elasticjob/usage/job-api/spring-namespace) for more details.
 
 ## Execute Dump
 
diff --git a/docs/content/user-manual/elasticjob-lite/operation/execution-monitor.cn.md b/docs/content/user-manual/operation/execution-monitor.cn.md
similarity index 66%
rename from docs/content/user-manual/elasticjob-lite/operation/execution-monitor.cn.md
rename to docs/content/user-manual/operation/execution-monitor.cn.md
index ad965c376..ef4947b5c 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/execution-monitor.cn.md
+++ b/docs/content/user-manual/operation/execution-monitor.cn.md
@@ -4,7 +4,7 @@ weight = 3
 chapter = true
 +++
 
-通过监听 ElasticJob-Lite 的 ZooKeeper 注册中心的几个关键节点即可完成作业运行状态监控功能。
+通过监听 ElasticJob 的 ZooKeeper 注册中心的几个关键节点即可完成作业运行状态监控功能。
 
 ## 监听作业服务器存活
 
diff --git a/docs/content/user-manual/elasticjob-lite/operation/execution-monitor.en.md b/docs/content/user-manual/operation/execution-monitor.en.md
similarity index 80%
rename from docs/content/user-manual/elasticjob-lite/operation/execution-monitor.en.md
rename to docs/content/user-manual/operation/execution-monitor.en.md
index 247637289..7a3a7e25b 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/execution-monitor.en.md
+++ b/docs/content/user-manual/operation/execution-monitor.en.md
@@ -4,7 +4,7 @@ weight = 3
 chapter = true
 +++
 
-By monitoring several key nodes in the zookeeper registry of ElasticJob-Lite, the job running status monitoring function can be completed.
+By monitoring several key nodes in the zookeeper registry of ElasticJob, the job running status monitoring function can be completed.
 
 ## Monitoring job server alive
 
diff --git a/docs/content/user-manual/elasticjob-lite/operation/web-console.cn.md b/docs/content/user-manual/operation/web-console.cn.md
similarity index 84%
rename from docs/content/user-manual/elasticjob-lite/operation/web-console.cn.md
rename to docs/content/user-manual/operation/web-console.cn.md
index 619a51e10..7c6183816 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/web-console.cn.md
+++ b/docs/content/user-manual/operation/web-console.cn.md
@@ -4,7 +4,7 @@ weight = 4
 chapter = true
 +++
 
-解压缩 `elasticjob-lite-console-${version}.tar.gz` 并执行 `bin\start.sh`。
+解压缩 `elasticjob-console-${version}.tar.gz` 并执行 `bin\start.sh`。
 打开浏览器访问 `http://localhost:8088/` 即可访问控制台。
 8088 为默认端口号，可通过启动脚本输入 `-p` 自定义端口号。
 
@@ -21,11 +21,11 @@ auth.guest_username=guest
 auth.guest_password=guest
 ```
 
-## Casdoor登录
+## Casdoor 登录
 
-控制台集成了[Casdoor](https://casdoor.org/)单点登录,用户可以选择Casdoor进行登录等一些列操作。
+控制台集成了[Casdoor](https://casdoor.org/)单点登录,用户可以选择 Casdoor 进行登录等一些列操作。
 
-步骤一: 部署casdoor
+步骤一: 部署 casdoor
 Casdoor的源代码托管在 GitHub: https://github.com/casdoor/casdoor 
 
 启动模式有开发模式和生产模式,此处以开发模式为例,[更多详细](https://casdoor.org/docs/basic/server-installation)
@@ -79,7 +79,7 @@ yarn start
 
 ## 设计理念
 
-运维平台和 ElasticJob-Lite 并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
+运维平台和 ElasticJob 并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
 
 控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。
 
@@ -88,5 +88,4 @@ yarn start
 * 添加作业
 
 作业在首次运行时将自动添加。
-ElasticJob-Lite 以 jar 方式启动，并无作业分发功能。
-如需完全通过运维平台发布作业，请使用 ElasticJob-Cloud。
+ElasticJob 以 jar 方式启动，并无作业分发功能。
diff --git a/docs/content/user-manual/elasticjob-lite/operation/web-console.en.md b/docs/content/user-manual/operation/web-console.en.md
similarity index 85%
rename from docs/content/user-manual/elasticjob-lite/operation/web-console.en.md
rename to docs/content/user-manual/operation/web-console.en.md
index c4c71d904..5ff8c890a 100644
--- a/docs/content/user-manual/elasticjob-lite/operation/web-console.en.md
+++ b/docs/content/user-manual/operation/web-console.en.md
@@ -4,7 +4,7 @@ weight = 4
 chapter = true
 +++
 
-Unzip `elasticjob-lite-console-${version}.tar.gz` and execute `bin\start.sh`.
+Unzip `elasticjob-console-${version}.tar.gz` and execute `bin\start.sh`.
 Open the browser and visit `http://localhost:8899/` to access the console.
 8899 is the default port number. You can customize the port number by entering `-p` through the startup script.
 
@@ -77,7 +77,7 @@ Now we can use it
 
 ## Design concept
 
-The operation and maintenance platform has no direct relationship with ElasticJob-Lite. It displays the job status by reading the job registration center data, or updating the registration center data to modify the global configuration.
+The operation and maintenance platform has no direct relationship with ElasticJob. It displays the job status by reading the job registration center data, or updating the registration center data to modify the global configuration.
 
 The console can only control whether the job itself is running, but it cannot control the start of the job process, because the console and the job server are completely separated, and the console cannot control the job server.
 
@@ -86,5 +86,4 @@ The console can only control whether the job itself is running, but it cannot co
 * Add assignment
 
 The job will be automatically added the first time it runs.
-ElasticJob-Lite is started as a jar and has no job distribution function.
-To publish jobs entirely through the operation and maintenance platform, please use ElasticJob-Cloud.
+ElasticJob is started as a jar and has no job distribution function.
diff --git a/docs/content/user-manual/elasticjob-lite/usage/_index.cn.md b/docs/content/user-manual/usage/_index.cn.md
similarity index 79%
rename from docs/content/user-manual/elasticjob-lite/usage/_index.cn.md
rename to docs/content/user-manual/usage/_index.cn.md
index 6e2dd56a0..67ddaad08 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/_index.cn.md
+++ b/docs/content/user-manual/usage/_index.cn.md
@@ -5,5 +5,5 @@ weight = 1
 chapter = true
 +++
 
-本章节将介绍 ElasticJob-Lite 相关使用。
+本章节将介绍 ElasticJob 相关使用。
 更多使用细节请参见[使用示例](https://github.com/apache/shardingsphere-elasticjob/tree/master/examples)。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/_index.en.md b/docs/content/user-manual/usage/_index.en.md
similarity index 77%
rename from docs/content/user-manual/elasticjob-lite/usage/_index.en.md
rename to docs/content/user-manual/usage/_index.en.md
index 0b97789bb..f76009252 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/_index.en.md
+++ b/docs/content/user-manual/usage/_index.en.md
@@ -5,5 +5,5 @@ weight = 1
 chapter = true
 +++
 
-This chapter will introduce the use of ElasticJob-Lite. 
+This chapter will introduce the use of ElasticJob. 
 Please refer to [Example](https://github.com/apache/shardingsphere-elasticjob/tree/master/examples) for more details.
diff --git a/docs/content/user-manual/usage/job-api/_index.cn.md b/docs/content/user-manual/usage/job-api/_index.cn.md
new file mode 100644
index 000000000..3c57f2ad3
--- /dev/null
+++ b/docs/content/user-manual/usage/job-api/_index.cn.md
@@ -0,0 +1,8 @@
++++
+title = "作业 API"
+weight = 1
+chapter = true
++++
+
+ElasticJob 支持原生 Java、Spring Boot Starter 和 Spring 自定义命名空间 3 种使用方式。
+本章节将详细介绍他们的使用方式。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/_index.en.md b/docs/content/user-manual/usage/job-api/_index.en.md
similarity index 54%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/_index.en.md
rename to docs/content/user-manual/usage/job-api/_index.en.md
index 2731af7ba..21870cfa8 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/_index.en.md
+++ b/docs/content/user-manual/usage/job-api/_index.en.md
@@ -4,5 +4,5 @@ weight = 1
 chapter = true
 +++
 
-ElasticJob-Lite can use for native Java, Spring Boot Starter and Spring namespace.
+ElasticJob can use for native Java, Spring Boot Starter and Spring namespace.
 This chapter will introduce how to use them.
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md b/docs/content/user-manual/usage/job-api/java-api.cn.md
similarity index 86%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
rename to docs/content/user-manual/usage/job-api/java-api.cn.md
index 4e6455fbd..87f6ebd9f 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
+++ b/docs/content/user-manual/usage/job-api/java-api.cn.md
@@ -6,7 +6,7 @@ chapter = true
 
 ## 作业配置
 
-ElasticJob-Lite 采用构建器模式创建作业配置对象。
+ElasticJob 采用构建器模式创建作业配置对象。
 代码示例如下：
 
 ```java
@@ -15,7 +15,7 @@ ElasticJob-Lite 采用构建器模式创建作业配置对象。
 
 ## 作业启动
 
-ElasticJob-Lite 调度器分为定时调度和一次性调度两种类型。
+ElasticJob 调度器分为定时调度和一次性调度两种类型。
 每种调度器启动时均需要注册中心配置、作业对象（或作业类型）以及作业配置这 3 个参数。
 
 ### 定时调度
@@ -71,11 +71,11 @@ public class JobDemo {
 
 ## 配置作业导出端口
 
-使用 ElasticJob-Lite 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
+使用 ElasticJob 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
 
 由于无法在生产环境调试，通过 dump 命令可以把作业内部相关信息导出，方便开发者调试分析；
 
-导出命令的使用请参见[运维指南](/cn/user-manual/elasticjob-lite/operation/dump)。
+导出命令的使用请参见[运维指南](/cn/user-manual/elasticjob/operation/dump)。
 
 以下示例用于展示如何通过 SnapshotService 开启用于导出命令的监听端口。
 
@@ -95,16 +95,16 @@ public class JobMain {
 
 ## 配置错误处理策略
 
-使用 ElasticJob-Lite 过程中当作业发生异常后，可采用以下错误处理策略。
+使用 ElasticJob 过程中当作业发生异常后，可采用以下错误处理策略。
 
-| *错误处理策略名称*         | *说明*                            |  *是否内置* | *是否默认*| *是否需要额外配置* |
-| ----------------------- | --------------------------------- |  -------  |  --------|  -------------  |
-| 记录日志策略              | 记录作业异常日志，但不中断作业执行     |   是       |     是   |                 |
-| 抛出异常策略              | 抛出系统异常并中断作业执行            |   是       |         |                 |
-| 忽略异常策略              | 忽略系统异常且不中断作业执行          |   是       |          |                 |
-| 邮件通知策略              | 发送邮件消息通知，但不中断作业执行     |            |          |      是         |
-| 企业微信通知策略           | 发送企业微信消息通知，但不中断作业执行 |            |          |      是          |
-| 钉钉通知策略              | 发送钉钉消息通知，但不中断作业执行     |            |          |      是          |
+| *错误处理策略名称* | *说明*                | *是否内置* | *是否默认* | *是否需要额外配置* |
+|------------|---------------------|--------|--------|------------|
+| 记录日志策略     | 记录作业异常日志，但不中断作业执行   | 是      | 是      |            |
+| 抛出异常策略     | 抛出系统异常并中断作业执行       | 是      |        |            |
+| 忽略异常策略     | 忽略系统异常且不中断作业执行      | 是      |        |            |
+| 邮件通知策略     | 发送邮件消息通知，但不中断作业执行   |        |        | 是          |
+| 企业微信通知策略   | 发送企业微信消息通知，但不中断作业执行 |        |        | 是          |
+| 钉钉通知策略     | 发送钉钉消息通知，但不中断作业执行   |        |        | 是          |
 
 ### 记录日志策略
 ```java
@@ -193,7 +193,7 @@ public class JobDemo {
 
 ### 邮件通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
 
 Maven POM:
 ```xml
@@ -247,7 +247,7 @@ public class JobDemo {
 
 ### 企业微信通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
 
 Maven POM:
 ```xml
@@ -297,7 +297,7 @@ public class JobDemo {
 
 ### 钉钉通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
 
 Maven POM:
 ```xml
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md b/docs/content/user-manual/usage/job-api/java-api.en.md
similarity index 93%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
rename to docs/content/user-manual/usage/job-api/java-api.en.md
index ef02e097a..416863bb0 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
+++ b/docs/content/user-manual/usage/job-api/java-api.en.md
@@ -6,7 +6,7 @@ chapter = true
 
 ## Job configuration
 
-ElasticJob-Lite uses the builder mode to create job configuration objects.
+ElasticJob uses the builder mode to create job configuration objects.
 The code example is as follows:
 
 ```java
@@ -15,7 +15,7 @@ The code example is as follows:
 
 ## Job start
 
-ElasticJob-Lite scheduler is divided into two types: timed scheduling and one-time scheduling.
+ElasticJob scheduler is divided into two types: timed scheduling and one-time scheduling.
 Each scheduler needs three parameters: registry configuration, job object (or job type), and job configuration when it starts.
 
 ### Timed scheduling
@@ -75,7 +75,7 @@ Using ElasticJob may meet some distributed problem which is not easy to observe.
 
 Because of developer can not debug in production environment, ElasticJob provide `dump` command to export job runtime information for debugging.
 
-Please refer to [Operation Manual](/en/user-manual/elasticjob-lite/operation/dump) for more details.
+Please refer to [Operation Manual](/en/user-manual/elasticjob/operation/dump) for more details.
 
 The example below is how to configure spring namespace for open listener port to dump.
 
@@ -94,7 +94,7 @@ public class JobMain {
 
 ## Configuration error handler strategy
 
-In the process of using ElasticJob-Lite, when the job is abnormal, the following error handling strategies can be used.
+In the process of using ElasticJob, when the job is abnormal, the following error handling strategies can be used.
 
 | *Error handler strategy name*            | *Description*                                                 |  *Built-in*  | *Default*| *Extra config*   |
 | ---------------------------------------- | ------------------------------------------------------------- |  -------     |  --------|  --------------  |
@@ -192,7 +192,7 @@ public class JobDemo {
 
 ### Email Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
 
 Maven POM:
 ```xml
@@ -246,7 +246,7 @@ public class JobDemo {
 
 ### Wechat Enterprise Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
 
 Maven POM:
 ```xml
@@ -295,9 +295,10 @@ public class JobDemo {
 
 ### Dingtalk Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
 
 Maven POM:
+
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
@@ -305,6 +306,7 @@ Maven POM:
     <version>${latest.release.version}</version>
 </dependency>
 ```
+
 ```java
 public class JobDemo {
     
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.cn.md b/docs/content/user-manual/usage/job-api/job-interface.cn.md
similarity index 96%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.cn.md
rename to docs/content/user-manual/usage/job-api/job-interface.cn.md
index 4b94866f8..b0f6a4c3c 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.cn.md
+++ b/docs/content/user-manual/usage/job-api/job-interface.cn.md
@@ -4,8 +4,6 @@ weight = 1
 chapter = true
 +++
 
-ElasticJob-Lite 和 ElasticJob-Cloud 提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同环境。
-
 ElasticJob 的作业分类基于 class 和 type 两种类型。
 基于 class 的作业需要开发者自行通过实现接口的方式织入业务逻辑；
 基于 type 的作业则无需编码，只需要提供相应配置即可。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.en.md b/docs/content/user-manual/usage/job-api/job-interface.en.md
similarity index 95%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.en.md
rename to docs/content/user-manual/usage/job-api/job-interface.en.md
index 011eea3ce..0f68061e9 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/job-interface.en.md
+++ b/docs/content/user-manual/usage/job-api/job-interface.en.md
@@ -4,8 +4,6 @@ weight = 1
 chapter = true
 +++
 
-ElasticJob-Lite and ElasticJob-Cloud provide a unified job interface, developers need to develop business jobs only once, and then they can be deployed to different environments according to different configurations and deployments.
-
 ElasticJob has two kinds of job types: Class-based job and Type-based job.
 Class-based jobs require developers to weave business logic by implementing interfaces;
 Type-based jobs don't need coding, just need to provide the corresponding configuration.
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md b/docs/content/user-manual/usage/job-api/spring-boot-starter.cn.md
similarity index 73%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
rename to docs/content/user-manual/usage/job-api/spring-boot-starter.cn.md
index fde735229..1ae7a81ef 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
+++ b/docs/content/user-manual/usage/job-api/spring-boot-starter.cn.md
@@ -4,7 +4,7 @@ weight = 3
 chapter = true
 +++
 
-ElasticJob-Lite 提供自定义的 Spring Boot Starter，可以与 Spring Boot 配合使用。
+ElasticJob 提供自定义的 Spring Boot Starter，可以与 Spring Boot 配合使用。
 基于 ElasticJob Spring Boot Starter 使用 ElasticJob ，用户无需手动创建 CoordinatorRegistryCenter、JobBootstrap 等实例，
 只需实现核心作业逻辑并辅以少量配置，即可利用轻量、无中心化的 ElasticJob 解决分布式调度问题。
 
@@ -48,7 +48,7 @@ Starter 会根据该配置自动创建 `OneOffJobBootstrap` 或 `ScheduleJobBoot
 elasticjob:
   regCenter:
     serverLists: localhost:6181
-    namespace: elasticjob-lite-springboot
+    namespace: elasticjob-engine-springboot
   jobs:
     dataflowJob:
       elasticJobClass: org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob
@@ -75,7 +75,7 @@ elasticjob:
 通过 `execute()` 方法执行作业。
 
 `OneOffJobBootstrap` bean 的名称通过属性 jobBootstrapBeanName 配置，注入时需要指定依赖的 bean 名称。
-具体配置请参考[配置文档](/cn/user-manual/elasticjob-lite/configuration/spring-boot-starter)。
+具体配置请参考[配置文档](/cn/user-manual/elasticjob/configuration/spring-boot-starter)。
 
 ```yaml
 elasticjob:
@@ -115,16 +115,16 @@ public class OneOffJobController {
 
 ## 配置错误处理策略
 
-使用 ElasticJob-Lite 过程中当作业发生异常后，可采用以下错误处理策略。
+使用 ElasticJob 过程中当作业发生异常后，可采用以下错误处理策略。
 
-| *错误处理策略名称*         | *说明*                            |  *是否内置* | *是否默认*| *是否需要额外配置* |
-| ----------------------- | --------------------------------- |  -------  |  --------|  -------------  |
-| 记录日志策略              | 记录作业异常日志，但不中断作业执行     |   是       |     是   |                 |
-| 抛出异常策略              | 抛出系统异常并中断作业执行            |   是       |         |                 |
-| 忽略异常策略              | 忽略系统异常且不中断作业执行          |   是       |          |                 |
-| 邮件通知策略              | 发送邮件消息通知，但不中断作业执行     |            |          |      是         |
-| 企业微信通知策略           | 发送企业微信消息通知，但不中断作业执行 |            |          |      是          |
-| 钉钉通知策略              | 发送钉钉消息通知，但不中断作业执行     |            |          |      是          |
+| *错误处理策略名称* | *说明*                | *是否内置* | *是否默认* | *是否需要额外配置* |
+|------------|---------------------|--------|--------|------------|
+| 记录日志策略     | 记录作业异常日志，但不中断作业执行   | 是      | 是      |            |
+| 抛出异常策略     | 抛出系统异常并中断作业执行       | 是      |        |            |
+| 忽略异常策略     | 忽略系统异常且不中断作业执行      | 是      |        |            |
+| 邮件通知策略     | 发送邮件消息通知，但不中断作业执行   |        |        | 是          |
+| 企业微信通知策略   | 发送企业微信消息通知，但不中断作业执行 |        |        | 是          |
+| 钉钉通知策略     | 发送钉钉消息通知，但不中断作业执行   |        |        | 是          |
 
 ### 记录日志策略
 ```yaml
@@ -159,7 +159,7 @@ elasticjob:
 
 ### 邮件通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
 
 Maven POM:
 ```xml
@@ -193,7 +193,7 @@ elasticjob:
 
 ### 企业微信通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
 
 Maven POM:
 ```xml
@@ -220,7 +220,7 @@ elasticjob:
 
 ### 钉钉通知策略
 
-请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
+请参考 [这里](/cn/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
 
 Maven POM:
 ```xml
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md b/docs/content/user-manual/usage/job-api/spring-boot-starter.en.md
similarity index 71%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
rename to docs/content/user-manual/usage/job-api/spring-boot-starter.en.md
index f106a1e40..3a54a8c01 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
+++ b/docs/content/user-manual/usage/job-api/spring-boot-starter.en.md
@@ -4,7 +4,7 @@ weight = 3
 chapter = true
 +++
 
-ElasticJob-Lite provides a customized Spring Boot Starter, which can be used in conjunction with Spring Boot.
+ElasticJob provides a customized Spring Boot Starter, which can be used in conjunction with Spring Boot.
 Developers are free from configuring CoordinatorRegistryCenter, JobBootstrap by using ElasticJob Spring Boot Starter.
 What developers need to solve distributed scheduling problem are job implementations with a little configuration.
 
@@ -49,7 +49,7 @@ Configuration reference:
 elasticjob:
   regCenter:
     serverLists: localhost:6181
-    namespace: elasticjob-lite-springboot
+    namespace: elasticjob-engine-springboot
   jobs:
     dataflowJob:
       elasticJobClass: org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob
@@ -77,7 +77,7 @@ Developers can inject the `OneOffJobBootstrap` bean into where they plan to invo
 Trigger the job by invoking `execute()` method manually.
 
 The bean name of `OneOffJobBootstrap` is specified by property "jobBootstrapBeanName",
-Please refer to [Spring Boot Starter Configuration](/en/user-manual/elasticjob-lite/configuration/spring-boot-starter).
+Please refer to [Spring Boot Starter Configuration](/en/user-manual/elasticjob/configuration/spring-boot-starter).
 
 ```yaml
 elasticjob:
@@ -116,16 +116,16 @@ public class OneOffJobController {
 
 ## Configuration error handler strategy
 
-In the process of using ElasticJob-Lite, when the job is abnormal, the following error handling strategies can be used.
+In the process of using ElasticJob, when the job is abnormal, the following error handling strategies can be used.
 
-| *Error handler strategy name*            | *Description*                                                 |  *Built-in*  | *Default*| *Extra config*   |
-| ---------------------------------------- | ------------------------------------------------------------- |  -------     |  --------|  --------------  |
-| Log Strategy                             | Log error and do not interrupt job                            |   Yes        |     Yes  |                  |
-| Throw Strategy                           | Throw system exception and interrupt job                      |   Yes        |          |                  |
-| Ignore Strategy                          | Ignore exception and do not interrupt job                     |   Yes        |          |                  |
-| Email Notification Strategy              | Send email message notification and do not interrupt job      |              |          |    Yes           |
-| Wechat Enterprise Notification Strategy  | Send wechat message notification and do not interrupt job     |              |          |    Yes           |
-| Dingtalk Notification Strategy           | Send dingtalk message notification and do not interrupt job   |              |          |    Yes           |
+| *Error handler strategy name*           | *Description*                                               | *Built-in* | *Default* | *Extra config* |
+|-----------------------------------------|-------------------------------------------------------------|------------|-----------|----------------|
+| Log Strategy                            | Log error and do not interrupt job                          | Yes        | Yes       |                |
+| Throw Strategy                          | Throw system exception and interrupt job                    | Yes        |           |                |
+| Ignore Strategy                         | Ignore exception and do not interrupt job                   | Yes        |           |                |
+| Email Notification Strategy             | Send email message notification and do not interrupt job    |            |           | Yes            |
+| Wechat Enterprise Notification Strategy | Send wechat message notification and do not interrupt job   |            |           | Yes            |
+| Dingtalk Notification Strategy          | Send dingtalk message notification and do not interrupt job |            |           | Yes            |
 
 ### Log Strategy
 ```yaml
@@ -159,7 +159,7 @@ elasticjob:
 
 ### Email Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
 
 Maven POM:
 ```xml
@@ -193,7 +193,7 @@ elasticjob:
 
 ### Wechat Enterprise Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
 
 Maven POM:
 ```xml
@@ -219,7 +219,7 @@ elasticjob:
 
 ### Dingtalk Notification Strategy
 
-Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
+Please refer to [here](/en/user-manual/elasticjob/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
 
 Maven POM:
 ```xml
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md b/docs/content/user-manual/usage/job-api/spring-namespace.cn.md
similarity index 80%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md
rename to docs/content/user-manual/usage/job-api/spring-namespace.cn.md
index 09c52e71a..085df8726 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md
+++ b/docs/content/user-manual/usage/job-api/spring-namespace.cn.md
@@ -4,7 +4,7 @@ weight = 4
 chapter = true
 +++
 
-ElasticJob-Lite 提供自定义的 Spring 命名空间，可以与 Spring 容器配合使用。
+ElasticJob 提供自定义的 Spring 命名空间，可以与 Spring 容器配合使用。
 开发者能够便捷的在作业中通过依赖注入使用 Spring 容器管理的数据源等对象，并使用占位符从属性文件中取值。
 
 ## 作业配置
@@ -51,8 +51,9 @@ ElasticJob-Lite 提供自定义的 Spring 命名空间，可以与 Spring 容器
 通过 `execute()` 方法执行作业。
 
 ```xml
-    <bean id="oneOffJob" class="org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob" />
-    <elasticjob:job id="oneOffJobBean" job-ref="oneOffJob" ...  />
+
+<bean id="oneOffJob" class="org.apache.shardingsphere.elasticjob.engine.example.job.simple.SpringSimpleJob"/>
+<elasticjob:job id="oneOffJobBean" job-ref="oneOffJob" ...  />
 ```
 ```java
 public final class SpringMain {
@@ -66,11 +67,11 @@ public final class SpringMain {
 
 ## 配置作业导出端口
 
-使用 ElasticJob-Lite 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
+使用 ElasticJob 过程中可能会碰到一些分布式问题，导致作业运行不稳定。
 
 由于无法在生产环境调试，通过 dump 命令可以把作业内部相关信息导出，方便开发者调试分析；
 
-导出命令的使用请参见[运维指南](/cn/user-manual/elasticjob-lite/operation/dump)。
+导出命令的使用请参见[运维指南](/cn/user-manual/elasticjob/operation/dump)。
 
 以下示例用于展示如何通过 Spring 命名空间开启用于导出命令的监听端口。
 
@@ -95,16 +96,16 @@ public final class SpringMain {
 
 ## 配置错误处理策略
 
-使用 ElasticJob-Lite 过程中当作业发生异常后，可采用以下错误处理策略。
+使用 ElasticJob 过程中当作业发生异常后，可采用以下错误处理策略。
 
-| *错误处理策略名称*         | *说明*                            |  *是否内置* | *是否默认*| *是否需要额外配置* |
-| ----------------------- | --------------------------------- |  -------  |  --------|  -------------  |
-| 记录日志策略              | 记录作业异常日志，但不中断作业执行     |   是       |     是   |                 |
-| 抛出异常策略              | 抛出系统异常并中断作业执行            |   是       |         |                 |
-| 忽略异常策略              | 忽略系统异常且不中断作业执行          |   是       |          |                 |
-| 邮件通知策略              | 发送邮件消息通知，但不中断作业执行     |            |          |      是         |
-| 企业微信通知策略           | 发送企业微信消息通知，但不中断作业执行 |            |          |      是          |
-| 钉钉通知策略              | 发送钉钉消息通知，但不中断作业执行     |            |          |      是          |
+| *错误处理策略名称* | *说明*                | *是否内置* | *是否默认* | *是否需要额外配置* |
+|------------|---------------------|--------|--------|------------|
+| 记录日志策略     | 记录作业异常日志，但不中断作业执行   | 是      | 是      |            |
+| 抛出异常策略     | 抛出系统异常并中断作业执行       | 是      |        |            |
+| 忽略异常策略     | 忽略系统异常且不中断作业执行      | 是      |        |            |
+| 邮件通知策略     | 发送邮件消息通知，但不中断作业执行   |        |        | 是          |
+| 企业微信通知策略   | 发送企业微信消息通知，但不中断作业执行 |        |        | 是          |
+| 钉钉通知策略     | 发送钉钉消息通知，但不中断作业执行   |        |        | 是          |
 
 以下示例用于展示如何通过 Spring 命名空间配置错误处理策略。
 
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md b/docs/content/user-manual/usage/job-api/spring-namespace.en.md
similarity index 94%
rename from docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md
rename to docs/content/user-manual/usage/job-api/spring-namespace.en.md
index 9b147c3e3..0f4cb7a37 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md
+++ b/docs/content/user-manual/usage/job-api/spring-namespace.en.md
@@ -4,7 +4,7 @@ weight = 4
 chapter = true
 +++
 
-ElasticJob-Lite provides a custom Spring namespace, which can be used with the Spring.
+ElasticJob provides a custom Spring namespace, which can be used with the Spring.
 Through the way of DI (Dependency Injection), developers can easily use data sources and other objects that managed by the Spring container in their jobs, and use placeholders to get values ​​from property files.
 
 ## Job Configuration
@@ -52,8 +52,9 @@ Developers can inject the `OneOffJobBootstrap` bean into where they plan to invo
 Trigger the job by invoking `execute()` method manually.
 
 ```xml
-    <bean id="oneOffJob" class="org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob" />
-    <elasticjob:job id="oneOffJobBean" job-ref="oneOffJob" ...  />
+
+<bean id="oneOffJob" class="org.apache.shardingsphere.elasticjob.engine.example.job.simple.SpringSimpleJob"/>
+<elasticjob:job id="oneOffJobBean" job-ref="oneOffJob" ...  />
 ```
 ```java
 public final class SpringMain {
@@ -71,7 +72,7 @@ Using ElasticJob may meet some distributed problem which is not easy to observe.
 
 Because of developer can not debug in production environment, ElasticJob provide `dump` command to export job runtime information for debugging.
 
-Please refer to [Operation Manual](/en/user-manual/elasticjob-lite/operation/dump) for more details.
+Please refer to [Operation Manual](/en/user-manual/elasticjob/operation/dump) for more details.
 
 The example below is how to configure SnapshotService for open listener port to dump.
 
@@ -95,7 +96,7 @@ The example below is how to configure SnapshotService for open listener port to
 
 ## Configuration error handler strategy
 
-In the process of using ElasticJob-Lite, when the job is abnormal, the following error handling strategies can be used.
+In the process of using ElasticJob, when the job is abnormal, the following error handling strategies can be used.
 
 | *Error handler strategy name*            | *Description*                                                 |  *Built-in*  | *Default*| *Extra config*   |
 | ---------------------------------------- | ------------------------------------------------------------- |  -------     |  --------|  --------------  |
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.cn.md b/docs/content/user-manual/usage/job-listener/_index.cn.md
similarity index 76%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.cn.md
rename to docs/content/user-manual/usage/job-listener/_index.cn.md
index 3ed22b2cf..e927be2c3 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.cn.md
+++ b/docs/content/user-manual/usage/job-listener/_index.cn.md
@@ -4,7 +4,7 @@ weight = 2
 chapter = true
 +++
 
-ElasticJob-Lite 提供作业监听器，用于在任务执行前和执行后执行监听的方法。
+ElasticJob 提供作业监听器，用于在任务执行前和执行后执行监听的方法。
 监听器分为每台作业节点均执行的常规监听器和分布式场景中仅单一节点执行的分布式监听器。
 本章节将详细介绍他们的使用方式。
 
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.en.md b/docs/content/user-manual/usage/job-listener/_index.en.md
similarity index 66%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.en.md
rename to docs/content/user-manual/usage/job-listener/_index.en.md
index fa5584caf..18c13fa4d 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/job-listener/_index.en.md
+++ b/docs/content/user-manual/usage/job-listener/_index.en.md
@@ -4,7 +4,7 @@ weight = 2
 chapter = true
 +++
 
-ElasticJob-Lite provides job listeners, which are used to perform monitoring methods before and after task execution.
+ElasticJob provides job listeners, which are used to perform monitoring methods before and after task execution.
 Listeners are divided into regular listeners executed by each job node and distributed listeners executed by only a single node in a distributed scenario.
 This chapter will introduce how to use them in detail.
 
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/java-api.cn.md b/docs/content/user-manual/usage/job-listener/java-api.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/java-api.cn.md
rename to docs/content/user-manual/usage/job-listener/java-api.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/java-api.en.md b/docs/content/user-manual/usage/job-listener/java-api.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/java-api.en.md
rename to docs/content/user-manual/usage/job-listener/java-api.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/listener-interface.cn.md b/docs/content/user-manual/usage/job-listener/listener-interface.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/listener-interface.cn.md
rename to docs/content/user-manual/usage/job-listener/listener-interface.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/listener-interface.en.md b/docs/content/user-manual/usage/job-listener/listener-interface.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/listener-interface.en.md
rename to docs/content/user-manual/usage/job-listener/listener-interface.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/spring-namespace.cn.md b/docs/content/user-manual/usage/job-listener/spring-namespace.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/spring-namespace.cn.md
rename to docs/content/user-manual/usage/job-listener/spring-namespace.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-listener/spring-namespace.en.md b/docs/content/user-manual/usage/job-listener/spring-namespace.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/job-listener/spring-namespace.en.md
rename to docs/content/user-manual/usage/job-listener/spring-namespace.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.cn.md b/docs/content/user-manual/usage/operation-api/_index.cn.md
similarity index 82%
rename from docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.cn.md
rename to docs/content/user-manual/usage/operation-api/_index.cn.md
index 78d4b44ce..a3346ae7b 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.cn.md
+++ b/docs/content/user-manual/usage/operation-api/_index.cn.md
@@ -4,13 +4,13 @@ weight = 4
 chapter = true
 +++
 
-ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操作的方式控制作业在分布式环境下的生命周期。
+ElasticJob 提供了 Java API，可以通过直接对注册中心进行操作的方式控制作业在分布式环境下的生命周期。
 
 该模块目前仍处于孵化状态。
 
 ## 配置类 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobConfigurationAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobConfigurationAPI`
 
 ### 获取作业配置
 
@@ -37,7 +37,7 @@ ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操
 
 ## 操作类 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobOperateAPI`
 
 ### 触发作业执行
 
@@ -85,7 +85,7 @@ ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操
 
 ## 操作分片的 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ShardingOperateAPI`
 
 ### 禁用作业分片
 
@@ -105,7 +105,7 @@ ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操
 
 ## 作业统计 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobStatisticsAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobStatisticsAPI`
 
 ### 获取作业总数
 
@@ -139,7 +139,7 @@ ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操
 
 ## 作业服务器状态展示 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ServerStatisticsAPI`
 
 ### 获取作业服务器总数
 
@@ -155,7 +155,7 @@ ElasticJob-Lite 提供了 Java API，可以通过直接对注册中心进行操
 
 ## 作业分片状态展示 API
 
-类名称：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI`
+类名称：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ShardingStatisticsAPI`
 
 ### 获取作业分片信息集合
 
diff --git a/docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.en.md b/docs/content/user-manual/usage/operation-api/_index.en.md
similarity index 83%
rename from docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.en.md
rename to docs/content/user-manual/usage/operation-api/_index.en.md
index e8998464d..11ade7c64 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/operation-api/_index.en.md
+++ b/docs/content/user-manual/usage/operation-api/_index.en.md
@@ -4,13 +4,13 @@ weight = 4
 chapter = true
 +++
 
-ElasticJob-Lite provides a Java API, which can control the life cycle of jobs in a distributed environment by directly operating the registry.
+ElasticJob provides a Java API, which can control the life cycle of jobs in a distributed environment by directly operating the registry.
 
 The module is still in incubation.
 
 ## Configuration API
 
-Class name: `org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobConfigurationAPI`
+Class name: `org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobConfigurationAPI`
 
 ### Get job configuration
 
@@ -37,7 +37,7 @@ Method signature：void removeJobConfiguration(String jobName)
 
 ## Operation API
 
-Class name：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI`
+Class name：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobOperateAPI`
 
 ### Trigger job execution
 
@@ -85,7 +85,7 @@ Method signature：void remove(Optional<String> jobName, Optional<String> server
 
 ## Operate sharding API
 
-Class name：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI`
+Class name：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ShardingOperateAPI`
 
 ### Disable job sharding
 
@@ -105,7 +105,7 @@ Method signature：void enable(String jobName, String item)
 
 ## Job statistics API
 
-Class name：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobStatisticsAPI`
+Class name：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.JobStatisticsAPI`
 
 ### Get the total count of jobs
 
@@ -139,7 +139,7 @@ Method signature：Collection<JobBriefInfo> getJobsBriefInfo(String ip)
 
 ## Job server status display API
 
-Class name：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI`
+Class name：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ServerStatisticsAPI`
 
 ### Total count of job servers
 
@@ -155,7 +155,7 @@ Method signature：Collection<ServerBriefInfo> getAllServersBriefInfo()
 
 ## Job sharding status display API
 
-Class name：`org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI`
+Class name：`org.apache.shardingsphere.elasticjob.engine.lifecycle.api.ShardingStatisticsAPI`
 
 ### Get job sharding information collection
 
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/_index.cn.md b/docs/content/user-manual/usage/tracing/_index.cn.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/_index.cn.md
rename to docs/content/user-manual/usage/tracing/_index.cn.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/_index.en.md b/docs/content/user-manual/usage/tracing/_index.en.md
similarity index 100%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/_index.en.md
rename to docs/content/user-manual/usage/tracing/_index.en.md
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.cn.md b/docs/content/user-manual/usage/tracing/java-api.cn.md
similarity index 85%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.cn.md
rename to docs/content/user-manual/usage/tracing/java-api.cn.md
index ca18a3873..ccbe862c2 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.cn.md
+++ b/docs/content/user-manual/usage/tracing/java-api.cn.md
@@ -4,7 +4,7 @@ weight = 1
 chapter = true
 +++
 
-ElasticJob-Lite 在配置中提供了 TracingConfiguration，目前支持数据库方式配置。
+ElasticJob 在配置中提供了 TracingConfiguration，目前支持数据库方式配置。
 开发者也可以通过 SPI 自行扩展。
 
 ```java
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.en.md b/docs/content/user-manual/usage/tracing/java-api.en.md
similarity index 85%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.en.md
rename to docs/content/user-manual/usage/tracing/java-api.en.md
index f46a71df7..c0178b54f 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/java-api.en.md
+++ b/docs/content/user-manual/usage/tracing/java-api.en.md
@@ -4,7 +4,7 @@ weight = 1
 chapter = true
 +++
 
-ElasticJob-Lite currently provides `TracingConfiguration` based on database in the configuration.
+ElasticJob currently provides `TracingConfiguration` based on database in the configuration.
 Developers can also extend it through SPI.
 
 ```java
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.cn.md b/docs/content/user-manual/usage/tracing/spring-boot-starter.cn.md
similarity index 84%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.cn.md
rename to docs/content/user-manual/usage/tracing/spring-boot-starter.cn.md
index e184fb64d..4bc598051 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.cn.md
+++ b/docs/content/user-manual/usage/tracing/spring-boot-starter.cn.md
@@ -4,7 +4,7 @@ weight = 2
 chapter = true
 +++
 
-ElasticJob-Lite 的 Spring Boot Starter 集成了 TracingConfiguration 自动配置，
+ElasticJob 的 Spring Boot Starter 集成了 TracingConfiguration 自动配置，
 开发者只需注册一个 DataSource 到 Spring 容器中并在配置文件指定事件追踪数据源类型，
 Starter 就会自动创建一个 TracingConfiguration 实例并注册到 Spring 容器中。
 
@@ -37,5 +37,5 @@ elasticjob:
 
 ## 作业启动
 
-指定事件追踪数据源类型为 RDB，TracingConfiguration 会自动注册到容器中，如果与 elasticjob-lite-spring-boot-starter 配合使用，
+指定事件追踪数据源类型为 RDB，TracingConfiguration 会自动注册到容器中，如果与 elasticjob-engine-spring-boot-starter 配合使用，
 开发者无需进行其他额外的操作，作业启动器会自动使用创建的 TracingConfiguration。
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.en.md b/docs/content/user-manual/usage/tracing/spring-boot-starter.en.md
similarity index 84%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.en.md
rename to docs/content/user-manual/usage/tracing/spring-boot-starter.en.md
index 72bc81be2..bb38e471c 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-boot-starter.en.md
+++ b/docs/content/user-manual/usage/tracing/spring-boot-starter.en.md
@@ -4,7 +4,7 @@ weight = 2
 chapter = true
 +++
 
-ElasticJob-Lite Spring Boot Starter has already integrated TracingConfiguration configuration.
+ElasticJob Spring Boot Starter has already integrated TracingConfiguration configuration.
 What developers need to do is register a bean of DataSource into the Spring IoC Container and set the type of data source.
 Then the Starter will create an instance of TracingConfiguration and register it into the container.
 
@@ -38,5 +38,5 @@ elasticjob:
 ## Job Start
 
 TracingConfiguration will be registered into the IoC container imperceptibly after setting tracing type to RDB.
-If elasticjob-lite-spring-boot-starter was imported, developers need to do nothing else. 
+If elasticjob-engine-spring-boot-starter was imported, developers need to do nothing else. 
 The instances of JobBootstrap will use the TracingConfiguration automatically.
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.cn.md b/docs/content/user-manual/usage/tracing/spring-namespace.cn.md
similarity index 95%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.cn.md
rename to docs/content/user-manual/usage/tracing/spring-namespace.cn.md
index e50c07d51..810c05cd5 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.cn.md
+++ b/docs/content/user-manual/usage/tracing/spring-namespace.cn.md
@@ -6,12 +6,12 @@ chapter = true
 
 ## 引入 Maven 依赖
 
-引入 elasticjob-lite-spring
+引入 elasticjob-engine-spring
 
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-namespace</artifactId>
+    <artifactId>elasticjob-engine-spring-namespace</artifactId>
     <version>${elasticjob.latest.version}</version>
 </dependency>
 ```
diff --git a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.en.md b/docs/content/user-manual/usage/tracing/spring-namespace.en.md
similarity index 96%
rename from docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.en.md
rename to docs/content/user-manual/usage/tracing/spring-namespace.en.md
index 7cbb9b496..e36bd0434 100644
--- a/docs/content/user-manual/elasticjob-lite/usage/tracing/spring-namespace.en.md
+++ b/docs/content/user-manual/usage/tracing/spring-namespace.en.md
@@ -9,7 +9,7 @@ chapter = true
 ```xml
 <dependency>
     <groupId>org.apache.shardingsphere.elasticjob</groupId>
-    <artifactId>elasticjob-lite-spring-namespace</artifactId>
+    <artifactId>elasticjob-engine-spring-namespace</artifactId>
     <version>${elasticjob.latest.version}</version>
 </dependency>
 ```
diff --git a/docs/content/user-manual/usage/tracing/table-structure.cn.md b/docs/content/user-manual/usage/tracing/table-structure.cn.md
new file mode 100644
index 000000000..704df210c
--- /dev/null
+++ b/docs/content/user-manual/usage/tracing/table-structure.cn.md
@@ -0,0 +1,47 @@
++++
+title = "表结构说明"
+weight = 4
+chapter = true
++++
+
+事件追踪的 event_trace_rdb_url 属性对应库自动创建 JOB_EXECUTION_LOG 和 JOB_STATUS_TRACE_LOG 两张表以及若干索引。
+
+## JOB_EXECUTION_LOG 字段含义
+
+| 字段名称             | 字段类型          | 是否必填 | 描述                                           |
+|------------------|:--------------|:-----|:---------------------------------------------|
+| id               | VARCHAR(40)   | 是    | 主键                                           |
+| job_name         | VARCHAR(100)  | 是    | 作业名称                                         |
+| task_id          | VARCHAR(1000) | 是    | 任务名称,每次作业运行生成新任务                             |
+| hostname         | VARCHAR(255)  | 是    | 主机名称                                         |
+| ip               | VARCHAR(50)   | 是    | 主机IP                                         |
+| sharding_item    | INT           | 是    | 分片项                                          |
+| execution_source | VARCHAR(20)   | 是    | 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER |
+| failure_cause    | VARCHAR(2000) | 否    | 执行失败原因                                       |
+| is_success       | BIT           | 是    | 是否执行成功                                       |
+| start_time       | TIMESTAMP     | 是    | 作业开始执行时间                                     |
+| complete_time    | TIMESTAMP     | 否    | 作业结束执行时间                                     |
+
+JOB_EXECUTION_LOG 记录每次作业的执行历史。
+分为两个步骤：
+
+1. 作业开始执行时向数据库插入数据，除 failure_cause 和 complete_time 外的其他字段均不为空。
+1. 作业完成执行时向数据库更新数据，更新 is_success, complete_time 和 failure_cause(如果作业执行失败)。
+
+## JOB_STATUS_TRACE_LOG 字段含义
+
+| 字段名称             | 字段类型          | 是否必填 | 描述                                                                                                    |
+|------------------|:--------------|:-----|:------------------------------------------------------------------------------------------------------|
+| id               | VARCHAR(40)   | 是    | 主键                                                                                                    |
+| job_name         | VARCHAR(100)  | 是    | 作业名称                                                                                                  |
+| original_task_id | VARCHAR(1000) | 是    | 原任务名称                                                                                                 |
+| task_id          | VARCHAR(1000) | 是    | 任务名称                                                                                                  |
+| slave_id         | VARCHAR(1000) | 是    | 执行作业服务器的 IP 地址                                                                                        |
+| execution_type   | VARCHAR(20)   | 是    | 任务执行类型，可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER                                                          |
+| sharding_item    | VARCHAR(255)  | 是    | 分片项集合，多个分片项以逗号分隔                                                                                      |
+| state            | VARCHAR(20)   | 是    | 任务执行状态，可选值为TASK_STAGING, TASK_RUNNING, TASK_FINISHED, TASK_KILLED, TASK_LOST, TASK_FAILED, TASK_ERROR |
+| message          | VARCHAR(2000) | 是    | 相关信息                                                                                                  |
+| creation_time    | TIMESTAMP     | 是    | 记录创建时间                                                                                                |
+
+JOB_STATUS_TRACE_LOG 记录作业状态变更痕迹表。
+可通过每次作业运行的 task_id 查询作业状态变化的生命周期和运行轨迹。
diff --git a/docs/content/user-manual/usage/tracing/table-structure.en.md b/docs/content/user-manual/usage/tracing/table-structure.en.md
new file mode 100644
index 000000000..1da552527
--- /dev/null
+++ b/docs/content/user-manual/usage/tracing/table-structure.en.md
@@ -0,0 +1,47 @@
++++
+title = "Table Structure"
+weight = 4
+chapter = true
++++
+
+The database which is the value of the event tracing property `event_trace_rdb_url` will automatically create two tables `JOB_EXECUTION_LOG` and `JOB_STATUS_TRACE_LOG` and several indexes.
+
+## JOB_EXECUTION_LOG Columns
+
+| Column name      | Column type   | Required | Describe                                                                                |
+|------------------|:--------------|:---------|:----------------------------------------------------------------------------------------|
+| id               | VARCHAR(40)   | Yes      | Primary key                                                                             |
+| job_name         | VARCHAR(100)  | Yes      | Job name                                                                                |
+| task_id          | VARCHAR(1000) | Yes      | Task name, create new tasks every time the job runs.                                    |
+| hostname         | VARCHAR(255)  | Yes      | Hostname                                                                                |
+| ip               | VARCHAR(50)   | Yes      | IP                                                                                      |
+| sharding_item    | INT           | Yes      | Sharding item                                                                           |
+| execution_source | VARCHAR(20)   | Yes      | Source of job execution. The value options are `NORMAL_TRIGGER`, `MISFIRE`, `FAILOVER`. |
+| failure_cause    | VARCHAR(2000) | No       | The reason for execution failure                                                        |
+| is_success       | BIT           | Yes      | Execute successfully or not                                                             |
+| start_time       | TIMESTAMP     | Yes      | Job start time                                                                          |
+| complete_time    | TIMESTAMP     | No       | Job end time                                                                            |
+
+`JOB_EXECUTION_LOG` records the execution history of each job.
+There are two steps:
+
+1. When the job is executed, program will create one record in the `JOB_EXECUTION_LOG`, and all fields except `failure_cause` and `complete_time` are not empty.
+1. When the job completes execution, program will update the record, update the columns of `is_success`, `complete_time` and `failure_cause`(if the job execution fails).
+
+## JOB_STATUS_TRACE_LOG Columns
+
+| Column name      | Column type   | Required | Describe                                                                                                                                                |
+|------------------|:--------------|:---------|:--------------------------------------------------------------------------------------------------------------------------------------------------------|
+| id               | VARCHAR(40)   | Yes      | Primary key                                                                                                                                             |
+| job_name         | VARCHAR(100)  | Yes      | Job name                                                                                                                                                |
+| original_task_id | VARCHAR(1000) | Yes      | Original task name                                                                                                                                      |
+| task_id          | VARCHAR(1000) | Yes      | Task name                                                                                                                                               |
+| slave_id         | VARCHAR(1000) | Yes      | Server's name of executing the job. The valve is server's IP.                                                                                           |
+| execution_type   | VARCHAR(20)   | Yes      | Type of job execution, the value options are `NORMAL_TRIGGER`, `MISFIRE`, `FAILOVER`.                                                                   |
+| sharding_item    | VARCHAR(255)  | Yes      | Collection of sharding item, multiple sharding items are separated by commas.                                                                           |
+| state            | VARCHAR(20)   | Yes      | State of job execution, the value options are `TASK_STAGING`, `TASK_RUNNING`, `TASK_FINISHED`, `TASK_KILLED`, `TASK_LOST`, `TASK_FAILED`, `TASK_ERROR`. |
+| message          | VARCHAR(2000) | Yes      | Message                                                                                                                                                 |
+| creation_time    | TIMESTAMP     | Yes      | Create time                                                                                                                                             |
+
+`JOB_STATUS_TRACE_LOG` record the job status changes.
+Through the `task_id` of each job, user can query the life cycle and running track of the job status change.
