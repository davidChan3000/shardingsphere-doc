commit a392e14cf9f84961f6926a2124a0983546601771
Author: Ling Hengqian <linghengqian@outlook.com>
Date:   Thu Nov 16 11:06:16 2023 +0800

    Provides built-in GraalVM Reachability Metadata for core features of ShardingSphere JDBC and adds nativeTest-related unit test subsets (#29000)
    
    * Provides built-in GraalVM Reachability Metadata for core features of ShardingSphere JDBC and adds nativeTest-related unit test subsets
    
    * Deal with coding style
    
    * Use `java.util.Collection` instead of `java.util.List` in unit tests

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md
new file mode 100644
index 00000000000..ba6f3a41a2e
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md
@@ -0,0 +1,263 @@
++++
+title = "GraalVM Native Image"
+weight = 8
+chapter = true
++++
+
+## 背景信息
+
+ShardingSphere JDBC 已在 GraalVM Native Image 下完成可用性验证。
+
+构建包含 `org.apache.shardingsphere:shardingsphere-jdbc-core:${shardingsphere.version}` 的 Maven 依赖的 GraalVM Native 
+Image，你需要借助于 GraalVM Native Build Tools。GraalVM Native Build Tools 提供了 Maven Plugin 和 Gradle Plugin 来简化 GraalVM
+CE 的 `native-image` 工具的长篇大论的 shell 命令。
+
+ShardingSphere JDBC 要求在如下或更高版本的 `GraalVM CE` 完成构建 GraalVM Native Image。使用者可通过 SDKMAN! 快速切换 JDK。这同理
+适用于 `Oracle GraalVM`， `Liberica Native Image Kit` 和 `Mandrel` 等 `GraalVM CE` 的下游发行版。
+
+- GraalVM CE 23.0.2 For JDK 17.0.9，对应于 SDKMAN! 的 `17.0.9-graalce`
+- GraalVM CE 23.0.2 For JDK 21.0.1，对应于 SDKMAN! 的 `21.0.1-graalce`
+
+### Maven 生态
+
+使用者需要配置额外的 BuildArgs ，以阻止 GroovyShell 的相关类在构建 GraalVM Native Image 时报错。并主动使用 GraalVM Reachability 
+Metadata 中央仓库。如下配置可供参考，以配置项目额外的 Maven Profile，以 GraalVM Native Build Tools 的文档为准。
+
+```xml
+<project>
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.shardingsphere</groupId>
+            <artifactId>shardingsphere-jdbc-core</artifactId>
+            <version>${shardingsphere.version}</version>
+        </dependency>
+    </dependencies>
+    
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.graalvm.buildtools</groupId>
+                <artifactId>native-maven-plugin</artifactId>
+                <version>0.9.28</version>
+                <extensions>true</extensions>
+                <configuration>
+                    <buildArgs>
+                        <arg>--report-unsupported-elements-at-runtime</arg>
+                    </buildArgs>
+                    <metadataRepository>
+                        <enabled>true</enabled>
+                    </metadataRepository>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>build-native</id>
+                        <goals>
+                            <goal>compile-no-fork</goal>
+                        </goals>
+                        <phase>package</phase>
+                    </execution>
+                    <execution>
+                        <id>test-native</id>
+                        <goals>
+                            <goal>test</goal>
+                        </goals>
+                        <phase>test</phase>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+</project>
+```
+
+### Gradle 生态
+
+使用者需要配置额外的 BuildArgs ，以阻止 GroovyShell 的相关类在构建 GraalVM Native Image 时报错。并主动使用 GraalVM Reachability
+Metadata 中央仓库。如下配置可供参考，以配置项目额外的 Gradle Task，以 GraalVM Native Build Tools 的文档为准。
+
+```groovy
+plugins {
+    id 'org.graalvm.buildtools.native' version '0.9.28'
+}
+
+dependencies {
+    implementation 'org.apache.shardingsphere:shardingsphere-jdbc-core:${shardingsphere.version}'
+}
+
+graalvmNative {
+    binaries {
+        main {
+            buildArgs.add('--report-unsupported-elements-at-runtime')
+        }
+        test {
+            buildArgs.add('--report-unsupported-elements-at-runtime')
+        }
+    }
+    metadataRepository {
+        enabled = true
+    }
+}
+```
+
+### 对于 SBT 等不被 GraalVM Native Build Tools 支持的构建工具
+
+此类需求需要在 https://github.com/graalvm/native-build-tools 打开额外的 issue 并提供对应构建工具的 Plugin 实现。
+
+
+### 使用限制
+
+1. 如下的算法类由于涉及到 https://github.com/oracle/graal/issues/5522 ， 暂未可在 GraalVM Native Image 下使用。
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.ComplexInlineShardingAlgorithm`
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`
+
+对于常规案例，使用者可通过 CLASS_BASE 算法自行模拟 GroovyShell 的行为。例如对于如下配置。
+
+```yaml
+rules:
+- !SHARDING
+  defaultDatabaseStrategy:
+      standard:
+        shardingColumn: user_id
+        shardingAlgorithmName: inline
+  shardingAlgorithms:
+    inline:
+      type: INLINE
+      props:
+        algorithm-expression: ds_${user_id % 2}
+        allow-range-query-with-inline-sharding: false
+```
+
+可首先定义 CLASS_BASE 的实现类。
+
+```java
+package org.example.test;
+
+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;
+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;
+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;
+
+import java.util.Collection;
+
+public final class TestShardingAlgorithmFixture implements StandardShardingAlgorithm<Integer> {
+    
+    @Override
+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Integer> shardingValue) {
+        String resultDatabaseName = "ds_" + shardingValue.getValue() % 2;
+        for (String each : availableTargetNames) {
+            if (each.equals(resultDatabaseName)) {
+                return each;
+            }
+        }
+        return null;
+    }
+    
+    @Override
+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Integer> shardingValue) {
+        throw new RuntimeException("This algorithm class does not support range queries.");
+    }
+}
+```
+
+修改相关 YAML 配置如下。
+
+```yaml
+rules:
+- !SHARDING
+  defaultDatabaseStrategy:
+      standard:
+        shardingColumn: user_id
+        shardingAlgorithmName: inline
+  shardingAlgorithms:
+    inline:
+        type: CLASS_BASED
+        props:
+          strategy: STANDARD
+          algorithmClassName: org.example.test.TestShardingAlgorithmFixture
+```
+
+在 `src/main/resources/META-INF/native-image/exmaple-test-metadata/reflect-config.json` 加入如下内容即可在正常在 GraalVM Native 
+Image 下使用。
+
+```json
+[
+{
+  "name":"org.example.test.TestShardingAlgorithmFixture",
+  "methods":[{"name":"<init>","parameterTypes":[] }]
+}
+]
+```
+
+2. 对于 `读写分离` 的功能，你需要使用 `行表达式` SPI 的其他实现，以在配置 `logic database name`，`writeDataSourceName` 和 `readDataSourceNames` 
+时绕开对 GroovyShell 的调用。一个可能的配置是使用 `LITERAL` 的 `行表达式` SPI 的实现。对于 `数据分片` 的功能的 `actualDataNodes` 同理。
+```yaml
+rules:
+- !READWRITE_SPLITTING
+  dataSources:
+    <LITERAL>readwrite_ds:
+      writeDataSourceName: <LITERAL>ds_0
+      readDataSourceNames:
+        - <LITERAL>ds_1
+        - <LITERAL>ds_2
+```
+
+3. 使用者依然需要在 `src/main/resources/META-INF/native-image` 文件夹或 `src/test/resources/META-INF/native-image` 文件夹配置独立
+文件的 GraalVM Reachability Metadata。使用者可通过 GraalVM Native Build Tools 的 GraalVM Tracing Agent 来快速采集 GraalVM 
+Reachability Metadata。
+
+4. 尚未验证 DistSQL 的可用性。使用者需自行添加额外的 GraalVM Reachability Metadata。
+
+## 贡献 GraalVM Reachability Metadata
+
+ShardingSphere 对在 GraalVM Native Image 下的可用性的验证，是通过 GraalVM Native Build Tools 的 Maven Plugin 子项目来完成的。
+通过在 JVM 下运行单元测试，为单元测试打上 `junit-platform-unique-ids*` 标签，此后构建为 GraalVM Native Image 进行 nativeTest 来测试
+在 GraalVM Native Image 下的单元测试覆盖率。请贡献者不要使用 `io.kotest:kotest-runner-junit5-jvm:5.5.4` 等在 `test listener` mode 下
+failed to discover tests 的测试库。
+
+ShardingSphere 定义了 `shardingsphere-infra-nativetest` 的 Maven Module 用于为 native Test 提供小型的单元测试子集，
+此单元测试子集避免了使用 Mockito 等 native Test 下无法使用的第三方库。
+
+ShardingSphere 定义了 `nativeTestInShardingSphere` 的 Maven Profile 用于为 `shardingsphere-infra-nativetest` 模块执行 nativeTest 。
+
+假设贡献者处于新的 Ubuntu 22.04.3 LTS 实例下，其可通过如下 bash 命令通过 SDKMAN! 管理 JDK 和工具链，
+并为 `shardingsphere-infra-nativetest` 子模块执行 nativeTest。
+
+```bash
+sudo apt install unzip zip curl sed -y
+curl -s "https://get.sdkman.io" | bash
+source "$HOME/.sdkman/bin/sdkman-init.sh"
+sdk install java 17.0.9-graalce
+sdk use java 17.0.9-graalce
+sudo apt-get install build-essential libz-dev zlib1g-dev -y
+
+git clone git@github.com:apache/shardingsphere.git
+cd ./shardingsphere/
+./mvnw -PnativeTestInShardingSphere -T1C -e clean test
+```
+
+当贡献者发现缺少与 ShardingSphere 无关的第三方库的 GraalVM Reachability Metadata 时，应当在
+https://github.com/oracle/graalvm-reachability-metadata 打开新的 issue， 并提交包含依赖的第三方库缺失的 GraalVM Reachability
+Metadata 的 PR。ShardingSphere 在 `shardingsphere-infra-reachability-metadata` 子模块主动托管了部分第三方库的 GraalVM Reachability Metadata。
+
+如果 nativeTest 执行失败， 应为单元测试生成初步的 GraalVM Reachability Metadata，并手动调整以修复 nativeTest。
+如有需要，请使用 `org.junit.jupiter.api.condition.DisabledInNativeImage` 注解或 `org.graalvm.nativeimage.imagecode` 的
+System Property 屏蔽部分单元测试在 GraalVM Native Image 下运行。
+
+ShardingSphere 定义了 `generateMetadata` 的 Maven Profile 用于在 GraalVM JIT Compiler 下携带 GraalVM Tracing Agent 执行单元测试，并在特定目录下生成或合并
+已有的 GraalVM Reachability Metadata 文件。可通过如下 bash 命令简单处理此流程。贡献者仍可能需要手动调整具体的 JSON 条目，并在适当的时候
+调整 Maven Profile 和 GraalVM Tracing Agent 的 Filter 链。
+
+以下命令仅为 `shardingsphere-infra-nativetest` 生成 Conditional 形态的 GraalVM Reachability Metadata 的一个举例。生成的 GraalVM
+Reachability Metadata 位于 `shardingsphere-infra-reachability-metadata` 子模块下。
+
+对于测试类和测试文件独立使用的 GraalVM Reachability Metadata，贡献者应该放置到
+`${user.dir}/infra/nativetest/src/test/resources/META-INF/native-image/shardingsphere-infra-nativetest-test-metadata/`
+文件夹下。`${}` 内为相关子模块对应的 POM 4.0 的常规系统变量，自行替换。
+
+```bash
+git clone git@github.com:apache/shardingsphere.git
+cd ./shardingsphere/
+./mvnw -PgenerateMetadata -DskipNativeTests -e -T1C clean test native:metadata-copy
+```
+
+请手动删除无任何具体条目的 JSON 文件。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md
new file mode 100644
index 00000000000..4037034abe0
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md
@@ -0,0 +1,277 @@
++++
+title = "GraalVM Native Image"
+weight = 8
+chapter = true
++++
+
+## Background Information
+
+ShardingSphere JDBC has been validated for availability under GraalVM Native Image.
+
+Build GraalVM Native containing Maven dependencies of `org.apache.shardingsphere:shardingsphere-jdbc-core:${shardingsphere.version}`
+Image, you need to resort to GraalVM Native Build Tools. GraalVM Native Build Tools provides Maven Plugin and Gradle Plugin 
+to simplify long list of shell commands for GraalVM CE's `native-image` tool.
+
+ShardingSphere JDBC requires GraalVM Native Image to be built with GraalVM CE as follows or higher. Users can quickly switch 
+JDK through `SDKMAN!`. Same reason applicable to downstream distributions of `GraalVM CE` such as `Oracle GraalVM`, `Liberica Native Image Kit` 
+and `Mandrel`.
+
+- GraalVM CE 23.0.2 For JDK 17.0.9, corresponding to `17.0.9-graalce` of SDKMAN!
+- GraalVM CE 23.0.2 For JDK 21.0.1, corresponding to `21.0.1-graalce` of SDKMAN!
+
+### Maven Ecology
+
+Users need to configure additional `BuildArgs` to prevent GroovyShell related classes from reporting errors when building 
+GraalVM Native Image. and proactively use GraalVM Reachability Metadata central repository. The following configuration 
+is for reference to configure additional Maven Profiles for the project, and the documentation of GraalVM Native Build 
+Tools shall prevail.
+
+```xml
+<project>
+     <dependencies>
+         <dependency>
+             <groupId>org.apache.shardingsphere</groupId>
+             <artifactId>shardingsphere-jdbc-core</artifactId>
+             <version>${shardingsphere.version}</version>
+         </dependency>
+     </dependencies>
+    
+     <build>
+         <plugins>
+             <plugin>
+                 <groupId>org.graalvm.buildtools</groupId>
+                 <artifactId>native-maven-plugin</artifactId>
+                 <version>0.9.28</version>
+                 <extensions>true</extensions>
+                 <configuration>
+                     <buildArgs>
+                         <arg>--report-unsupported-elements-at-runtime</arg>
+                     </buildArgs>
+                     <metadataRepository>
+                         <enabled>true</enabled>
+                     </metadataRepository>
+                 </configuration>
+                 <executions>
+                     <execution>
+                         <id>build-native</id>
+                         <goals>
+                             <goal>compile-no-fork</goal>
+                         </goals>
+                         <phase>package</phase>
+                     </execution>
+                     <execution>
+                         <id>test-native</id>
+                         <goals>
+                             <goal>test</goal>
+                         </goals>
+                         <phase>test</phase>
+                     </execution>
+                 </executions>
+             </plugin>
+         </plugins>
+     </build>
+</project>
+```
+
+### Gradle Ecosystem
+
+Users need to configure additional `BuildArgs` to prevent GroovyShell related classes from reporting errors when building
+GraalVM Native Image. and proactively use GraalVM Reachability Metadata central repository. The following configuration
+is for reference to configure additional Gradle Task for the project, and the documentation of GraalVM Native Build
+Tools shall prevail.
+
+```groovy
+plugins {
+     id 'org.graalvm.buildtools.native' version '0.9.28'
+}
+
+dependencies {
+     implementation 'org.apache.shardingsphere:shardingsphere-jdbc-core:${shardingsphere.version}'
+}
+
+graalvmNative {
+     binaries {
+         main {
+             buildArgs.add('--report-unsupported-elements-at-runtime')
+         }
+         test {
+             buildArgs.add('--report-unsupported-elements-at-runtime')
+         }
+     }
+     metadataRepository {
+         enabled = true
+     }
+}
+```
+
+### For build tools such as SBT that are not supported by GraalVM Native Build Tools
+
+Such requirements require opening additional issues at https://github.com/graalvm/native-build-tools and providing the Plugin 
+implementation of the corresponding build tool.
+
+
+### Usage restrictions
+
+1. The following algorithm classes are not available under GraalVM Native Image due to the involvement of https://github.com/oracle/graal/issues/5522.
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.ComplexInlineShardingAlgorithm`
+    - `org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`
+
+For general cases, users can simulate the behavior of GroovyShell by themselves through the `CLASS_BASE` algorithm. For example, 
+take the following configuration.
+
+```yaml
+rules:
+- !SHARDING
+   defaultDatabaseStrategy:
+       standard:
+         shardingColumn: user_id
+         shardingAlgorithmName: inline
+   shardingAlgorithms:
+     inline:
+       type: INLINE
+       props:
+         algorithm-expression: ds_${user_id % 2}
+         allow-range-query-with-inline-sharding: false
+```
+
+You can first define the implementation class of `CLASS_BASE`.
+
+```java
+package org.example.test;
+
+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;
+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;
+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;
+
+import java.util.Collection;
+
+public final class TestShardingAlgorithmFixture implements StandardShardingAlgorithm<Integer> {
+    
+    @Override
+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Integer> shardingValue) {
+        String resultDatabaseName = "ds_" + shardingValue.getValue() % 2;
+        for (String each : availableTargetNames) {
+            if (each.equals(resultDatabaseName)) {
+                return each;
+            }
+        }
+        return null;
+    }
+    
+    @Override
+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Integer> shardingValue) {
+        throw new RuntimeException("This algorithm class does not support range queries.");
+    }
+}
+```
+
+Modify the relevant YAML configuration as follows.
+
+```yaml
+rules:
+- !SHARDING
+   defaultDatabaseStrategy:
+       standard:
+         shardingColumn: user_id
+         shardingAlgorithmName: inline
+   shardingAlgorithms:
+     inline:
+         type: CLASS_BASED
+         props:
+           strategy: STANDARD
+           algorithmClassName: org.example.test.TestShardingAlgorithmFixture
+```
+
+Add the following content to `src/main/resources/META-INF/native-image/exmaple-test-metadata/reflect-config.json` to used 
+normally under GraalVM Native Image.
+
+```json
+[
+{
+   "name":"org.example.test.TestShardingAlgorithmFixture",
+   "methods":[{"name":"<init>","parameterTypes":[] }]
+}
+]
+```
+
+2. For the `ReadWrite Splitting` feature, you need to use other implementations of `Row Value Expressions` SPI to configure 
+`logic database name`, `writeDataSourceName` and `readDataSourceNames` when bypassing calls to GroovyShell. One possible 
+configuration is to use the `Row Value Expressions` SPI implementation of `LITERAL`. The same applies to `actualDataNodes` 
+for the `Sharding` feature.
+
+```yaml
+rules:
+- !READWRITE_SPLITTING
+   dataSources:
+     <LITERAL>readwrite_ds:
+       writeDataSourceName: <LITERAL>ds_0
+       readDataSourceNames:
+         - <LITERAL>ds_1
+         - <LITERAL>ds_2
+```
+
+3. Users still need to configure GraalVM Reachability Metadata for independent files in the `src/main/resources/META-INF/native-image` 
+folder or `src/test/resources/META-INF/native-image` folder. Users can quickly collect GraalVM Reachability Metadata through 
+the GraalVM Tracing Agent of GraalVM Native Build Tools. 
+
+4. DistSQL availability has not been verified. Users need to add additional GraalVM Reachability Metadata by themselves.
+
+## Contribute GraalVM Reachability Metadata
+
+The verification of ShardingSphere's availability under GraalVM Native Image is completed through the Maven Plugin subproject 
+of GraalVM Native Build Tools. By running the unit test under the JVM, label the unit test with `junit-platform-unique-ids*`, 
+and then build it as GraalVM Native Image for nativeTest to test Unit Test Coverage under GraalVM Native Image. 
+Please do not use `io.kotest:kotest-runner-junit5-jvm:5.5.4` and some third-party test libraries, they are in `test listener` 
+mode failed to discover tests.
+
+ShardingSphere defines the Maven Module of `shardingsphere-infra-nativetest` to provide a small subset of unit tests for native Test.
+This subset of unit tests avoids the use of third-party libraries such as Mockito that are not available under native Test.
+
+ShardingSphere defines the Maven Profile of `nativeTestInShardingSphere` for executing nativeTest for the `shardingsphere-infra-nativetest` module.
+
+Assuming that the contributor is under a new Ubuntu 22.04.3 LTS instance, Contributors can manage the JDK and tool chain through 
+`SDKMAN!` through the following bash command, and execute nativeTest for the `shardingsphere-infra-nativetest` submodule.
+
+```bash
+sudo apt install unzip zip curl sed -y
+curl -s "https://get.sdkman.io" | bash
+source "$HOME/.sdkman/bin/sdkman-init.sh"
+sdk install java 17.0.9-graalce
+sdk use java 17.0.9-graalce
+sudo apt-get install build-essential libz-dev zlib1g-dev -y
+
+git clone git@github.com:apache/shardingsphere.git
+cd ./shardingsphere/
+./mvnw -PnativeTestInShardingSphere -T1C -e clean test
+```
+
+When contributors discover that GraalVM Reachability Metadata is missing for a third-party library not related to ShardingSphere, 
+they should open a new issue and submit PR containing the missing third-party library GraalVM Reachability Metadata that depends 
+on https://github.com/oracle/graalvm-reachability-metadata . ShardingSphere actively hosts the GraalVM Reachability Metadata of 
+some third-party libraries in the `shardingsphere-infra-reachability-metadata` submodule.
+
+If nativeTest execution fails, preliminary GraalVM Reachability Metadata should be generated for unit tests and manually 
+adjusted to fix nativeTest. If necessary, use the `org.junit.jupiter.api.condition.DisabledInNativeImage` annotation or the 
+`org.graalvm.nativeimage.imagecode` System Property blocks some unit tests from running under GraalVM Native Image.
+
+ShardingSphere defines the Maven Profile of `generateMetadata`, which is used to carry GraalVM Reachability Metadata. Bring 
+GraalVM Tracing Agent under GraalVM JIT Compiler to perform unit testing, and generate or merge existing GraalVM Reachability 
+Metadata files in a specific directory.
+This process can be easily handled with the following bash command. Contributors may still need to manually adjust specific 
+JSON entries and GraalVM Tracing Agent Filter chain of Maven Profile.
+
+The following command is only an example of using `shardingsphere-infra-nativetest` to generate GraalVM Reachability Metadata 
+in Conditional form. Generated GraalVM Reachability Metadata is located under the `shardingsphere-infra-reachability-metadata` submodule.
+
+For GraalVM Reachability Metadata used independently by test classes and test files, contributors should place
+`${user.dir}/infra/nativetest/src/test/resources/META-INF/native-image/shardingsphere-infra-nativetest-test-metadata/`
+folder. `${}` contains the regular system variables of POM 4.0 corresponding to the relevant submodules, which can be replaced by yourself.
+
+```bash
+git clone git@github.com:apache/shardingsphere.git
+cd ./shardingsphere/
+./mvnw -PgenerateMetadata -DskipNativeTests -e -T1C clean test native:metadata-copy
+```
+
+Please manually delete JSON files without any specific entries.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
index 4afb9ffa1c3..a8b17547ee4 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
@@ -25,18 +25,6 @@ services:
       - "3307:3307"
 ```
 
-- 若你发现构建过程存在缺失的 GraalVM Reachability Metadata,
-  应当在 https://github.com/oracle/graalvm-reachability-metadata 打开新的 issue ，
-  并提交包含 ShardingSphere 自身或依赖的第三方库缺失的 GraalVM Reachability Metadata 的 PR。
-
-- ShardingSphere 的 master 分支尚未准备好处理 Native Image 中的单元测试 ， 你总是需要在构建 GraalVM Native Image 的过程中，
-  加上特定于 `GraalVM Native Build Tools` 的 `-DskipNativeTests` 或 `-DskipTests` 参数跳过 Native Image 中的单元测试。
-
-- 如下的算法类由于涉及到 https://github.com/oracle/graal/issues/5522 ， 暂未可在 GraalVM Native Image 下使用。
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.ComplexInlineShardingAlgorithm`
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`
-
 - 当前阶段，GraalVM Native Image 形态的 ShardingSphere Proxy 不支持使用 `InlineExpressionParser` SPI 的默认实现的 `行表达式`， 
   这首先导致 `数据分片` 功能的`actualDataNodes` 属性只能使用其他 `InlineExpressionParser` SPI 的实现来配置， 例如使用
  `InlineExpressionParser` SPI 实现为 `LITERAL` 的 `行表达式`, 即 `<LITERAL>ds_0.t_order_0, ds_0.t_order_1`
@@ -54,19 +42,13 @@ services:
    或 `GraalVM Community Edition` 的下游发行版。若使用 `SDKMAN!`，
 
 ```shell
-sdk install java 17.0.8-graalce
+sdk install java 17.0.9-graalce
 ```
 
 2. 根据 https://www.graalvm.org/jdk17/reference-manual/native-image/#prerequisites 的要求安装本地工具链。
 
 3. 如果需要构建 Docker Image， 确保 `docker-ce` 已安装。
 
-4. 首先需要在项目的根目录下，执行如下命令以为所有子模块采集 Standard 形态的 GraalVM 可达性元数据。
-
-```shell
-./mvnw -PgenerateStandardMetadata -DskipNativeTests -B -T1C clean test
-```
-
 ## 操作步骤
 
 1. 获取 Apache ShardingSphere Git Source
@@ -148,7 +130,7 @@ services:
   另请注意，某些第三方依赖将需要在 `Dockerfile` 安装更多系统库，例如 `libdl`。
   因此请确保根据你的使用情况调整 `distribution/proxy-native` 下的 `pom.xml` 和 `Dockerfile` 的内容。
 
-# 可观察性
+## 可观察性
 
 - 针对 GraalVM Native Image 形态的 ShardingSphere Proxy，其提供的可观察性的能力与
   https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/observability/ 并不一致。
@@ -160,7 +142,7 @@ services:
   https://github.com/oracle/graal/issues/5648 。
 
 - 对于使用 `ShardingSphere Agent` 等 APM Java Agent 的情形， GraalVM 的 `native-image` 组件尚未完全支持在构建 Native
-  Image 时使用 javaagent，你需要关注尚未关闭的 https://github.com/oracle/graal/issues/1065。
+  Image 时使用 javaagent，你需要关注尚未关闭的 https://github.com/oracle/graal/issues/1065 。
 
 - 以下部分采用 `Apache SkyWalking Java Agent` 作为示例，可用于跟踪 GraalVM 社区的对应 issue。
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
index 638177fff99..416af5d9747 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
@@ -27,21 +27,6 @@ services:
       - "3307:3307"
 ````
 
-- If you find that the build process has missing GraalVM Reachability Metadata, a new issue should be opened
-  at https://github.com/oracle/graalvm-reachability-metadata, and submit a PR containing GraalVM Reachability Metadata
-  missing from ShardingSphere itself or dependent third-party libraries.
-
-- The master branch of ShardingSphere is not yet ready to handle unit tests in Native Image,
-  you always need to build GraalVM Native Image in the process,
-  Plus `-DskipNativeTests` or `-DskipTests` parameter specific to `GraalVM Native Build Tools` to skip unit tests in
-  Native Image.
-
-- The following algorithm classes are not available under GraalVM Native Image due
-  to https://github.com/oracle/graal/issues/5522 involved.
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.inline.ComplexInlineShardingAlgorithm`
-    - `org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`
-
 - At this stage, ShardingSphere Proxy in the form of GraalVM Native Image does not support `row expressions` using the 
   default implementation of the `InlineExpressionParser` SPI.
   This first results in the `actualDataNodes` property of the `data sharding` feature that can only be configured using 
@@ -62,20 +47,13 @@ services:
 JDK 17 according to https://www.graalvm.org/downloads/. If `SDKMAN!` is used,
 
 ```shell
-sdk install java 17.0.8-graalce
+sdk install java 17.0.9-graalce
 ```
 
 2. Install the local toolchain as required by https://www.graalvm.org/jdk17/reference-manual/native-image/#prerequisites.
 
 3. If you need to build a Docker Image, make sure `docker-ce` is installed.
 
-4. First, you need to execute the following command in the root directory of the project to collect the GraalVM
-   Reachability Metadata of the Standard form for all submodules.
-
-```shell
-./mvnw -PgenerateStandardMetadata -DskipNativeTests -B -T1C clean test
-```
-
 ## Steps
 
 1. Get Apache ShardingSphere Git Source
@@ -163,7 +141,7 @@ services:
   the `Dockerfile`. So make sure to tune `distribution/proxy-native` according to your usage `pom.xml` and `Dockerfile`
   below.
 
-# Observability
+## Observability
 
 - ShardingSphere for GraalVM Native Image form Proxy, which provides observability capabilities
   with https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/observability/
